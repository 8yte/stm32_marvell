<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\STM32WIFI.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\STM32WIFI.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 481]: Last Updated: Tue Nov 08 21:51:41 2016
<BR><P>
<H3>Maximum Stack Usage =       1316 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
woal_cfg80211_scan &rArr; woal_cfg80211_mgmt_frame_ie &rArr; woal_cfg80211_custom_ie &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[e1]">OS_CPU_SR_Save</a>
 <LI><a href="#[e2]">OS_CPU_SR_Restore</a>
 <LI><a href="#[1a2]">OSStartHighRdy</a>
 <LI><a href="#[189]">OSCtxSw</a>
 <LI><a href="#[19e]">OSIntCtxSw</a>
 <LI><a href="#[8]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[251]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[251]">netconn_drain</a><BR>
 <LI><a href="#[66d]">skb_release_all</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[669]">skb_release_data</a><BR>
 <LI><a href="#[27c]">lwip_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27b]">lwip_sendto</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from sys_misc.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from os_cpu_a.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from os_cpu_c.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from w25p80.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[72]">igmp_timer</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from sdcard.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[71]">dhcp_timer_fine</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d3]">wlan_ops_sta_process_cmdresp</a> from mlan_sta_cmdresp.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">main</a> from main.o(.text) referenced from entry7.o(.ARM.Collect$$$$00000007)
 <LI><a href="#[6dc]">devcie_info_page_assemble</a> from webserver.o(.text) referenced from webserver.o(.text)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[49]">OSTmr_Task</a> from os_tmr.o(.text) referenced from os_tmr.o(.text)
 <LI><a href="#[51]">do_connect</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[4a]">OS_TaskReturn</a> from os_task.o(.text) referenced from os_cpu_c.o(.text)
 <LI><a href="#[4b]">OSTaskSwHook</a> from os_cpu_c.o(.text) referenced from os_cpu_a.o(.text)
 <LI><a href="#[4c]">os_workqueue_thread</a> from task.o(.text) referenced from task.o(.text)
 <LI><a href="#[4d]">do_newconn</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[4e]">do_delconn</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[4f]">do_getaddr</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[50]">do_bind</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[52]">do_disconnect</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[53]">do_listen</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[54]">do_recv</a> from api_msg.o(.text) referenced 2 times from api_lib.o(.text)
 <LI><a href="#[55]">do_send</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[56]">do_write</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[57]">do_close</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[58]">do_join_leave_group</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[59]">do_gethostbyname</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[5a]">sent_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[5b]">poll_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[5c]">err_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[5d]">recv_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[5e]">recv_raw</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[5f]">recv_udp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[60]">do_connected</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[61]">accept_function</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[62]">do_dns_found</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[63]">event_callback</a> from sockets.o(.text) referenced 2 times from sockets.o(.text)
 <LI><a href="#[64]">lwip_getsockopt_internal</a> from sockets.o(.text) referenced from sockets.o(.text)
 <LI><a href="#[65]">lwip_setsockopt_internal</a> from sockets.o(.text) referenced from sockets.o(.text)
 <LI><a href="#[66]">tcpip_thread</a> from tcpip.o(.text) referenced from tcpip.o(.text)
 <LI><a href="#[67]">pbuf_free_int</a> from tcpip.o(.text) referenced from tcpip.o(.text)
 <LI><a href="#[68]">mem_free</a> from memory.o(.text) referenced from tcpip.o(.text)
 <LI><a href="#[69]">dhcp_recv</a> from dhcp.o(.text) referenced from dhcp.o(.text)
 <LI><a href="#[6a]">dns_recv</a> from dns.o(.text) referenced from dns.o(.text)
 <LI><a href="#[6b]">pbuf_free_ooseq_callback</a> from pbuf.o(.text) referenced from pbuf.o(.text)
 <LI><a href="#[6c]">tcp_accept_null</a> from tcp.o(.text) referenced from tcp.o(.text)
 <LI><a href="#[6d]">tcpip_tcp_timer</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[6e]">ip_reass_timer</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[6f]">arp_timer</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[70]">dhcp_timer_coarse</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[73]">dns_timer</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[74]">ipfrag_free_pbuf_custom</a> from ip_frag.o(.text) referenced from ip_frag.o(.text)
 <LI><a href="#[75]">etharp_output</a> from etharp.o(.text) referenced from ethernetif.o(.text)
 <LI><a href="#[76]">low_level_output</a> from ethernetif.o(.text) referenced from ethernetif.o(.text)
 <LI><a href="#[77]">wlan_11h_is_dfs_master</a> from mlan_11h.o(.text) referenced 2 times from mlan_11h.o(.text)
 <LI><a href="#[78]">wlan_11h_is_master_active_on_dfs_chan</a> from mlan_11h.o(.text) referenced 2 times from mlan_11h.o(.text)
 <LI><a href="#[79]">wlan_11h_is_dfs_slave</a> from mlan_11h.o(.text) referenced 2 times from mlan_11h.o(.text)
 <LI><a href="#[7a]">wlan_11h_is_slave_active_on_dfs_chan</a> from mlan_11h.o(.text) referenced 2 times from mlan_11h.o(.text)
 <LI><a href="#[7b]">wlan_is_intf_active</a> from mlan_11h.o(.text) referenced from mlan_11h.o(.text)
 <LI><a href="#[7c]">wlan_11h_radar_detected_callback</a> from mlan_11h.o(.text) referenced from mlan_11h.o(.text)
 <LI><a href="#[7d]">wlan_flush_data</a> from mlan_11n_rxreorder.o(.text) referenced from mlan_11n_rxreorder.o(.text)
 <LI><a href="#[7e]">wlan_is_station</a> from mlan_11d.o(.text) referenced from mlan_cfp.o(.text)
 <LI><a href="#[7f]">wlan_11d_is_enabled</a> from mlan_11d.o(.text) referenced from mlan_cfp.o(.text)
 <LI><a href="#[80]">wlan_cmd_timeout_func</a> from mlan_cmdevt.o(.text) referenced from mlan_init.o(.text)
 <LI><a href="#[81]">wlan_uap_callback_bss_ioctl_start</a> from mlan_uap_ioctl.o(.text) referenced from mlan_uap_ioctl.o(.text)
 <LI><a href="#[82]">wlan_uap_callback_snmp_mib_11h</a> from mlan_uap_ioctl.o(.text) referenced from mlan_uap_ioctl.o(.text)
 <LI><a href="#[83]">wlan_uap_callback_domain_info</a> from mlan_uap_ioctl.o(.text) referenced from mlan_uap_ioctl.o(.text)
 <LI><a href="#[84]">wlan_uap_callback_11h_channel_check_req</a> from mlan_uap_ioctl.o(.text) referenced from mlan_uap_ioctl.o(.text)
 <LI><a href="#[85]">tcpip_input</a> from tcpip.o(.text) referenced from tcpapp.o(.text)
 <LI><a href="#[86]">ethernetif_init</a> from ethernetif.o(.text) referenced from tcpapp.o(.text)
 <LI><a href="#[87]">tcp_recv_thread</a> from test_tcpip.o(.text) referenced from tcpapp.o(.text)
 <LI><a href="#[88]">dev_monitor_task</a> from debug.o(.text) referenced from monitor.o(.text)
 <LI><a href="#[89]">fputc</a> from usart.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[8a]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[8b]">_snputc</a> from printf8.o(i._snputc) referenced from printf8.o(i.__0snprintf$8)
 <LI><a href="#[8c]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[8d]">woal_open</a> from moal_main.o(.text) referenced 2 times from moal_main.o(.constdata)
 <LI><a href="#[8e]">woal_close</a> from moal_main.o(.text) referenced 2 times from moal_main.o(.constdata)
 <LI><a href="#[8f]">woal_hard_start_xmit</a> from moal_main.o(.text) referenced 2 times from moal_main.o(.constdata)
 <LI><a href="#[90]">woal_set_mac_address</a> from moal_main.o(.text) referenced 2 times from moal_main.o(.constdata)
 <LI><a href="#[91]">woal_set_multicast_list</a> from moal_main.o(.text) referenced from moal_main.o(.constdata)
 <LI><a href="#[92]">woal_uap_set_multicast_list</a> from moal_uap.o(.text) referenced 2 times from moal_main.o(.constdata)
 <LI><a href="#[93]">woal_uap_do_ioctl</a> from moal_uap.o(.text) referenced from moal_main.o(.constdata)
 <LI><a href="#[94]">woal_tx_timeout</a> from moal_main.o(.text) referenced from moal_main.o(.constdata)
 <LI><a href="#[95]">woal_get_stats</a> from moal_main.o(.text) referenced from moal_main.o(.constdata)
 <LI><a href="#[96]">woal_select_queue</a> from moal_main.o(.text) referenced from moal_main.o(.constdata)
 <LI><a href="#[97]">moal_get_fw_data</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[98]">moal_init_fw_complete</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[99]">moal_shutdown_fw_complete</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[9a]">moal_send_packet_complete</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[9b]">moal_recv_packet</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[9c]">moal_recv_event</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[9d]">moal_ioctl_complete</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[9e]">moal_alloc_mlan_buffer</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[9f]">moal_free_mlan_buffer</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[a0]">moal_write_reg</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[a1]">moal_read_reg</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[a2]">moal_write_data_sync</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[a3]">moal_read_data_sync</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[a4]">moal_malloc</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[a5]">moal_mfree</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[a6]">moal_memset</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[a7]">moal_memcpy</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[a8]">moal_memmove</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[a9]">moal_memcmp</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[aa]">moal_udelay</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[ab]">moal_get_system_time</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[ac]">moal_init_timer</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[ad]">moal_free_timer</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[ae]">moal_start_timer</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[af]">moal_stop_timer</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[b0]">moal_init_lock</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[b1]">moal_free_lock</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[b2]">moal_spin_lock</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[b3]">moal_spin_unlock</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[b4]">moal_print</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[b5]">moal_print_netintf</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[b6]">moal_assert</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[b7]">woal_cfg80211_change_virtual_intf</a> from moal_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[b8]">woal_cfg80211_add_key</a> from moal_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[b9]">woal_cfg80211_del_key</a> from moal_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[ba]">woal_cfg80211_set_default_key</a> from moal_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[bb]">woal_cfg80211_get_station</a> from moal_sta_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[bc]">woal_cfg80211_dump_station</a> from moal_sta_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[bd]">woal_cfg80211_scan</a> from moal_sta_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[be]">woal_cfg80211_connect</a> from moal_sta_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[bf]">woal_cfg80211_disconnect</a> from moal_sta_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[c0]">woal_cfg80211_join_ibss</a> from moal_sta_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[c1]">woal_cfg80211_leave_ibss</a> from moal_sta_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[c2]">woal_cfg80211_set_wiphy_params</a> from moal_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[c3]">woal_cfg80211_set_tx_power</a> from moal_sta_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[c4]">woal_cfg80211_mgmt_tx</a> from moal_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[c5]">woal_cfg80211_set_power_mgmt</a> from moal_sta_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[c6]">woal_cfg80211_set_cqm_rssi_config</a> from moal_sta_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[c7]">woal_cfg80211_mgmt_frame_register</a> from moal_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[c8]">woal_cfg80211_set_channel</a> from moal_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[b7]">woal_cfg80211_change_virtual_intf</a> from moal_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[b8]">woal_cfg80211_add_key</a> from moal_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[b9]">woal_cfg80211_del_key</a> from moal_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[ba]">woal_cfg80211_set_default_key</a> from moal_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[c9]">woal_cfg80211_add_beacon</a> from moal_uap_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[ca]">woal_cfg80211_set_beacon</a> from moal_uap_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[cb]">woal_cfg80211_del_beacon</a> from moal_uap_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[cc]">woal_uap_cfg80211_get_station</a> from moal_uap_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[cd]">woal_uap_cfg80211_scan</a> from moal_uap_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[ce]">woal_uap_cfg80211_connect</a> from moal_uap_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[cf]">woal_uap_cfg80211_disconnect</a> from moal_uap_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[c2]">woal_cfg80211_set_wiphy_params</a> from moal_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[c3]">woal_cfg80211_set_tx_power</a> from moal_sta_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[c4]">woal_cfg80211_mgmt_tx</a> from moal_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[c7]">woal_cfg80211_mgmt_frame_register</a> from moal_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[c8]">woal_cfg80211_set_channel</a> from moal_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[d0]">wlan_ops_sta_init_cmd</a> from mlan_sta_cmd.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[d1]">wlan_ops_sta_ioctl</a> from mlan_sta_ioctl.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[d2]">wlan_ops_sta_prepare_cmd</a> from mlan_sta_cmd.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[d4]">wlan_ops_sta_process_rx_packet</a> from mlan_sta_rx.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[d5]">wlan_ops_sta_process_event</a> from mlan_sta_event.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[d6]">wlan_ops_sta_process_txpd</a> from mlan_sta_tx.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[d7]">wlan_ops_uap_init_cmd</a> from mlan_uap_cmdevent.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[d8]">wlan_ops_uap_ioctl</a> from mlan_uap_ioctl.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[d9]">wlan_ops_uap_prepare_cmd</a> from mlan_uap_cmdevent.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[da]">wlan_ops_uap_process_cmdresp</a> from mlan_uap_cmdevent.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[db]">wlan_ops_uap_process_rx_packet</a> from mlan_uap_txrx.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[dc]">wlan_ops_uap_process_event</a> from mlan_uap_cmdevent.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[dd]">wlan_ops_uap_process_txpd</a> from mlan_uap_txrx.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[193]">OS_TaskIdle</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[18f]">OS_TaskStat</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[2f4]">tcp_recv_null</a> from tcp.o(.text) referenced from tcp.o(.text)
 <LI><a href="#[36c]">woal_reassoc_timer_func</a> from moal_main.o(.text) referenced from moal_main.o(.text)
 <LI><a href="#[3ae]">woal_main_work_queue</a> from moal_main.o(.text) referenced from moal_main.o(.text)
 <LI><a href="#[3aa]">woal_reassociation_thread</a> from moal_main.o(.text) referenced from moal_main.o(.text)
 <LI><a href="#[693]">scan_result_fun</a> from test_wifi.o(.text) referenced from test_wifi.o(.text)
 <LI><a href="#[6a9]">main_thread</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[6bc]">tcp_send_thread</a> from test_tcpip.o(.text) referenced from test_tcpip.o(.text)
 <LI><a href="#[6be]">tcp_accept_task</a> from test_tcpip.o(.text) referenced from test_tcpip.o(.text)
 <LI><a href="#[6c5]">tcpip_init_end</a> from tcpapp.o(.text) referenced from tcpapp.o(.text)
 <LI><a href="#[6cc]">wifi_link_page_assemble</a> from webserver.o(.text) referenced from webserver.o(.text)
 <LI><a href="#[6ce]">ip_addr_page_assemble</a> from webserver.o(.text) referenced from webserver.o(.text)
 <LI><a href="#[6d3]">tcp_client_page_assemble</a> from webserver.o(.text) referenced from webserver.o(.text)
 <LI><a href="#[6cf]">reset_page_assemble</a> from webserver.o(.text) referenced from webserver.o(.text)
 <LI><a href="#[6d2]">io_page_assemble</a> from webserver.o(.text) referenced from webserver.o(.text)
 <LI><a href="#[6d1]">login_page_assemble</a> from webserver.o(.text) referenced from webserver.o(.text)
 <LI><a href="#[6e9]">web_server_thread</a> from webserver.o(.text) referenced from webserver.o(.text)
 <LI><a href="#[6df]">sub_page_send</a> from web.o(.text) referenced from web.o(.text)
 <LI><a href="#[6de]">index_page_send</a> from web.o(.text) referenced from web.o(.text)
 <LI><a href="#[6e0]">logo_gif_send</a> from web.o(.text) referenced from web.o(.text)
 <LI><a href="#[6d6]">send_post_status</a> from web.o(.text) referenced from web.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[725]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[de]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[713]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[726]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[e0]"></a>DMA_DeInit</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[e3]"></a>DMA_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
</UL>

<P><STRONG><a name="[727]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>DMA_Cmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = DMA_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
</UL>

<P><STRONG><a name="[e5]"></a>DMA_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = DMA_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[728]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[729]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>DMA_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
</UL>

<P><STRONG><a name="[72a]"></a>DMA_GetITStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[72b]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>GPIO_DeInit</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[e8]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[169]"></a>GPIO_Init</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_gpio_init
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_GPIO_Config
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_GPIO_Config
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[72c]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[64d]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_Receive
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11Read
</UL>

<P><STRONG><a name="[72d]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[72e]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[72f]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[6f6]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11Read
</UL>

<P><STRONG><a name="[6f5]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11Read
</UL>

<P><STRONG><a name="[730]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[731]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[732]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[733]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[734]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[ea]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[eb]"></a>RCC_DeInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[ec]"></a>RCC_HSEConfig</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[ee]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[ed]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[ef]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[735]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[736]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[737]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>RCC_HCLKConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[f3]"></a>RCC_PCLK1Config</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[f4]"></a>RCC_PCLK2Config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[f5]"></a>RCC_ITConfig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[738]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[f7]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = RCC_LSEConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_gpio_init
</UL>

<P><STRONG><a name="[739]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[73a]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[f9]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = RCC_AHBPeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[fa]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = RCC_APB2PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_GPIO_Config
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_GPIO_Config
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[fb]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_init
</UL>

<P><STRONG><a name="[e7]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[fc]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[73b]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[73c]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[73d]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>RCC_ClearFlag</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[73e]"></a>RCC_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[73f]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>SDIO_DeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[fe]"></a>SDIO_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SDIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[740]"></a>SDIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[ff]"></a>SDIO_SetPowerState</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = SDIO_SetPowerState
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[741]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>SDIO_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SDIO_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_start_send_data
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sdio_int
</UL>

<P><STRONG><a name="[150]"></a>SDIO_DMACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_start_send_data
</UL>

<P><STRONG><a name="[101]"></a>SDIO_SendCommand</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_if_cond
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_go_idle
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_relative_addr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct_host
</UL>

<P><STRONG><a name="[742]"></a>SDIO_CmdStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp5Error
</UL>

<P><STRONG><a name="[132]"></a>SDIO_GetResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp5Error
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
</UL>

<P><STRONG><a name="[102]"></a>SDIO_DataConfig</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SDIO_DataConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
</UL>

<P><STRONG><a name="[743]"></a>SDIO_DataStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[744]"></a>SDIO_GetDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[745]"></a>SDIO_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[746]"></a>SDIO_WriteData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[747]"></a>SDIO_GetFIFOCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[748]"></a>SDIO_StartSDIOReadWait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[749]"></a>SDIO_StopSDIOReadWait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>SDIO_SetSDIOReadWaitMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[149]"></a>SDIO_SetSDIOOperation</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[74a]"></a>SDIO_SendSDIOSuspendCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[74b]"></a>SDIO_CommandCompletionCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[74c]"></a>SDIO_CEATAITCmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[74d]"></a>SDIO_SendCEATACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_go_idle
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct_host
</UL>

<P><STRONG><a name="[130]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp5Error
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_start_send_data
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_go_idle
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct_host
</UL>

<P><STRONG><a name="[74e]"></a>SDIO_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[74f]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[104]"></a>SPI_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_init
</UL>

<P><STRONG><a name="[105]"></a>I2S_Init</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[750]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[751]"></a>I2S_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>SPI_Cmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_init
</UL>

<P><STRONG><a name="[108]"></a>I2S_Cmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[109]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[10a]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[170]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_r
</UL>

<P><STRONG><a name="[16f]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_r
</UL>

<P><STRONG><a name="[10b]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[10c]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[10d]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[10e]"></a>SPI_TransmitCRC</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[10f]"></a>SPI_CalculateCRC</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[752]"></a>SPI_GetCRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[753]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[16e]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_r
</UL>

<P><STRONG><a name="[754]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[755]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>USART_DeInit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[112]"></a>USART_Init</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[756]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>USART_ClockInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[757]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>USART_Cmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = USART_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[115]"></a>USART_ITConfig</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buf_uart1
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send_next
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[116]"></a>USART_DMACmd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[117]"></a>USART_SetAddress</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[118]"></a>USART_WakeUpConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[119]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[11a]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[11b]"></a>USART_LINCmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[758]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[759]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>USART_SendBreak</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[11d]"></a>USART_SetGuardTime</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[11e]"></a>USART_SetPrescaler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[11f]"></a>USART_SmartCardCmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[120]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[121]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[122]"></a>USART_IrDAConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[123]"></a>USART_IrDACmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[75a]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send
</UL>

<P><STRONG><a name="[75b]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[75c]"></a>SystemInit_ExtMemCtl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[167]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_systick
</UL>

<P><STRONG><a name="[125]"></a>NVIC_Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[75d]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[127]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, system_stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[128]"></a>PWR_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[653]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_gpio_init
</UL>

<P><STRONG><a name="[75e]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[75f]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[760]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[761]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>PWR_ClearFlag</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[12c]"></a>enable_sdio_int</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = enable_sdio_int &rArr; SDIO_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_claim_irq
</UL>

<P><STRONG><a name="[133]"></a>mmc_io_rw_direct_host</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp5Error
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>

<P><STRONG><a name="[137]"></a>mmc_io_rw_direct</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct_host
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_reset
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_wide
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_switch_hs
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_release_irq
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_claim_irq
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_disable_func
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_func
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_block_size
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_f0_writeb
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb_readb
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_f0_readb
</UL>

<P><STRONG><a name="[138]"></a>mmc_sdio_switch_hs</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = mmc_sdio_switch_hs &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[13b]"></a>sdio_read_common_cis</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
</UL>

<P><STRONG><a name="[13c]"></a>sdio_read_cccr</STRONG> (Thumb, 520 bytes, Stack size 32 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = sdio_read_cccr &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[13e]"></a>SD_SelectDeselect</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = SD_SelectDeselect &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[13f]"></a>mmc_send_relative_addr</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = mmc_send_relative_addr &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[141]"></a>mmc_send_io_op_cond</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = mmc_send_io_op_cond &rArr; sleep &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[143]"></a>mmc_go_idle</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = mmc_go_idle &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[144]"></a>SD_Init</STRONG> (Thumb, 558 bytes, Stack size 64 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = SD_Init &rArr; sdio_read_cis &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetSDIOOperation
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetSDIOReadWaitMode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_reset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_go_idle
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_relative_addr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_switch_hs
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[14d]"></a>mmc_send_if_cond</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp5Error
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[14e]"></a>dma_start_send_data</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = dma_start_send_data &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wait_event
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
</UL>

<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = SDIO_IRQHandler &rArr; woal_sdio_interrupt &rArr; schedule_work &rArr; wake_up &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_interrupt
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[156]"></a>mmc_io_rw_extended</STRONG> (Thumb, 840 bytes, Stack size 144 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = mmc_io_rw_extended &rArr; dma_start_send_data &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp5Error
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wait_event
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_start_send_data
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
</UL>

<P><STRONG><a name="[158]"></a>sdio_enable_wide</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[159]"></a>uart1_init</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = uart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[762]"></a>uart3_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>fputc</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[15b]"></a>uart3_send_next</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = uart3_send_next &rArr; wake_up &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send
</UL>

<P><STRONG><a name="[15c]"></a>uart3_send</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send_next
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[15d]"></a>uart1_send_next</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = uart1_send_next &rArr; wake_up &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send
</UL>

<P><STRONG><a name="[15e]"></a>uart1_send</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send_next
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test_pkg
</UL>

<P><STRONG><a name="[160]"></a>uart0_read_data</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = uart0_read_data &rArr; wake_up &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[161]"></a>clear_buf_uart1</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = clear_buf_uart1 &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; uart1_send_next &rArr; wake_up &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_interrupt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_interrupt
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_read_data
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = USART3_IRQHandler &rArr; uart3_send_next &rArr; wake_up &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_interrupt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_interrupt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[164]"></a>_mem_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, driver_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _mem_init &rArr; sys_meminit &rArr; mutex_init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_meminit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[763]"></a>init_rng</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, driver_misc.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>init_systick</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, driver_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_misc_init
</UL>

<P><STRONG><a name="[168]"></a>get_random</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, driver_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = get_random &rArr; os_time_get &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
</UL>

<P><STRONG><a name="[147]"></a>gpio_cfg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, driver_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[16a]"></a>driver_gpio_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = driver_gpio_init &rArr; RCC_APB2PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_misc_init
</UL>

<P><STRONG><a name="[16b]"></a>check_rst_stat</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, driver_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[16c]"></a>driver_misc_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, driver_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = driver_misc_init &rArr; driver_gpio_init &rArr; RCC_APB2PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_systick
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[16d]"></a>spi_r</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_r
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
</UL>

<P><STRONG><a name="[172]"></a>spi_w</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_w
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_write
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>

<P><STRONG><a name="[171]"></a>spi_write</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = spi_write &rArr; spi_w
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_w
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_erase
</UL>

<P><STRONG><a name="[173]"></a>spi_write_then_write</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = spi_write_then_write &rArr; spi_w
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_w
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_write
</UL>

<P><STRONG><a name="[174]"></a>spi_write_then_read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spi_write_then_read &rArr; spi_r
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_w
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_r
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_read_id
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_flash_data
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_read
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enable
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sr
</UL>

<P><STRONG><a name="[178]"></a>m25p80_erase</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = m25p80_erase &rArr; wait_till_ready &rArr; read_sr &rArr; spi_write_then_read &rArr; spi_r
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p_addr2cmd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_till_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_write_firmware_to_spi_flash
</UL>

<P><STRONG><a name="[17b]"></a>m25p80_read</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = m25p80_read &rArr; wait_till_ready &rArr; read_sr &rArr; spi_write_then_read &rArr; spi_r
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p_addr2cmd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_till_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_firmware
</UL>

<P><STRONG><a name="[17c]"></a>cmp_flash_data</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, w25p80.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p_addr2cmd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_till_ready
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[17e]"></a>m25p80_write</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = m25p80_write &rArr; wait_till_ready &rArr; read_sr &rArr; spi_write_then_read &rArr; spi_r
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_write
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p_addr2cmd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_till_ready
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_write_firmware_to_spi_flash
</UL>

<P><STRONG><a name="[17f]"></a>m25p80_read_id</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, w25p80.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_till_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_init
</UL>

<P><STRONG><a name="[180]"></a>read_firmware</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = read_firmware &rArr; m25p80_read &rArr; wait_till_ready &rArr; read_sr &rArr; spi_write_then_read &rArr; spi_r
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_read
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_get_fw_data
</UL>

<P><STRONG><a name="[181]"></a>test_write_firmware_to_spi_flash</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = test_write_firmware_to_spi_flash &rArr; m25p80_write &rArr; wait_till_ready &rArr; read_sr &rArr; spi_write_then_read &rArr; spi_r
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_write
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_erase
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[182]"></a>m25p80_init</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, w25p80.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_read_id
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, w25p80.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[185]"></a>OS_StrLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
</UL>

<P><STRONG><a name="[184]"></a>OSEventNameGet</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[186]"></a>OSEventNameSet</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSEventNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
</UL>

<P><STRONG><a name="[18c]"></a>OS_EventTaskRemoveMulti</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[187]"></a>OS_Sched</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[18b]"></a>OS_EventTaskWaitMulti</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[18a]"></a>OSEventPendMulti</STRONG> (Thumb, 448 bytes, Stack size 56 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWaitMulti
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>

<P><STRONG><a name="[18d]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[18f]"></a>OS_TaskStat</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OSTaskStatHook &rArr; App_TaskStatHook &rArr; test_udp_link &rArr; udp_link &rArr; close_socket &rArr; lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[193]"></a>OS_TaskIdle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[197]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[195]"></a>OSInit</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[764]"></a>OSIntEnter</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>OSIntExit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_interrupt
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[19f]"></a>OSSchedLock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[1a0]"></a>OSSchedUnlock</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_workqueue
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[1a1]"></a>OSStart</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a3]"></a>OSStatInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[1a4]"></a>OSTimeTick</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[765]"></a>OSVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1a7]"></a>OS_EventTaskRemove</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[1a6]"></a>OS_EventTaskRdy</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
</UL>

<P><STRONG><a name="[1bd]"></a>OS_EventTaskWait</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[1b9]"></a>OS_EventWaitListInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[1d6]"></a>OS_MemCopy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[1a8]"></a>OS_TCBInit</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[1ab]"></a>OSFlagAccept</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1ac]"></a>OSFlagCreate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1ae]"></a>OS_FlagUnlink</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_flag.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[1af]"></a>OSFlagDel</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1b0]"></a>OSFlagNameGet</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[1b1]"></a>OSFlagNameSet</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1b2]"></a>OSFlagPend</STRONG> (Thumb, 358 bytes, Stack size 88 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1b4]"></a>OSFlagPendGetFlagsRdy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1b5]"></a>OSFlagPost</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1b6]"></a>OSFlagQuery</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[198]"></a>OS_FlagInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1b7]"></a>OSQAccept</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSQAccept
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[1b8]"></a>OSQCreate</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[1ba]"></a>OSQDel</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = OSQDel &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[1bb]"></a>OSQFlush</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSQFlush
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[1bc]"></a>OSQPend</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSQPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[1be]"></a>OSQPendAbort</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1bf]"></a>OSQPost</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>

<P><STRONG><a name="[1c0]"></a>OSQPostFront</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1c1]"></a>OSQPostOpt</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1c2]"></a>OSQQuery</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[199]"></a>OS_QInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1c3]"></a>OSSemAccept</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemAccept
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>

<P><STRONG><a name="[1c4]"></a>OSSemCreate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>

<P><STRONG><a name="[1c5]"></a>OSSemDel</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = OSSemDel &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_event
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_destory
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[1c6]"></a>OSSemPend</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event
</UL>

<P><STRONG><a name="[1c7]"></a>OSSemPendAbort</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1c8]"></a>OSSemPost</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[1c9]"></a>OSSemQuery</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1ca]"></a>OSSemSet</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wait_event
</UL>

<P><STRONG><a name="[1cb]"></a>OSTaskChangePrio</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1cc]"></a>OSTaskCreate</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1ce]"></a>OS_TaskStkClr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[19a]"></a>OSTaskCreateExt</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1cf]"></a>OSTaskDel</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_exit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[1d2]"></a>OSTaskDelReq</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1d3]"></a>OSTaskNameGet</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[19b]"></a>OSTaskNameSet</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1d4]"></a>OSTaskResume</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[18e]"></a>OSTaskStkChk</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[191]"></a>OSTaskSuspend</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[1d5]"></a>OSTaskQuery</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemCopy
</UL>

<P><STRONG><a name="[1d7]"></a>OSTaskRegGet</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1d8]"></a>OSTaskRegSet</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[4a]"></a>OS_TaskReturn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(.text)
</UL>
<P><STRONG><a name="[190]"></a>OSTimeDly</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[1da]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
</UL>

<P><STRONG><a name="[1db]"></a>OSTimeDlyResume</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1dc]"></a>OSTimeGet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
</UL>

<P><STRONG><a name="[1dd]"></a>OSTimeSet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1de]"></a>OSDumpTmr</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSDumpTmr &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
</UL>

<P><STRONG><a name="[1df]"></a>OSTmrCreate</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTmrCreate &rArr; OSDumpTmr &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDumpTmr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_setup
</UL>

<P><STRONG><a name="[1e0]"></a>OSTmrDel</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTmrDel &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Free
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_free
</UL>

<P><STRONG><a name="[1e3]"></a>OSTmrNameGet</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[1e4]"></a>OSTmrRemainGet</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[1e5]"></a>OSTmrStateGet</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[1e6]"></a>OSTmrStart</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTmrStart &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_timer
</UL>

<P><STRONG><a name="[1e8]"></a>OSTmrStop</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTmrStop &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_timer
</UL>

<P><STRONG><a name="[1e9]"></a>OSTmrSignal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[19c]"></a>OSTmr_Init</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[196]"></a>OSInitHookBegin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[19d]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1aa]"></a>OSTaskCreateHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[1d1]"></a>OSTaskDelHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskDelHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[766]"></a>App_TaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[1d9]"></a>OSTaskReturnHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskReturnHook
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[192]"></a>OSTaskStatHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = OSTaskStatHook &rArr; App_TaskStatHook &rArr; test_udp_link &rArr; udp_link &rArr; close_socket &rArr; lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[1cd]"></a>OSTaskStkInit</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[4b]"></a>OSTaskSwHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[1a9]"></a>OSTCBInitHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[1a5]"></a>OSTimeTickHook</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[767]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ClearFlag
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PVDLevelConfig
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemLPConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IrDACmd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IrDAConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_HalfDuplexCmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SmartCardNACKCmd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SmartCardCmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetPrescaler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetGuardTime
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendBreak
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LINCmd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LINBreakDetectLengthConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiverWakeUpCmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WakeUpConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetAddress
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_BiDirectionalLineConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CalculateCRC
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransmitCRC
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataSizeConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSOutputCmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NSSInternalSoftwareConfig
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ITConfig
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ITConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AdjustHSICalibrationValue
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeHeadList
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertTailList
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_thread
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_set
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_spin_lock
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task_stat_data
</UL>

<P><STRONG><a name="[e2]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ClearFlag
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PVDLevelConfig
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemLPConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IrDACmd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IrDAConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_HalfDuplexCmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SmartCardNACKCmd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SmartCardCmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetPrescaler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetGuardTime
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendBreak
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LINCmd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LINBreakDetectLengthConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiverWakeUpCmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WakeUpConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetAddress
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_BiDirectionalLineConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CalculateCRC
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransmitCRC
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataSizeConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSOutputCmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NSSInternalSoftwareConfig
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ITConfig
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ITConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AdjustHSICalibrationValue
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeHeadList
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertTailList
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_thread
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub_return
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add_return
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_set
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_start_send_data
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_spin_unlock
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task_stat_data
</UL>

<P><STRONG><a name="[1a2]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[189]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[19e]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f2]"></a>atomic_test_set</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1f3]"></a>atomic_set</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = atomic_set
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_recycle_check
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__skb_clone
</UL>

<P><STRONG><a name="[1f4]"></a>atomic_read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = atomic_read
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hard_start_xmit
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_moal_handle
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_ioctl_complete
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_recycle_check
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
</UL>

<P><STRONG><a name="[1f5]"></a>atomic_add</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = atomic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_host_packet
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_buffer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hard_start_xmit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_init_lock
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_malloc
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_clone
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__skb_clone
</UL>

<P><STRONG><a name="[1f6]"></a>atomic_sub</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = atomic_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_mlan_buffer
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_send_packet_complete
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_ioctl_complete
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_free_lock
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_mfree
</UL>

<P><STRONG><a name="[1f7]"></a>atomic_add_return</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
</UL>

<P><STRONG><a name="[1f8]"></a>atomic_sub_return</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = atomic_sub_return
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_skb
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_send_packet_complete
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfree_skb
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfree_skb
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_data
</UL>

<P><STRONG><a name="[146]"></a>mutex_init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = mutex_init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_meminit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_module
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lwip
</UL>

<P><STRONG><a name="[134]"></a>mutex_lock</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = mutex_lock &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct_host
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_check
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp_rcv
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_dhcp_server
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_udhcpd
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_do_scan
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_userscan
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_scan
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_data_send
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_add_membership
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_link
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_data_send
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create_server
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_host_by_name
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_thread
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_thread
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_server_init
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_send
</UL>

<P><STRONG><a name="[136]"></a>mutex_unlock</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct_host
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_check
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp_rcv
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_dhcp_server
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_udhcpd
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_do_scan
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_userscan
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_scan
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_scan
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_fw_dpc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_data_send
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_add_membership
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_link
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_data_send
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create_server
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_host_by_name
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_thread
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_thread
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_server_init
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_send
</UL>

<P><STRONG><a name="[1f9]"></a>mutex_destory</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1fa]"></a>thread_create</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = thread_create &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_workqueue
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_server_init
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_server
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_full_speed_send
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_monitor
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lwip
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fc]"></a>thread_exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = thread_exit &rArr; OSTaskDel &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_workqueue
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_task
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_thread
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_close_tcp_server
</UL>

<P><STRONG><a name="[3ab]"></a>thread_myself</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_thread
</UL>

<P><STRONG><a name="[200]"></a>initList</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_workqueue
</UL>

<P><STRONG><a name="[1fd]"></a>insertTailList</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = insertTailList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
</UL>

<P><STRONG><a name="[1fe]"></a>removeHeadList</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = removeHeadList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_thread
</UL>

<P><STRONG><a name="[768]"></a>getListSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[769]"></a>delEntryList</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>create_workqueue</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = create_workqueue &rArr; thread_create &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_event
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initList
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer_tasklet
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[202]"></a>destroy_workqueue</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = destroy_workqueue &rArr; thread_exit &rArr; OSTaskDel &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_event
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_exit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_terminate_workqueue
</UL>

<P><STRONG><a name="[203]"></a>init_timer_tasklet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = init_timer_tasklet &rArr; create_workqueue &rArr; thread_create &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_workqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_work_thread
</UL>

<P><STRONG><a name="[208]"></a>init_work</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_setup
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[204]"></a>schedule_work</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = schedule_work &rArr; wake_up &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertTailList
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timer_tasklet
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_interrupt
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_host_packet
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hard_start_xmit
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_moal_debug_info
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[205]"></a>schedule_timer_tasklet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = schedule_timer_tasklet &rArr; schedule_work &rArr; wake_up &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tasklet_callback
</UL>

<P><STRONG><a name="[1ea]"></a>timer_tasklet_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = timer_tasklet_callback &rArr; schedule_timer_tasklet &rArr; schedule_work &rArr; wake_up &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timer_tasklet
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[206]"></a>init_work_thread</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = init_work_thread &rArr; init_timer_tasklet &rArr; create_workqueue &rArr; thread_create &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer_tasklet
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[12e]"></a>os_time_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = os_time_get &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp5Error
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeHeadList
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertTailList
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_thread
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_destory
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDumpTmr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_write_firmware_to_spi_flash
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_firmware
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_write
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_flash_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sr
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_till_ready
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rst_stat
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_random
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wait_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_wide
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_start_send_data
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_if_cond
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_relative_addr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_switch_hs
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct_host
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_check
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_free
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_timer
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_timer
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_pending
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_setup
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp_rcv
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_dhcp_server
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_dhcp_server
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_udhcpd
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_set_bus_clock
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_claim_irq
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_disable_func
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_func
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_scan_done
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_rts
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_retry
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_frag
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_unregister
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_free
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_netdev
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gettimeofday
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_disconnect_to_system
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_select_queue
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_close
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw_dpc
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_moal_handle
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ip
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_cmd_node
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_ibss_joined
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_connect_result
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_cqm_rssi_notify
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_spin_lock
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_ready_on_channel
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_remain_on_channel_expired
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_michael_mic_failure
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_page
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_bits
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_page
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_under_panic
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_over_panic
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_stats
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_scan_req
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_sta_list
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_leave_adhoc
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_join_adhoc
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_cfg
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_channel
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_mode
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disconnect
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_link
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_unlink
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_link
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_tcpip_info
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_dbg
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_sys_info
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_set_wapi_ie
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_gen_ie
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_gen_ie_helper
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wapi_ie
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wpa_ie_helper
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_decode_rx_packet
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_body_tag
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_update_erea
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_socket_stat_data
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task_stat_data
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sys_stat_data
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test_pkg
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_update_data_finish
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_update_data
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_head_tag
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_server_thread
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_update_timer
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_post
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_get
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_tcp_client_post
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_io_post
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_reset_post
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wifilink_post
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_data_send
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_add_membership
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netif_init
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_end
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_link
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_data_send
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create_server
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_link
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_sm
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_thread
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_task
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_thread
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_server_init
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_server
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_server
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sendto
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_send
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_full_speed_send_stop
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_full_speed_send
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dns
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_auto_get_ip
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_loopback_test
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_save_disable
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_save_enable
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_get_station_list
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stop_ap
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_get_stats
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_leave_adhoc
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_join_adhoc
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_disconnect
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_create_ap
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_connect
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scan
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_scan_result
</UL>

<P><STRONG><a name="[207]"></a>timer_setup</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = timer_setup &rArr; OSTmrCreate &rArr; OSDumpTmr &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_work
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_init_timer
</UL>

<P><STRONG><a name="[209]"></a>timer_pending</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = timer_pending &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_timer
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_timer
</UL>

<P><STRONG><a name="[20a]"></a>mod_timer</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = mod_timer &rArr; OSTmrStart &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_pending
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_mod_timer
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
</UL>

<P><STRONG><a name="[20b]"></a>add_timer</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[20c]"></a>del_timer</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = del_timer &rArr; OSTmrStop &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_pending
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_timer
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_timer
</UL>

<P><STRONG><a name="[20d]"></a>timer_free</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = timer_free &rArr; OSTmrDel &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_free_timer
</UL>

<P><STRONG><a name="[142]"></a>sleep</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = sleep &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_thread
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_till_ready
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_soft_reset
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_reg_dbg
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_fw_dpc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_udelay
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_server_thread
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wifilink_post
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_thread
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_auto_get_ip
</UL>

<P><STRONG><a name="[145]"></a>init_event</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wait.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = init_event &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_workqueue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[20e]"></a>wait_event</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wait.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = wait_event &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw_dpc
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[151]"></a>wait_event_timeout</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, wait.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = wait_event_timeout &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_thread
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_start_send_data
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
</UL>

<P><STRONG><a name="[154]"></a>wake_up</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wait.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = wake_up &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_read_data
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send_next
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send_next
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_cac_block
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassoc_timer_func
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_ioctl_complete
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_shutdown_fw_complete
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_init_fw_complete
</UL>

<P><STRONG><a name="[201]"></a>del_event</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wait.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = del_event &rArr; OSSemDel &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_workqueue
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_workqueue
</UL>

<P><STRONG><a name="[14f]"></a>clear_wait_event</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, wait.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = clear_wait_event &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_start_send_data
</UL>

<P><STRONG><a name="[20f]"></a>mem_slide_check</STRONG> (Thumb, 1644 bytes, Stack size 80 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_check
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[165]"></a>sys_meminit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = sys_meminit &rArr; mutex_init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_init
</UL>

<P><STRONG><a name="[68]"></a>mem_free</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_workqueue
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_workqueue
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_flash_data
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_cleanup
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callbackmsg_delete
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_inform
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNAK
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_dhcp_packet
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_dhcp_server
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_stop
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_scan_done
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_sleeppd
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_qos_cfg
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_band
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_type
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rssi_threshold
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rssi_low_threshold
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_band
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_bgscan
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_time
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_userscan
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_enable_wep_key
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_wpa_enable
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_encrypt_mode
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_auth_mode
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_wpa_enable
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_encrypt_mode
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_auth_mode
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_find_best_network
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_change_adhoc_chan
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_scan
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_scan_table
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_signal_info
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_11h_channel_check_ioctl
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_deep_sleep
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_deep_sleep
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_pm_info
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_tx_bf_cfg
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_wapi_enable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_soft_reset
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_hs_params
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_custom_ie_ioctl
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hostcmd_ioctl
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_data_rate
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_region_code
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_power_mgmt
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_tx_power
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_gen_ie
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_start
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rf_channel
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_sys_config
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_rts
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_retry
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_frag
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reg_rx_mgmt_ind
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_role_cfg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_change_virtual_intf
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_key
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_custom_ie
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_probe
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_set_multicast_list
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_set_mac_address
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_get_fw_info
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_uap_cfg80211
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_sta_cfg80211
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_disconnect
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_uap_init_wiphy
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_sta_init_wiphy
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_scan
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_mlan_buffer
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_buffer
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_process_tcp_ack
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_check_tcp_fin
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_priv
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_interface
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_mode
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_moal_handle
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_update_drv_tbl
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_stats
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_version
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_ap_cfg
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_bss_param
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_key_ioctl
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_sta_list_ioctl
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_cfg_ioctl
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_power_mode_ioctl
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_radio_ctl
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sta_deauth_ioctl
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_antenna_cfg
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_txdatapause
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_deep_sleep
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_reject
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_param
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_flag_ioctl
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_enable_wapi
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_tx_rate_cfg
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_snmp_mib
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_aggr_priotbl
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_cfg80211_get_station
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_put_bss
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_passphrase
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_ewpa_mode
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station_info
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_domain_info_cmd_fw
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc_ies_cfg
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_ioctl_complete
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_free_lock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_free_timer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_mfree
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfree_skb
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_page
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_data
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_cfg
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_scan_req
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_sta_list
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_cfg
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_set_wapi_ie
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_gen_ie_helper
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wapi_ie
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wpa_ie_helper
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_decode_rx_packet
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_sys_monitor
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_socket_stat_data
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task_stat_data
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sys_stat_data
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test_pkg
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[76a]"></a>get_mem_size</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, memory.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>mem_check</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, memory.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[213]"></a>mem_trim</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = mem_trim &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[13a]"></a>mem_malloc_ex</STRONG> (Thumb, 576 bytes, Stack size 48 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_flash_data
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callbackmsg_new
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_untimeout
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeout
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp_rcv
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_custom_ie_ioctl
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_custom_ie
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_buffer
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_process_tcp_ack
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_update_drv_tbl
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attach_option
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_ap_cfg
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_init_lock
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_init_timer
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_malloc
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_page
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_sys_monitor
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_socket_stat_data
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task_stat_data
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sys_stat_data
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test_pkg
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_thread
</UL>

<P><STRONG><a name="[1fb]"></a>mem_calloc_ex</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_workqueue
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_inform
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNAK
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_probe
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_uap_cfg80211
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_sta_cfg80211
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_adapter
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_priv
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_inform_bss
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_clone
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_cfg
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_scan_req
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_sta_list
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_cfg
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_set_wapi_ie
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_gen_ie_helper
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wapi_ie
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wpa_ie_helper
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_decode_rx_packet
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_get_station_list
</UL>

<P><STRONG><a name="[76b]"></a>mem_get_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, memory.o(.text), UNUSED)

<P><STRONG><a name="[76c]"></a>mem_get_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, memory.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[21c]"></a>netconn_delete</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[21e]"></a>netconn_getaddr</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[21f]"></a>netconn_bind</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = netconn_bind &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[220]"></a>netconn_connect</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = netconn_connect &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[221]"></a>netconn_disconnect</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = netconn_disconnect &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[222]"></a>netconn_listen_with_backlog</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = netconn_listen_with_backlog &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</UL>

<P><STRONG><a name="[223]"></a>netconn_accept</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = netconn_accept &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[226]"></a>netconn_recv_tcp_pbuf</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = netconn_recv_tcp_pbuf &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[227]"></a>netconn_recv</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[228]"></a>netconn_recved</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = netconn_recved &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[229]"></a>netconn_send</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = netconn_send &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_sendto
</UL>

<P><STRONG><a name="[22a]"></a>netconn_sendto</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
</UL>

<P><STRONG><a name="[22b]"></a>netconn_write_partly</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = netconn_write_partly &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[22d]"></a>netconn_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>

<P><STRONG><a name="[22e]"></a>netconn_shutdown</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
</UL>

<P><STRONG><a name="[22f]"></a>netconn_join_leave_group</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[230]"></a>netconn_gethostbyname</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_host_by_name
</UL>

<P><STRONG><a name="[21d]"></a>netconn_free</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = netconn_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_set_invalid
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[216]"></a>netconn_alloc</STRONG> (Thumb, 444 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = netconn_alloc &rArr; sys_mbox_new &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[4d]"></a>do_newconn</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = do_newconn &rArr; pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>do_delconn</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = do_delconn &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>do_bind</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = do_bind &rArr; tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>do_connect</STRONG> (Thumb, 464 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = do_connect &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>do_disconnect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = do_disconnect &rArr; sys_sem_signal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>do_listen</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = do_listen &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>do_send</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = do_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>do_recv</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>do_write</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = do_write &rArr; do_writemore &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>do_getaddr</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = do_getaddr &rArr; sys_sem_signal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>do_close</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = do_close &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>do_join_leave_group</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = do_join_leave_group &rArr; igmp_leavegroup &rArr; igmp_send &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>do_gethostbyname</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = do_gethostbyname &rArr; dns_gethostbyname &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[266]"></a>netbuf_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
</UL>

<P><STRONG><a name="[237]"></a>netbuf_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
</UL>

<P><STRONG><a name="[267]"></a>netbuf_alloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[268]"></a>netbuf_free</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[269]"></a>netbuf_ref</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[26a]"></a>netbuf_chain</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[26c]"></a>netbuf_data</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[26d]"></a>netbuf_next</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[26e]"></a>netbuf_first</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2cb]"></a>lwip_socket_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sockets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[270]"></a>get_socket</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sockets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connect_stat
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_data_send
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_thread
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_web_socket
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dhcp_socket
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_udp_server_socket
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sendto
</UL>

<P><STRONG><a name="[271]"></a>lwip_accept</STRONG> (Thumb, 430 bytes, Stack size 80 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = lwip_accept &rArr; netconn_accept &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_server_thread
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_task
</UL>

<P><STRONG><a name="[273]"></a>lwip_bind</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = lwip_bind &rArr; netconn_bind &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_udhcpd
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_packet
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_add_membership
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create_server
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_server_init
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_server
</UL>

<P><STRONG><a name="[274]"></a>lwip_close</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_packet
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_add_membership
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create_server
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
</UL>

<P><STRONG><a name="[275]"></a>lwip_connect</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = lwip_connect &rArr; netconn_disconnect &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_packet
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_link
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_link
</UL>

<P><STRONG><a name="[276]"></a>lwip_listen</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = lwip_listen &rArr; netconn_listen_with_backlog &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_server_init
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_server
</UL>

<P><STRONG><a name="[277]"></a>lwip_recvfrom</STRONG> (Thumb, 504 bytes, Stack size 80 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recved
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_thread
</UL>

<P><STRONG><a name="[279]"></a>lwip_read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[27a]"></a>lwip_recv</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[27b]"></a>lwip_sendto</STRONG> (Thumb, 440 bytes, Stack size 48 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_data_send
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_thread
</UL>

<P><STRONG><a name="[27c]"></a>lwip_send</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_data_send
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_thread
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_thread
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_send
</UL>

<P><STRONG><a name="[27d]"></a>lwip_socket</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_udhcpd
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_packet
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_add_membership
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_link
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create_server
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_link
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_server_init
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_server
</UL>

<P><STRONG><a name="[27e]"></a>lwip_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = lwip_write &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_packet
</UL>

<P><STRONG><a name="[281]"></a>lwip_select</STRONG> (Thumb, 878 bytes, Stack size 112 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = lwip_select &rArr; lwip_selscan &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_thread
</UL>

<P><STRONG><a name="[282]"></a>lwip_shutdown</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
</UL>

<P><STRONG><a name="[284]"></a>lwip_getpeername</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[285]"></a>lwip_getsockname</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[286]"></a>lwip_getsockopt</STRONG> (Thumb, 438 bytes, Stack size 56 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>

<P><STRONG><a name="[287]"></a>lwip_setsockopt</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = lwip_setsockopt &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_udhcpd
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_packet
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_add_membership
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_link
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_link
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_task
</UL>

<P><STRONG><a name="[288]"></a>lwip_ioctl</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[289]"></a>lwip_fcntl</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[85]"></a>tcpip_input</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = tcpip_input &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpapp.o(.text)
</UL>
<P><STRONG><a name="[232]"></a>tcpip_callback_with_block</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_callback
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_callback
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
</UL>

<P><STRONG><a name="[290]"></a>tcpip_timeout</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>

<P><STRONG><a name="[291]"></a>tcpip_untimeout</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>

<P><STRONG><a name="[217]"></a>tcpip_apimsg</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recved
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[292]"></a>tcpip_callbackmsg_new</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
</UL>

<P><STRONG><a name="[293]"></a>tcpip_callbackmsg_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[294]"></a>tcpip_trycallback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>

<P><STRONG><a name="[295]"></a>tcpip_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = tcpip_init &rArr; sys_thread_new &rArr; thread_create &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lwip
</UL>

<P><STRONG><a name="[298]"></a>pbuf_free_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[299]"></a>mem_free_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[2c9]"></a>sys_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[76d]"></a>sys_jiffies</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(.text), UNUSED)

<P><STRONG><a name="[76e]"></a>sys_now</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys_arch.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>sys_sem_new</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = sys_sem_new &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ip
</UL>

<P><STRONG><a name="[218]"></a>sys_sem_valid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[248]"></a>sys_sem_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[21a]"></a>sys_sem_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = sys_sem_free &rArr; OSSemDel &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ip
</UL>

<P><STRONG><a name="[23a]"></a>sys_sem_signal</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = sys_sem_signal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_internal
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns_found
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_join_leave_group
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gethostbyname
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disconnect
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[233]"></a>sys_arch_sem_wait</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = sys_arch_sem_wait &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ip
</UL>

<P><STRONG><a name="[249]"></a>sys_mbox_new</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = sys_mbox_new &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[219]"></a>sys_mbox_valid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_trycallback
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_untimeout
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeout
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[24a]"></a>sys_mbox_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[28f]"></a>sys_mbox_post</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_untimeout
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeout
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>

<P><STRONG><a name="[236]"></a>sys_mbox_trypost</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = sys_mbox_trypost &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_trycallback
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[224]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = sys_arch_mbox_fetch &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[252]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; OSQAccept
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[21b]"></a>sys_mbox_free</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = sys_mbox_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[297]"></a>sys_thread_new</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = sys_thread_new &rArr; thread_create &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[2a8]"></a>dhcp_renew</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[2aa]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
</UL>

<P><STRONG><a name="[2ac]"></a>dhcp_release</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[2b3]"></a>dhcp_fine_tmr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
</UL>

<P><STRONG><a name="[2b5]"></a>dhcp_set_struct</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2b6]"></a>dhcp_cleanup</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2b7]"></a>dhcp_stop</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = dhcp_stop &rArr; udp_remove &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[2ba]"></a>dhcp_start</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
</UL>

<P><STRONG><a name="[2bb]"></a>dhcp_inform</STRONG> (Thumb, 178 bytes, Stack size 80 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2bc]"></a>dhcp_network_changed</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[2bd]"></a>dhcp_arp_reply</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[2bf]"></a>dns_setserver</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
</UL>

<P><STRONG><a name="[2c1]"></a>dns_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = dns_init &rArr; udp_new &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[364]"></a>dns_getserver</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_packet
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_tcpip_info
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_page_assemble
</UL>

<P><STRONG><a name="[2c5]"></a>dns_tmr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = dns_tmr &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_timer
</UL>

<P><STRONG><a name="[265]"></a>dns_gethostbyname</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = dns_gethostbyname &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gethostbyname
</UL>

<P><STRONG><a name="[296]"></a>lwip_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = lwip_init &rArr; dns_init &rArr; udp_new &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[2ca]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[2af]"></a>netif_set_gw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
</UL>

<P><STRONG><a name="[2b0]"></a>netif_set_netmask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
</UL>

<P><STRONG><a name="[2ae]"></a>netif_set_ipaddr</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
</UL>

<P><STRONG><a name="[2d0]"></a>netif_set_addr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[2d1]"></a>netif_add</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netif_init
</UL>

<P><STRONG><a name="[6c7]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netif_init
</UL>

<P><STRONG><a name="[2ad]"></a>netif_set_down</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_connect
</UL>

<P><STRONG><a name="[2d4]"></a>netif_remove</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = netif_remove &rArr; netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netif_init
</UL>

<P><STRONG><a name="[76f]"></a>netif_find</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, netif.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>netif_set_up</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netif_init
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_connect
</UL>

<P><STRONG><a name="[2d8]"></a>netif_set_link_up</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[770]"></a>netif_set_link_down</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>pbuf_free</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_int
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet
</UL>

<P><STRONG><a name="[234]"></a>pbuf_alloc</STRONG> (Thumb, 600 bytes, Stack size 40 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet
</UL>

<P><STRONG><a name="[2db]"></a>pbuf_alloced_custom</STRONG> (Thumb, 654 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_alloced_custom &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[2a2]"></a>pbuf_realloc</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[2dc]"></a>pbuf_header</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[302]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[2dd]"></a>pbuf_ref</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = pbuf_ref
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[26b]"></a>pbuf_cat</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[2de]"></a>pbuf_chain</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = pbuf_chain &rArr; pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[2df]"></a>pbuf_dechain</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[235]"></a>pbuf_copy</STRONG> (Thumb, 806 bytes, Stack size 40 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pbuf_copy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
</UL>

<P><STRONG><a name="[278]"></a>pbuf_copy_partial</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pbuf_copy_partial &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[2e0]"></a>pbuf_take</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2e1]"></a>pbuf_coalesce</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2e3]"></a>pbuf_get_at</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>

<P><STRONG><a name="[2e2]"></a>pbuf_memcmp</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
</UL>

<P><STRONG><a name="[2e4]"></a>pbuf_memfind</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
</UL>

<P><STRONG><a name="[2e5]"></a>pbuf_strstr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[326]"></a>raw_input</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[256]"></a>raw_bind</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[259]"></a>raw_connect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[24d]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[25e]"></a>raw_sendto</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = raw_sendto &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[25f]"></a>raw_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = raw_send &rArr; raw_sendto &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[254]"></a>raw_remove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = raw_remove &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[24c]"></a>raw_new</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = raw_new &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[2c8]"></a>stats_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stats.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[2cd]"></a>tcp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[2e8]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[2d9]"></a>tcp_segs_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
</UL>

<P><STRONG><a name="[2e9]"></a>tcp_pcb_purge</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[2ea]"></a>tcp_slowtmr</STRONG> (Thumb, 1358 bytes, Stack size 48 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + Unknown Stack Size
<LI>Call Chain = tcp_slowtmr &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[2ef]"></a>tcp_pcb_remove</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[245]"></a>tcp_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[2f3]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[239]"></a>tcp_recved</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[2f4]"></a>tcp_recv_null</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + Unknown Stack Size
<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.text)
</UL>
<P><STRONG><a name="[2f5]"></a>tcp_process_refused_data</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[2f6]"></a>tcp_fasttmr</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[2f7]"></a>tcp_tmr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>

<P><STRONG><a name="[246]"></a>tcp_shutdown</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + Unknown Stack Size
<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[2f8]"></a>tcp_abandon</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[253]"></a>tcp_abort</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[258]"></a>tcp_bind</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[25d]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = tcp_listen_with_backlog &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[2fa]"></a>tcp_eff_send_mss</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[2fb]"></a>tcp_next_iss</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[25b]"></a>tcp_connect</STRONG> (Thumb, 466 bytes, Stack size 32 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[771]"></a>tcp_setprio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>tcp_seg_copy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = tcp_seg_copy &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[2fe]"></a>tcp_alloc</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[250]"></a>tcp_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[23f]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[240]"></a>tcp_recv</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_recv &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[242]"></a>tcp_sent</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_sent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[244]"></a>tcp_err</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_err &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[241]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[243]"></a>tcp_poll</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_poll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[772]"></a>tcp_debug_state_str</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>tcp_input</STRONG> (Thumb, 1378 bytes, Stack size 56 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 740 + Unknown Stack Size
<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[2fc]"></a>tcp_enqueue_flags</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[2f2]"></a>tcp_send_fin</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[23c]"></a>tcp_write</STRONG> (Thumb, 1442 bytes, Stack size 96 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>

<P><STRONG><a name="[303]"></a>tcp_send_empty_ack</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[23d]"></a>tcp_output</STRONG> (Thumb, 428 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[2ee]"></a>tcp_rst</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[2ec]"></a>tcp_rexmit_rto</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[306]"></a>tcp_rexmit</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[301]"></a>tcp_rexmit_fast</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[2ed]"></a>tcp_keepalive</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = tcp_keepalive &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[2eb]"></a>tcp_zero_window_probe</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = tcp_zero_window_probe &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[28d]"></a>sys_timeout</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = sys_timeout &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_timer
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timer
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_timer
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
</UL>

<P><STRONG><a name="[2f1]"></a>tcp_timer_needed</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[2cf]"></a>sys_timeouts_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[28e]"></a>sys_untimeout</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = sys_untimeout &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[28a]"></a>sys_timeouts_mbox_fetch</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[2cc]"></a>udp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[315]"></a>udp_input</STRONG> (Thumb, 498 bytes, Stack size 40 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[257]"></a>udp_bind</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = udp_bind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[2a3]"></a>udp_sendto_if</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[260]"></a>udp_sendto</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[261]"></a>udp_send</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[25a]"></a>udp_connect</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[25c]"></a>udp_disconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disconnect
</UL>

<P><STRONG><a name="[24f]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[255]"></a>udp_remove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = udp_remove &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[24e]"></a>udp_new</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = udp_new &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[317]"></a>icmp_input</STRONG> (Thumb, 506 bytes, Stack size 56 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[316]"></a>icmp_dest_unreach</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[31b]"></a>icmp_time_exceeded</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[2ce]"></a>igmp_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, igmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[31d]"></a>igmp_lookfor_group</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>

<P><STRONG><a name="[2d2]"></a>igmp_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = igmp_start &rArr; igmp_lookup_group &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[2d5]"></a>igmp_stop</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = igmp_stop &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>

<P><STRONG><a name="[2d7]"></a>igmp_report_groups</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = igmp_report_groups &rArr; igmp_delaying_member &rArr; igmp_start_timer &rArr; get_random &rArr; os_time_get &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[31f]"></a>igmp_input</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = igmp_input &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[263]"></a>igmp_joingroup</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = igmp_joingroup &rArr; igmp_send &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_join_leave_group
</UL>

<P><STRONG><a name="[262]"></a>igmp_leavegroup</STRONG> (Thumb, 508 bytes, Stack size 32 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = igmp_leavegroup &rArr; igmp_send &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_join_leave_group
</UL>

<P><STRONG><a name="[314]"></a>igmp_tmr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = igmp_tmr &rArr; igmp_send &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timer
</UL>

<P><STRONG><a name="[30a]"></a>inet_chksum_pseudo</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[324]"></a>inet_chksum_pseudo_partial</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, inet_chksum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[319]"></a>inet_chksum</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[318]"></a>inet_chksum_pbuf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[2e6]"></a>ip_route</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
</UL>

<P><STRONG><a name="[28c]"></a>ip_input</STRONG> (Thumb, 548 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 780 + Unknown Stack Size
<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[321]"></a>ip_output_if_opt</STRONG> (Thumb, 380 bytes, Stack size 56 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[2e7]"></a>ip_output_if</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>

<P><STRONG><a name="[310]"></a>ip_output</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[309]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ip_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[773]"></a>ip4_addr_netmask_valid</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ip_addr.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>ipaddr_aton</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ipaddr_aton &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
</UL>

<P><STRONG><a name="[2c2]"></a>ipaddr_addr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ipaddr_addr &rArr; ipaddr_aton &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_udhcpd
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ip_addr_post
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_add_membership
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netif_init
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_link
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_link
</UL>

<P><STRONG><a name="[32a]"></a>ipaddr_ntoa_r</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ip_addr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
</UL>

<P><STRONG><a name="[329]"></a>ipaddr_ntoa</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ip_addr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa_r
</UL>

<P><STRONG><a name="[312]"></a>ip_reass_tmr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_timer
</UL>

<P><STRONG><a name="[325]"></a>ip_reass</STRONG> (Thumb, 822 bytes, Stack size 40 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = ip_reass &rArr; ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[327]"></a>ip_frag</STRONG> (Thumb, 406 bytes, Stack size 88 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
</UL>

<P><STRONG><a name="[331]"></a>mac_data_xmit</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = mac_data_xmit &rArr; __alloc_skb &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_reserve
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_hw_ok
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[336]"></a>ethernetif_input</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_rx
</UL>

<P><STRONG><a name="[86]"></a>ethernetif_init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = ethernetif_init &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpapp.o(.text)
</UL>
<P><STRONG><a name="[313]"></a>etharp_tmr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[2d3]"></a>etharp_cleanup_netif</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[33d]"></a>etharp_find_addr</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2d6]"></a>etharp_request</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[2a5]"></a>etharp_query</STRONG> (Thumb, 376 bytes, Stack size 56 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ip
</UL>

<P><STRONG><a name="[75]"></a>etharp_output</STRONG> (Thumb, 576 bytes, Stack size 32 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text)
</UL>
<P><STRONG><a name="[28b]"></a>ethernet_input</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + Unknown Stack Size
<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[341]"></a>init_udhcpd</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, dhcpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = init_udhcpd &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[342]"></a>enable_dhcp_server</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dhcpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = enable_dhcp_server &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[343]"></a>disable_dhcp_server</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, dhcpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[344]"></a>release_dhcp_packet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dhcpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = release_dhcp_packet &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp_rcv
</UL>

<P><STRONG><a name="[345]"></a>handle_dhcp_rcv</STRONG> (Thumb, 786 bytes, Stack size 48 bytes, dhcpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = handle_dhcp_rcv &rArr; sendOffer &rArr; find_address &rArr; check_ip &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_inform
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNAK
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lease_expired
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_option
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_lease_by_yiaddr
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_lease_by_chaddr
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_dhcp_packet
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_thread
</UL>

<P><STRONG><a name="[350]"></a>clear_lease</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, leases.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = clear_lease &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_lease
</UL>

<P><STRONG><a name="[351]"></a>oldest_expired_lease</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, leases.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = oldest_expired_lease
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_lease
</UL>

<P><STRONG><a name="[352]"></a>add_lease</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, leases.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = add_lease &rArr; clear_lease &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oldest_expired_lease
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lease
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ip
</UL>

<P><STRONG><a name="[34d]"></a>lease_expired</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, leases.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lease_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp_rcv
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_address
</UL>

<P><STRONG><a name="[348]"></a>find_lease_by_chaddr</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, leases.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = find_lease_by_chaddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp_rcv
</UL>

<P><STRONG><a name="[34c]"></a>find_lease_by_yiaddr</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, leases.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_lease_by_yiaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp_rcv
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_address
</UL>

<P><STRONG><a name="[353]"></a>check_ip</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, leases.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = check_ip &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_lease
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_address
</UL>

<P><STRONG><a name="[354]"></a>find_address</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, leases.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = find_address &rArr; check_ip &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lease_expired
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_lease_by_yiaddr
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
</UL>

<P><STRONG><a name="[346]"></a>get_option</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, options.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_option
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp_rcv
</UL>

<P><STRONG><a name="[356]"></a>end_option</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, options.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_option_string
</UL>

<P><STRONG><a name="[355]"></a>add_option_string</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, options.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = add_option_string &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_option
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_inform
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_simple_option
</UL>

<P><STRONG><a name="[357]"></a>add_simple_option</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, options.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = add_simple_option &rArr; add_option_string &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_option_string
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_packet
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_header
</UL>

<P><STRONG><a name="[359]"></a>find_option</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, options.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attach_option
</UL>

<P><STRONG><a name="[358]"></a>attach_option</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, options.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_option
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[35b]"></a>init_header</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = init_header &rArr; add_simple_option &rArr; add_option_string &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_simple_option
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_packet
</UL>

<P><STRONG><a name="[34e]"></a>time</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, packet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lease_expired
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp_rcv
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_lease
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oldest_expired_lease
</UL>

<P><STRONG><a name="[35f]"></a>checksum</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, packet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet
</UL>

<P><STRONG><a name="[35e]"></a>udhcp_end_option</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, packet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet
</UL>

<P><STRONG><a name="[35c]"></a>raw_packet</STRONG> (Thumb, 360 bytes, Stack size 72 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = raw_packet &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udhcp_end_option
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet_to_client
</UL>

<P><STRONG><a name="[360]"></a>kernel_packet</STRONG> (Thumb, 172 bytes, Stack size 80 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = kernel_packet &rArr; lwip_write &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[349]"></a>sendOffer</STRONG> (Thumb, 486 bytes, Stack size 40 bytes, serverpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = sendOffer &rArr; find_address &rArr; check_ip &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lease_expired
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_option
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_lease_by_yiaddr
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_lease_by_chaddr
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_bootp_options
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_packet
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_simple_option
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_option_string
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_address
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_lease
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp_rcv
</UL>

<P><STRONG><a name="[34b]"></a>sendNAK</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, serverpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = sendNAK &rArr; send_packet &rArr; kernel_packet &rArr; lwip_write &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_packet
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp_rcv
</UL>

<P><STRONG><a name="[34a]"></a>sendACK</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, serverpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = sendACK &rArr; send_packet &rArr; kernel_packet &rArr; lwip_write &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_option
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_bootp_options
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_packet
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_simple_option
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_option_string
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_lease
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp_rcv
</UL>

<P><STRONG><a name="[34f]"></a>send_inform</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, serverpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = send_inform &rArr; send_packet &rArr; kernel_packet &rArr; lwip_write &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_bootp_options
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_packet
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_option_string
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp_rcv
</UL>

<P><STRONG><a name="[774]"></a>woal_ssid_valid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, moal_main.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>woal_alloc_mlan_ioctl_req</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_sleeppd
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_qos_cfg
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_band
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_type
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rssi_threshold
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rssi_low_threshold
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_band
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_bgscan
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_time
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_userscan
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_enable_wep_key
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_wpa_enable
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_encrypt_mode
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_auth_mode
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_wpa_enable
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_encrypt_mode
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_auth_mode
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_find_best_network
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_change_adhoc_chan
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_scan
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_scan_table
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_signal_info
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_11h_channel_check_ioctl
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_deep_sleep
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_deep_sleep
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_pm_info
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_tx_bf_cfg
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_wapi_enable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_soft_reset
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_hs_params
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_custom_ie_ioctl
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hostcmd_ioctl
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_data_rate
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_region_code
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_power_mgmt
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_tx_power
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_gen_ie
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_start
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rf_channel
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_sys_config
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_rts
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_retry
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_frag
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reg_rx_mgmt_ind
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_role_cfg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_change_virtual_intf
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_key
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_custom_ie
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_set_multicast_list
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_set_mac_address
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_get_fw_info
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_disconnect
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_uap_init_wiphy
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_sta_init_wiphy
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_scan
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_mode
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_stats
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_version
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_bss_param
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_key_ioctl
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_sta_list_ioctl
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_cfg_ioctl
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_power_mode_ioctl
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_radio_ctl
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sta_deauth_ioctl
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_antenna_cfg
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_txdatapause
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_deep_sleep
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_reject
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_param
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_flag_ioctl
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_enable_wapi
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_tx_rate_cfg
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_snmp_mib
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_aggr_priotbl
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_cfg80211_get_station
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_passphrase
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_ewpa_mode
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station_info
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_domain_info_cmd_fw
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc_ies_cfg
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[369]"></a>woal_get_mode</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, moal_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[36c]"></a>woal_reassoc_timer_func</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = woal_reassoc_timer_func &rArr; wake_up &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.text)
</UL>
<P><STRONG><a name="[371]"></a>woal_remove_interface</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, moal_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_unregister
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_fw_dpc
</UL>

<P><STRONG><a name="[374]"></a>woal_init_priv</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1156 + Unknown Stack Size
<LI>Call Chain = woal_init_priv &rArr; woal_cfg80211_uap_init_wiphy &rArr; woal_set_get_sys_config &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_get_fw_info
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_uap_init_wiphy
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_sta_init_wiphy
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_bss_role
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_bss_role_cfg
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_cs_params
</UL>

<P><STRONG><a name="[379]"></a>woal_add_interface</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, moal_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_set_mac_address
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_uap_cfg80211
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_sta_cfg80211
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_unregister
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_free
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_netdev
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_LIST_HEAD
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_priv
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_fw_dpc
</UL>

<P><STRONG><a name="[380]"></a>woal_sdio_reg_dbg</STRONG> (Thumb, 228 bytes, Stack size 192 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = woal_sdio_reg_dbg &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_f0_readb
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_main_work_queue
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_moal_debug_info
</UL>

<P><STRONG><a name="[383]"></a>woal_moal_debug_info</STRONG> (Thumb, 68 bytes, Stack size 144 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = woal_moal_debug_info &rArr; woal_sdio_reg_dbg &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_version
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_reg_dbg
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_tx_timeout
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw_dpc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[38c]"></a>woal_request_fw</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, moal_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_fw_dpc
</UL>

<P><STRONG><a name="[8d]"></a>woal_open</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = woal_open
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_module_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>woal_close</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = woal_close &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_put
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>woal_set_mac_address</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = woal_set_mac_address &rArr; woal_request_set_mac_address &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_set_mac_address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.constdata)
</UL>
<P><STRONG><a name="[775]"></a>woal_mlan_debug_info</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, moal_main.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>woal_tx_timeout</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = woal_tx_timeout &rArr; woal_moal_debug_info &rArr; woal_sdio_reg_dbg &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_moal_debug_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>woal_get_stats</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, moal_main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>woal_select_queue</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = woal_select_queue &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_select_wmm_queue
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.constdata)
</UL>
<P><STRONG><a name="[392]"></a>woal_get_tcp_sess</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = woal_get_tcp_sess
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_process_tcp_ack
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_check_tcp_fin
</UL>

<P><STRONG><a name="[390]"></a>woal_check_tcp_fin</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = woal_check_tcp_fin &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_mac_header
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_tcp_sess
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_packet
</UL>

<P><STRONG><a name="[393]"></a>woal_process_tcp_ack</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, moal_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_skb
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_LIST_HEAD
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_tcp_sess
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[8f]"></a>woal_hard_start_xmit</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = woal_hard_start_xmit &rArr; skb_realloc_headroom &rArr; pskb_copy &rArr; __alloc_skb &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_read
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_to_ktime
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_realloc_headroom
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_send_packet
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gettimeofday
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_skb
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.constdata)
</UL>
<P><STRONG><a name="[399]"></a>woal_ascii2hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, moal_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[39a]"></a>woal_atox</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = woal_atox
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_mac2u8
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atoi
</UL>

<P><STRONG><a name="[39c]"></a>woal_atoi</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = woal_atoi &rArr; woal_atox
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atox
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_sleeppd
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_qos_cfg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rssi_low_threshold
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ap_cfg_parse_data
</UL>

<P><STRONG><a name="[39d]"></a>woal_strsep</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = woal_strsep &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_mac2u8
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ap_cfg_parse_data
</UL>

<P><STRONG><a name="[39f]"></a>woal_mac2u8</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = woal_mac2u8 &rArr; woal_strsep &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_strsep
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atox
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[91]"></a>woal_set_multicast_list</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = woal_set_multicast_list &rArr; woal_request_set_multicast_list &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_set_multicast_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.constdata)
</UL>
<P><STRONG><a name="[3a1]"></a>woal_reset_intf</STRONG> (Thumb, 260 bytes, Stack size 184 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = woal_reset_intf &rArr; woal_cancel_hs &rArr; woal_set_get_hs_params &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_disconnect
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_scan
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_hs
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_timer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_bss_role
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_bss_role_cfg
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
</UL>

<P><STRONG><a name="[41b]"></a>woal_bss_index_to_priv</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, moal_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_packet
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_send_packet_complete
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_ioctl_complete
</UL>

<P><STRONG><a name="[3a7]"></a>woal_alloc_mlan_buffer</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = woal_alloc_mlan_buffer &rArr; dev_alloc_skb &rArr; __dev_alloc_skb &rArr; __alloc_skb &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_alloc_skb
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_host_packet
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_alloc_mlan_buffer
</UL>

<P><STRONG><a name="[3a9]"></a>woal_free_mlan_buffer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = woal_free_mlan_buffer &rArr; consume_skb &rArr; __kfree_skb &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_skb
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_host_packet
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_send_packet_complete
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_free_mlan_buffer
</UL>

<P><STRONG><a name="[420]"></a>woal_broadcast_event</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, moal_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[3aa]"></a>woal_reassociation_thread</STRONG> (Thumb, 498 bytes, Stack size 184 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = woal_reassociation_thread &rArr; woal_get_bss_info &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_myself
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_timer
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_timer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.text)
</UL>
<P><STRONG><a name="[3ad]"></a>woal_send_disconnect_to_system</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = woal_send_disconnect_to_system &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[3ae]"></a>woal_main_work_queue</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = woal_main_work_queue &rArr; mlan_main_process &rArr; mlan_shutdown_fw &rArr; wlan_free_priv &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_interrupt
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_reg_dbg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.text)
</UL>
<P><STRONG><a name="[776]"></a>woal_interrupt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, moal_main.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>woal_add_card</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = woal_add_card &rArr; mlan_shutdown_fw &rArr; wlan_free_priv &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_work
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_workqueue
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_unregister_dev
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_update_card_type
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_dev
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_shutdown_fw
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_mac2u8
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_terminate_workqueue
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_moal_handle
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_probe
</UL>

<P><STRONG><a name="[3b8]"></a>woal_remove_card</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, moal_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_read
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_unregister_dev
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_shutdown_fw
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_interface
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_terminate_workqueue
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_timer
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_moal_handle
</UL>

<P><STRONG><a name="[3b9]"></a>woal_switch_drv_mode</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, moal_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_read
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_unregister
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_shutdown_fw
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reset_intf
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_interface
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_update_drv_tbl
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_priv
</UL>

<P><STRONG><a name="[3ba]"></a>woal_init_module</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = woal_init_module &rArr; woal_sdio_probe &rArr; woal_add_card &rArr; mlan_shutdown_fw &rArr; wlan_free_priv &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_probe
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi
</UL>

<P><STRONG><a name="[436]"></a>woal_get_wiphy_priv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, moal_cfg80211.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_tx_power
</UL>

<P><STRONG><a name="[433]"></a>woal_get_netdev_priv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, moal_cfg80211.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_del_beacon
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_cfg80211_get_station
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_beacon
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_add_beacon
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_cqm_rssi_config
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_power_mgmt
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_leave_ibss
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_join_ibss
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_get_station
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_disconnect
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_connect
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_scan
</UL>

<P><STRONG><a name="[3bc]"></a>woal_cfg80211_set_key</STRONG> (Thumb, 406 bytes, Stack size 64 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_set_key &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_del_key
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_add_key
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_wep_keys
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[3bd]"></a>woal_cfg80211_set_wep_keys</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_set_wep_keys &rArr; woal_cfg80211_set_key &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_default_key
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[3c2]"></a>woal_cfg80211_mgmt_frame_ie</STRONG> (Thumb, 736 bytes, Stack size 88 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_mgmt_frame_ie &rArr; woal_cfg80211_custom_ie &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_filter_beacon_ies
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_custom_ie
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_del_beacon
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_change_virtual_intf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_beacon
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_add_beacon
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_scan
</UL>

<P><STRONG><a name="[b7]"></a>woal_cfg80211_change_virtual_intf</STRONG> (Thumb, 248 bytes, Stack size 80 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1260 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_change_virtual_intf &rArr; woal_cfg80211_bss_role_cfg &rArr; woal_init_priv &rArr; woal_cfg80211_uap_init_wiphy &rArr; woal_set_get_sys_config &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_del_beacon
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_bss_role_cfg
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Address Reference Count : 2]<UL><LI> moal_sta_cfg80211.o(.constdata)
<LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>woal_cfg80211_set_wiphy_params</STRONG> (Thumb, 188 bytes, Stack size 840 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1108 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_set_wiphy_params &rArr; woal_set_get_sys_config &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_sys_config_invalid_data
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_sys_config
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_rts
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_retry
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_frag
</UL>
<BR>[Address Reference Count : 2]<UL><LI> moal_sta_cfg80211.o(.constdata)
<LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>woal_cfg80211_add_key</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_add_key &rArr; woal_cfg80211_set_key &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_key
</UL>
<BR>[Address Reference Count : 2]<UL><LI> moal_sta_cfg80211.o(.constdata)
<LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>woal_cfg80211_del_key</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_del_key &rArr; woal_cfg80211_set_key &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_key
</UL>
<BR>[Address Reference Count : 2]<UL><LI> moal_sta_cfg80211.o(.constdata)
<LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>woal_cfg80211_set_default_key</STRONG> (Thumb, 50 bytes, Stack size 160 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_set_default_key &rArr; woal_cfg80211_set_wep_keys &rArr; woal_cfg80211_set_key &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_wep_keys
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
</UL>
<BR>[Address Reference Count : 2]<UL><LI> moal_sta_cfg80211.o(.constdata)
<LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>woal_cfg80211_set_channel</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_set_channel &rArr; woal_set_rf_channel &rArr; woal_change_adhoc_chan &rArr; woal_request_scan &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rf_channel
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_frequency_to_channel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> moal_sta_cfg80211.o(.constdata)
<LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>woal_cfg80211_mgmt_frame_register</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_mgmt_frame_register &rArr; woal_reg_rx_mgmt_ind &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reg_rx_mgmt_ind
</UL>
<BR>[Address Reference Count : 2]<UL><LI> moal_sta_cfg80211.o(.constdata)
<LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>woal_cfg80211_mgmt_tx</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_mgmt_tx &rArr; woal_alloc_mlan_buffer &rArr; dev_alloc_skb &rArr; __dev_alloc_skb &rArr; __alloc_skb &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_random
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_send_packet
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_mlan_buffer
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_buffer
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> moal_sta_cfg80211.o(.constdata)
<LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[777]"></a>woal_parse_ie_tlv</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, moal_cfg80211.o(.text), UNUSED)

<P><STRONG><a name="[3cb]"></a>woal_cfg80211_setup_ht_cap</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = woal_cfg80211_setup_ht_cap
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_uap_init_wiphy
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_sta_init_wiphy
</UL>

<P><STRONG><a name="[36a]"></a>woal_request_ioctl</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = woal_request_ioctl &rArr; mlan_ioctl &rArr; wlan_cancel_pending_ioctl &rArr; wlan_flush_scan_queue &rArr; wlan_insert_cmd_to_free_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_ioctl
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cac_period_block_cmd
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_sleeppd
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_qos_cfg
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_band
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_type
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rssi_threshold
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rssi_low_threshold
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_band
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_bgscan
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_time
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_userscan
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_enable_wep_key
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_wpa_enable
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_encrypt_mode
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_auth_mode
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_wpa_enable
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_encrypt_mode
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_auth_mode
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_find_best_network
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_change_adhoc_chan
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_scan
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_scan_table
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_signal_info
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_11h_channel_check_ioctl
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_deep_sleep
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_deep_sleep
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_pm_info
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_tx_bf_cfg
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_wapi_enable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_soft_reset
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_hs_params
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_custom_ie_ioctl
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hostcmd_ioctl
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_data_rate
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_region_code
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_power_mgmt
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_tx_power
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_gen_ie
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_start
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rf_channel
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_sys_config
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_rts
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_retry
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_frag
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reg_rx_mgmt_ind
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_role_cfg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_change_virtual_intf
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_key
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_custom_ie
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_set_multicast_list
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_set_mac_address
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_get_fw_info
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_disconnect
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_uap_init_wiphy
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_sta_init_wiphy
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_scan
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_mode
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_stats
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_version
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_bss_param
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_key_ioctl
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_sta_list_ioctl
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_cfg_ioctl
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_power_mode_ioctl
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_radio_ctl
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sta_deauth_ioctl
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_antenna_cfg
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_txdatapause
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_deep_sleep
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_reject
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_param
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_flag_ioctl
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_enable_wapi
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_tx_rate_cfg
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_snmp_mib
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_aggr_priotbl
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_cfg80211_get_station
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_passphrase
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_ewpa_mode
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station_info
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_domain_info_cmd_fw
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc_ies_cfg
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[37f]"></a>woal_request_set_mac_address</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = woal_request_set_mac_address &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_mac_address
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
</UL>

<P><STRONG><a name="[3a0]"></a>woal_request_set_multicast_list</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = woal_request_set_multicast_list &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_multicast_list
</UL>

<P><STRONG><a name="[3a5]"></a>woal_disconnect</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = woal_disconnect &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reset_intf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_leave_ibss
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_disconnect
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[3ce]"></a>woal_bss_start</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = woal_bss_start &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[3a2]"></a>woal_get_bss_info</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = woal_get_bss_info &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_change_adhoc_chan
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_default_key
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reset_intf
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_radio_ctl
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_hs_cfg
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_inform_ibss_bss
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_scan
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station_info
</UL>

<P><STRONG><a name="[3c7]"></a>woal_set_get_retry</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = woal_set_get_retry &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_wiphy_params
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_sta_init_wiphy
</UL>

<P><STRONG><a name="[3c5]"></a>woal_set_get_rts</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = woal_set_get_rts &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_wiphy_params
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_sta_init_wiphy
</UL>

<P><STRONG><a name="[3c6]"></a>woal_set_get_frag</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = woal_set_get_frag &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_wiphy_params
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_sta_init_wiphy
</UL>

<P><STRONG><a name="[3cf]"></a>woal_set_get_gen_ie</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = woal_set_get_gen_ie &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc_ies_cfg
</UL>

<P><STRONG><a name="[3d0]"></a>woal_set_get_tx_power</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = woal_set_get_tx_power &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_tx_power
</UL>

<P><STRONG><a name="[3d1]"></a>woal_set_get_power_mgmt</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_set_get_power_mgmt &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_powermode
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_powermode
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_sta_init_wiphy
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_power_mgmt
</UL>

<P><STRONG><a name="[3d2]"></a>woal_set_region_code</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[3d3]"></a>woal_set_get_data_rate</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[378]"></a>woal_request_get_fw_info</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = woal_request_get_fw_info &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_uap_cfg80211
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_sta_cfg80211
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_priv
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_fw_info
</UL>

<P><STRONG><a name="[3d5]"></a>woal_hostcmd_ioctl</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[3d7]"></a>woal_custom_ie_ioctl</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = woal_custom_ie_ioctl &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[3d8]"></a>woal_send_host_packet</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_send_packet
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_mlan_buffer
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_buffer
</UL>

<P><STRONG><a name="[3d9]"></a>woal_get_bss_type</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = woal_get_bss_type &rArr; copy_from_user &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[3bf]"></a>woal_bss_role_cfg</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = woal_bss_role_cfg &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_bss_role
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_bss_role_cfg
</UL>

<P><STRONG><a name="[3da]"></a>woal_set_get_bss_role</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_role_cfg
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reset_intf
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_priv
</UL>

<P><STRONG><a name="[3db]"></a>woal_set_get_hs_params</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = woal_set_get_hs_params &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_hs
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_hs_cfg
</UL>

<P><STRONG><a name="[3a4]"></a>woal_cancel_hs</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_cancel_hs &rArr; woal_set_get_hs_params &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_hs_params
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reset_intf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[3dc]"></a>woal_request_soft_reset</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[3dd]"></a>woal_set_wapi_enable</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = woal_set_wapi_enable &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_flag_ioctl
</UL>

<P><STRONG><a name="[384]"></a>woal_get_version</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = woal_get_version &rArr; __c89snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89snprintf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_moal_debug_info
</UL>

<P><STRONG><a name="[3ca]"></a>woal_reg_rx_mgmt_ind</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = woal_reg_rx_mgmt_ind &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_register
</UL>

<P><STRONG><a name="[3df]"></a>woal_set_get_tx_bf_cfg</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = woal_set_get_tx_bf_cfg &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_tx_bf_cfg
</UL>

<P><STRONG><a name="[41c]"></a>woal_process_ioctl_resp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, moal_ioctl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_ioctl_complete
</UL>

<P><STRONG><a name="[3e0]"></a>woal_get_pm_info</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[3e1]"></a>woal_get_deep_sleep</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[3e2]"></a>woal_set_deep_sleep</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[3e3]"></a>woal_cancel_cac_block</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = woal_cancel_cac_block &rArr; wake_up &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
</UL>

<P><STRONG><a name="[3e4]"></a>woal_11h_channel_check_ioctl</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = woal_11h_channel_check_ioctl &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[3e5]"></a>woal_get_signal_info</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = woal_get_signal_info &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_inform_ibss_bss
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station_info
</UL>

<P><STRONG><a name="[3e6]"></a>woal_get_scan_table</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = woal_get_scan_table &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_find_essid
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_inform_bss_from_scan_result
</UL>

<P><STRONG><a name="[3e7]"></a>woal_request_scan</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = woal_request_scan &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_do_scan
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_change_adhoc_chan
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[3e8]"></a>woal_change_adhoc_chan</STRONG> (Thumb, 196 bytes, Stack size 176 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = woal_change_adhoc_chan &rArr; woal_request_scan &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_scan
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rf_channel
</UL>

<P><STRONG><a name="[3e9]"></a>woal_find_best_network</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = woal_find_best_network &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_find_essid
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[3ea]"></a>woal_get_auth_mode</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[3eb]"></a>woal_get_encrypt_mode</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[3ec]"></a>woal_get_wpa_enable</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[3ed]"></a>woal_set_auth_mode</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = woal_set_auth_mode &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[3ee]"></a>woal_set_encrypt_mode</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = woal_set_encrypt_mode &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_auth
</UL>

<P><STRONG><a name="[3ef]"></a>woal_set_wpa_enable</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = woal_set_wpa_enable &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_auth
</UL>

<P><STRONG><a name="[3f0]"></a>woal_enable_wep_key</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[3f1]"></a>woal_request_userscan</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = woal_request_userscan &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_do_scan
</UL>

<P><STRONG><a name="[3f2]"></a>woal_set_scan_time</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_cfg
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_combo_scan
</UL>

<P><STRONG><a name="[3f3]"></a>woal_do_scan</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = woal_do_scan &rArr; woal_request_scan &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_userscan
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_combo_scan
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_scan
</UL>

<P><STRONG><a name="[3a3]"></a>woal_cancel_scan</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = woal_cancel_scan &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_scan_done
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reset_intf
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_add_beacon
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_connect
</UL>

<P><STRONG><a name="[3f5]"></a>woal_find_essid</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = woal_find_essid &rArr; woal_find_best_network &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_find_best_network
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_scan_table
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gettimeofday
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[3f6]"></a>woal_request_bgscan</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reconfig_bgscan
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_stop_bg_scan
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_bg_scan
</UL>

<P><STRONG><a name="[3f7]"></a>woal_get_band</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_bg_scan
</UL>

<P><STRONG><a name="[3f8]"></a>woal_set_bg_scan</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_band
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_bgscan
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3f9]"></a>woal_stop_bg_scan</STRONG> (Thumb, 46 bytes, Stack size 624 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_bgscan
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[3fa]"></a>woal_reconfig_bgscan</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_bgscan
</UL>

<P><STRONG><a name="[3fb]"></a>woal_set_rssi_low_threshold</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atoi
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[3fc]"></a>woal_set_rssi_threshold</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = woal_set_rssi_threshold &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_cqm_rssi_config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[3fd]"></a>woal_get_powermode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_power_mgmt
</UL>

<P><STRONG><a name="[3fe]"></a>woal_set_scan_type</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = woal_set_scan_type &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_combo_scan
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_connect
</UL>

<P><STRONG><a name="[3ff]"></a>woal_set_powermode</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_power_mgmt
</UL>

<P><STRONG><a name="[400]"></a>woal_set_combo_scan</STRONG> (Thumb, 326 bytes, Stack size 808 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_type
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_do_scan
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_time
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[401]"></a>woal_set_band</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[778]"></a>woal_add_rxfilter</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, moal_ioctl.o(.text), UNUSED)

<P><STRONG><a name="[779]"></a>woal_remove_rxfilter</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, moal_ioctl.o(.text), UNUSED)

<P><STRONG><a name="[402]"></a>woal_set_qos_cfg</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atoi
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[403]"></a>woal_set_sleeppd</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atoi
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[404]"></a>woal_set_scan_cfg</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_time
</UL>

<P><STRONG><a name="[77a]"></a>roundup</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, moal_sdio_mmc.o(.text), UNUSED)

<P><STRONG><a name="[77b]"></a>rounddown</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, moal_sdio_mmc.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>sdio_reset</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = sdio_reset &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[381]"></a>sdio_readb</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_read_write_cmd52
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_read_reg
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_dump_sdio_reg
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_reg_dbg
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sdcmd52_rw
</UL>

<P><STRONG><a name="[406]"></a>sdio_writeb</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = sdio_writeb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_read_write_cmd52
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_write_reg
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sdcmd52_rw
</UL>

<P><STRONG><a name="[407]"></a>sdio_writeb_readb</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, moal_sdio_mmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>

<P><STRONG><a name="[408]"></a>sdio_readsb</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = sdio_readsb &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; dma_start_send_data &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_read_data_sync
</UL>

<P><STRONG><a name="[409]"></a>sdio_writesb</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = sdio_writesb &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; dma_start_send_data &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_write_data_sync
</UL>

<P><STRONG><a name="[382]"></a>sdio_f0_readb</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = sdio_f0_readb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_read_write_cmd52
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_dump_sdio_reg
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_reg_dbg
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sdcmd52_rw
</UL>

<P><STRONG><a name="[40a]"></a>sdio_f0_writeb</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = sdio_f0_writeb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_read_write_cmd52
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sdcmd52_rw
</UL>

<P><STRONG><a name="[40b]"></a>sdio_set_block_size</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = sdio_set_block_size &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_dev
</UL>

<P><STRONG><a name="[40c]"></a>sdio_enable_func</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = sdio_enable_func &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_probe
</UL>

<P><STRONG><a name="[40d]"></a>sdio_disable_func</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = sdio_disable_func &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_unregister_dev
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_probe
</UL>

<P><STRONG><a name="[40e]"></a>sdio_claim_irq</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = sdio_claim_irq &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sdio_int
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_dev
</UL>

<P><STRONG><a name="[40f]"></a>sdio_release_irq</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = sdio_release_irq &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_unregister_dev
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_dev
</UL>

<P><STRONG><a name="[410]"></a>woal_dump_sdio_reg</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = woal_dump_sdio_reg &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_f0_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_read_data_sync
</UL>

<P><STRONG><a name="[3b2]"></a>woal_sdio_update_card_type</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[153]"></a>woal_sdio_interrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = woal_sdio_interrupt &rArr; schedule_work &rArr; wake_up &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[3bb]"></a>woal_sdio_probe</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = woal_sdio_probe &rArr; woal_add_card &rArr; mlan_shutdown_fw &rArr; wlan_free_priv &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_disable_func
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_func
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_module
</UL>

<P><STRONG><a name="[77c]"></a>woal_sdio_remove</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, moal_sdio_mmc.o(.text), UNUSED)

<P><STRONG><a name="[411]"></a>woal_write_reg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = woal_write_reg &rArr; sdio_writeb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_write_reg
</UL>

<P><STRONG><a name="[412]"></a>woal_read_reg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = woal_read_reg &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_read_reg
</UL>

<P><STRONG><a name="[413]"></a>woal_write_data_sync</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = woal_write_data_sync &rArr; sdio_writesb &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; dma_start_send_data &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writesb
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_write_data_sync
</UL>

<P><STRONG><a name="[414]"></a>woal_read_data_sync</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = woal_read_data_sync &rArr; sdio_readsb &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; dma_start_send_data &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_dump_sdio_reg
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readsb
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_read_data_sync
</UL>

<P><STRONG><a name="[77d]"></a>woal_bus_register</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, moal_sdio_mmc.o(.text), UNUSED)

<P><STRONG><a name="[77e]"></a>woal_bus_unregister</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, moal_sdio_mmc.o(.text), UNUSED)

<P><STRONG><a name="[3b5]"></a>woal_unregister_dev</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = woal_unregister_dev &rArr; sdio_disable_func &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_release_irq
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_disable_func
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[3b3]"></a>woal_register_dev</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = woal_register_dev &rArr; sdio_claim_irq &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_release_irq
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_claim_irq
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_block_size
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[415]"></a>woal_sdio_set_bus_clock</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, moal_sdio_mmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[416]"></a>woal_sdio_read_write_cmd52</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, moal_sdio_mmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_f0_writeb
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_f0_readb
</UL>

<P><STRONG><a name="[a4]"></a>moal_malloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = moal_malloc &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>moal_mfree</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = moal_mfree &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>moal_memset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = moal_memset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>moal_memcpy</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = moal_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>moal_memmove</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = moal_memmove &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>moal_memcmp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = moal_memcmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>moal_udelay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = moal_udelay &rArr; sleep &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>moal_get_system_time</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = moal_get_system_time &rArr; do_gettimeofday &rArr; os_time_get &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gettimeofday
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>moal_init_timer</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = moal_init_timer &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>moal_free_timer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = moal_free_timer &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_free
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>moal_start_timer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = moal_start_timer &rArr; woal_mod_timer &rArr; mod_timer &rArr; OSTmrStart &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_mod_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>moal_stop_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = moal_stop_timer &rArr; woal_cancel_timer &rArr; del_timer &rArr; OSTmrStop &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>moal_init_lock</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = moal_init_lock &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>moal_free_lock</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = moal_free_lock &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>moal_spin_lock</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = moal_spin_lock &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>moal_spin_unlock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = moal_spin_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>moal_get_fw_data</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = moal_get_fw_data &rArr; read_firmware &rArr; m25p80_read &rArr; wait_till_ready &rArr; read_sr &rArr; spi_write_then_read &rArr; spi_r
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_firmware
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>moal_init_fw_complete</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = moal_init_fw_complete &rArr; wake_up &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>moal_shutdown_fw_complete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = moal_shutdown_fw_complete &rArr; wake_up &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>moal_ioctl_complete</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = moal_ioctl_complete &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_read
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_process_ioctl_resp
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_index_to_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>moal_alloc_mlan_buffer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = moal_alloc_mlan_buffer &rArr; woal_alloc_mlan_buffer &rArr; dev_alloc_skb &rArr; __dev_alloc_skb &rArr; __alloc_skb &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>moal_free_mlan_buffer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = moal_free_mlan_buffer &rArr; woal_free_mlan_buffer &rArr; consume_skb &rArr; __kfree_skb &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_mlan_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>moal_send_packet_complete</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = moal_send_packet_complete &rArr; woal_free_mlan_buffer &rArr; consume_skb &rArr; __kfree_skb &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub_return
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_skb
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_mlan_buffer
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_index_to_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>moal_write_data_sync</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = moal_write_data_sync &rArr; woal_write_data_sync &rArr; sdio_writesb &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; dma_start_send_data &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_write_data_sync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>moal_read_data_sync</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = moal_read_data_sync &rArr; woal_read_data_sync &rArr; sdio_readsb &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; dma_start_send_data &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_read_data_sync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>moal_write_reg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = moal_write_reg &rArr; woal_write_reg &rArr; sdio_writeb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_write_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>moal_read_reg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = moal_read_reg &rArr; woal_read_reg &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_read_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>moal_recv_packet</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = moal_recv_packet &rArr; netif_rx &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_reserve
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_alloc_skb
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_index_to_priv
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_check_tcp_fin
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_put
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_rx
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_trans
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>moal_recv_event</STRONG> (Thumb, 744 bytes, Stack size 32 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = moal_recv_event &rArr; woal_moal_debug_info &rArr; woal_sdio_reg_dbg &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_mod_timer
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_priv
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_scan_done
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rssi_threshold
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_hs
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_disconnect_to_system
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_broadcast_event
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_index_to_priv
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_moal_debug_info
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_inform_bss_from_scan_result
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_cqm_rssi_notify
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>moal_print</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, moal_shim.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>moal_print_netintf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, moal_shim.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>moal_assert</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = moal_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[426]"></a>woal_band_cfg_to_ieee_band</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_domain_info_cmd_fw
</UL>

<P><STRONG><a name="[3c8]"></a>woal_set_rf_channel</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = woal_set_rf_channel &rArr; woal_change_adhoc_chan &rArr; woal_request_scan &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_change_adhoc_chan
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_frequency_to_channel
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_nl80211_iftype_to_mode
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_domain_info_cmd_fw
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_channel
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[428]"></a>woal_set_ewpa_mode</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = woal_set_ewpa_mode &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[429]"></a>woal_set_passphrase</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = woal_set_passphrase &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[421]"></a>woal_inform_bss_from_scan_result</STRONG> (Thumb, 260 bytes, Stack size 88 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = woal_inform_bss_from_scan_result &rArr; cfg80211_inform_bss &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_scan_table
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_channel
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_put_bss
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_inform_bss
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[c3]"></a>woal_cfg80211_set_tx_power</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_set_tx_power &rArr; woal_set_get_tx_power &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_tx_power
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_wiphy_priv
</UL>
<BR>[Address Reference Count : 2]<UL><LI> moal_sta_cfg80211.o(.constdata)
<LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[375]"></a>woal_cfg80211_sta_init_wiphy</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_sta_init_wiphy &rArr; woal_set_get_power_mgmt &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_power_mgmt
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_rts
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_retry
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_frag
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_setup_ht_cap
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_priv
</UL>

<P><STRONG><a name="[37c]"></a>woal_register_sta_cfg80211</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, moal_sta_cfg80211.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_get_fw_info
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_free
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
</UL>

<P><STRONG><a name="[c9]"></a>woal_cfg80211_add_beacon</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, moal_uap_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1196 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_add_beacon &rArr; woal_cfg80211_beacon_config &rArr; woal_set_get_sys_config &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_scan
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_beacon_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>woal_cfg80211_set_beacon</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, moal_uap_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_set_beacon &rArr; woal_cfg80211_mgmt_frame_ie &rArr; woal_cfg80211_custom_ie &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>woal_cfg80211_del_beacon</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, moal_uap_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_del_beacon &rArr; woal_cfg80211_mgmt_frame_ie &rArr; woal_cfg80211_custom_ie &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_change_virtual_intf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>woal_uap_cfg80211_get_station</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, moal_uap_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = woal_uap_cfg80211_get_station &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[376]"></a>woal_cfg80211_uap_init_wiphy</STRONG> (Thumb, 170 bytes, Stack size 864 bytes, moal_uap_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_uap_init_wiphy &rArr; woal_set_get_sys_config &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_sys_config
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_setup_ht_cap
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_priv
</UL>

<P><STRONG><a name="[37d]"></a>woal_register_uap_cfg80211</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, moal_uap_cfg80211.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_get_fw_info
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_free
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
</UL>

<P><STRONG><a name="[3c4]"></a>woal_set_get_sys_config</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_set_get_sys_config &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_wiphy_params
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_uap_init_wiphy
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_ap_cfg
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_mgmt_frame_control
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_beacon_config
</UL>

<P><STRONG><a name="[3c3]"></a>woal_set_sys_config_invalid_data</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = woal_set_sys_config_invalid_data
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_wiphy_params
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_mgmt_frame_control
</UL>

<P><STRONG><a name="[439]"></a>woal_uap_bss_ctrl</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = woal_uap_bss_ctrl &rArr; woal_11h_channel_check_ioctl &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_11h_channel_check_ioctl
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_cac_block
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_del_beacon
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_priv_ioctl
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_ap_cfg
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_flag_ioctl
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_enable_wapi
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_add_beacon
</UL>

<P><STRONG><a name="[44a]"></a>woal_uap_get_bss_param</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = woal_uap_get_bss_param &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_ap_cfg
</UL>

<P><STRONG><a name="[438]"></a>woal_uap_set_11n_status</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, moal_uap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_ap_cfg
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_beacon_config
</UL>

<P><STRONG><a name="[44b]"></a>woal_uap_ap_cfg_parse_data</STRONG> (Thumb, 850 bytes, Stack size 64 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = woal_uap_ap_cfg_parse_data &rArr; woal_atoi &rArr; woal_atox
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_strsep
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atoi
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_ap_cfg
</UL>

<P><STRONG><a name="[44c]"></a>woal_uap_set_ap_cfg</STRONG> (Thumb, 204 bytes, Stack size 848 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1116 + Unknown Stack Size
<LI>Call Chain = woal_uap_set_ap_cfg &rArr; woal_set_get_sys_config &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_sys_config
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ap_cfg_parse_data
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_bss_param
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_11n_status
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_priv_ioctl
</UL>

<P><STRONG><a name="[92]"></a>woal_uap_set_multicast_list</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, moal_uap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>woal_uap_do_ioctl</STRONG> (Thumb, 254 bytes, Stack size 120 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1268 + Unknown Stack Size
<LI>Call Chain = woal_uap_do_ioctl &rArr; woal_uap_ioctl &rArr; woal_uap_mgmt_frame_control &rArr; woal_set_get_sys_config &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_type
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_custom_ie_ioctl
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_priv_ioctl
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_key_ioctl
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_sta_list_ioctl
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_cfg_ioctl
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_power_mode_ioctl
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_radio_ctl
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sta_deauth_ioctl
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_flag_ioctl
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.constdata)
</UL>
<P><STRONG><a name="[454]"></a>woal_uap_get_version</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, moal_uap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89snprintf
</UL>

<P><STRONG><a name="[455]"></a>woal_uap_get_stats</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, moal_uap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[453]"></a>woal_uap_do_priv_ioctl</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, moal_uap_priv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132 + Unknown Stack Size
<LI>Call Chain = woal_uap_do_priv_ioctl &rArr; woal_uap_set_ap_cfg &rArr; woal_set_get_sys_config &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_ap_cfg
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[457]"></a>wlan_11d_parse_domain_info</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_11d_parse_domain_info
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_dnld_countryinfo
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_process_country_info
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_get_channel_list
</UL>

<P><STRONG><a name="[7e]"></a>wlan_is_station</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mlan_11d.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mlan_cfp.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>wlan_11d_is_enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mlan_11d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_connect_state
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_prepare_dnld_domain_info_cmd
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_dnld_countryinfo
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_create_dnld_countryinfo
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_clear_parsedtable
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_get_channel_list
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bgscan_create_channel_list
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_create_channel_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_cfp.o(.text)
</UL>
<P><STRONG><a name="[50b]"></a>wlan_11d_priv_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mlan_11d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_priv
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
</UL>

<P><STRONG><a name="[50f]"></a>wlan_11d_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_11d_init
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_adapter
</UL>

<P><STRONG><a name="[458]"></a>wlan_11d_enable</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = wlan_11d_enable &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_cfg_ioctl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[5a4]"></a>wlan_cmd_802_11d_domain_info</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_cmd_802_11d_domain_info
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5c6]"></a>wlan_ret_802_11d_domain_info</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mlan_11d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5dd]"></a>wlan_11d_chan_2_freq</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_11d_chan_2_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_get_channel_list
</UL>

<P><STRONG><a name="[508]"></a>wlan_11d_set_universaltable</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_11d_set_universaltable
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_bss_role
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_get_hw_spec
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl_band_cfg
</UL>

<P><STRONG><a name="[45a]"></a>wlan_11d_get_scan_type</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_11d_get_scan_type &rArr; wlan_11d_channel_known &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_channel_known
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bgscan_create_channel_list
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_create_channel_list
</UL>

<P><STRONG><a name="[45c]"></a>wlan_11d_clear_parsedtable</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_11d_clear_parsedtable
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_handle_event_chanswann
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_cfg_ioctl
</UL>

<P><STRONG><a name="[45d]"></a>wlan_11d_create_dnld_countryinfo</STRONG> (Thumb, 192 bytes, Stack size 184 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = wlan_11d_create_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_send_domain_info
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_generate_domain_info
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
</UL>

<P><STRONG><a name="[460]"></a>wlan_11d_parse_dnld_countryinfo</STRONG> (Thumb, 208 bytes, Stack size 360 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = wlan_11d_parse_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_domain_info
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_send_domain_info
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_generate_domain_info
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_prepare_dnld_domain_info_cmd
</UL>

<P><STRONG><a name="[461]"></a>wlan_11d_prepare_dnld_domain_info_cmd</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = wlan_11d_prepare_dnld_domain_info_cmd &rArr; wlan_11d_parse_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_dnld_countryinfo
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_copy_chan_power
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_update_chan_pwr_table
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_process_country_info
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process_results
</UL>

<P><STRONG><a name="[464]"></a>wlan_11d_cfg_domain_info</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = wlan_11d_cfg_domain_info &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_send_domain_info
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_set_domain_info
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_region_2_code
</UL>
<BR>[Called By]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_cfg_ioctl
</UL>

<P><STRONG><a name="[468]"></a>wlan_11d_handle_uap_domain_info</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = wlan_11d_handle_uap_domain_info &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_send_domain_info
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_set_domain_info
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_region_2_code
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_domain_info
</UL>

<P><STRONG><a name="[469]"></a>wlan_11h_radar_detect_required</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_cfp_radar_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_issue_radar_detect
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_adhoc_start_channel
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cmd_chan_rpt_req
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_master_active_on_dfs_chan
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_slave_active_on_dfs_chan
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_channel_known
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_snmp_mib_11h
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_11h_channel_check_req
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_bss_ioctl_start
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_channel_check_req
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_bgscan_config
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bgscan_create_channel_list
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_create_channel_list
</UL>

<P><STRONG><a name="[472]"></a>wlan_11h_is_channel_under_nop</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_11h_is_channel_under_nop &rArr; wlan_11h_find_dfs_timestamp &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_find_dfs_timestamp
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_switch_non_dfs_chan
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_adhoc_start_channel
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_11h_channel_check_req
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_bss_ioctl_start
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_channel_check_req
</UL>

<P><STRONG><a name="[625]"></a>wlan_11h_is_master_radar_det_active</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mlan_11h.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_snmp_mib_11h
</UL>

<P><STRONG><a name="[475]"></a>wlan_11h_config_master_radar_det</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_11h_config_master_radar_det
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_dfs_master
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_snmp_mib_11h
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_11h_channel_check_req
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_channel_check_req
</UL>

<P><STRONG><a name="[476]"></a>wlan_11h_config_slave_radar_det</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_11h_config_slave_radar_det &rArr; wlan_11h_is_dfs_slave
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_dfs_slave
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
</UL>

<P><STRONG><a name="[477]"></a>wlan_11h_check_update_radar_det_state</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = wlan_11h_check_update_radar_det_state &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_current_radar_detect_flags
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_count_priv_cond
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_connect_state
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_snmp_mib_11h
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_11h_channel_check_req
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_channel_check_req
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
</UL>

<P><STRONG><a name="[59d]"></a>wlan_11h_is_active</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mlan_11h.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[47a]"></a>wlan_11h_tx_enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_11h_tx_enable &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[47c]"></a>wlan_11h_tx_disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_11h_tx_disable &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[47d]"></a>wlan_11h_activate</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = wlan_11h_activate &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_current_radar_detect_flags
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_snmp_mib_11h
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_11h_channel_check_req
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_channel_check_req
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[510]"></a>wlan_11h_init</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_11h_init
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_adapter
</UL>

<P><STRONG><a name="[47e]"></a>wlan_11h_cleanup</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_11h_cleanup &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_adapter
</UL>

<P><STRONG><a name="[50c]"></a>wlan_11h_priv_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mlan_11h.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_priv
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
</UL>

<P><STRONG><a name="[47f]"></a>wlan_11h_get_adhoc_start_channel</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wlan_11h_get_adhoc_start_channel &rArr; wlan_11h_is_channel_under_nop &rArr; wlan_11h_find_dfs_timestamp &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_channel_under_nop
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_random_num
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_channel_check_req
</UL>

<P><STRONG><a name="[481]"></a>wlan_11h_get_csa_closed_channel</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = wlan_11h_get_csa_closed_channel &rArr; wlan_set_chan_blacklist
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_chan_blacklist
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_channel_list
</UL>

<P><STRONG><a name="[483]"></a>wlan_11h_issue_radar_detect</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = wlan_11h_issue_radar_detect &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_11h_channel_check_req
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_channel_check_req
</UL>

<P><STRONG><a name="[485]"></a>wlan_11h_check_chan_report</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_11h_check_chan_report
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_bss_ioctl_start
</UL>

<P><STRONG><a name="[484]"></a>wlan_11h_process_start</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = wlan_11h_process_start &rArr; wlan_11d_create_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_chan_report
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_activate
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_config_master_radar_det
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_channel_under_nop
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_adhoc
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_create_dnld_countryinfo
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
</UL>

<P><STRONG><a name="[486]"></a>wlan_11h_process_join</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = wlan_11h_process_join &rArr; wlan_11d_parse_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_activate
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_config_slave_radar_det
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_infra_join
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_adhoc
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_dnld_countryinfo
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
</UL>

<P><STRONG><a name="[488]"></a>wlan_11h_cmd_process</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wlan_11h_cmd_process &rArr; wlan_11h_cmd_chan_rpt_req &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cmd_chan_rpt_req
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5c7]"></a>wlan_11h_cmdresp_process</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_11h_cmdresp_process
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[564]"></a>wlan_11h_process_bss_elem</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_11h_process_bss_elem
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interpret_bss_desc_with_ie
</UL>

<P><STRONG><a name="[48a]"></a>wlan_11h_handle_event_chanswann</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = wlan_11h_handle_event_chanswann &rArr; wlan_disconnect &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_chan_blacklist
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_clear_parsedtable
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[48c]"></a>wlan_11h_handle_event_chanrpt_ready</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wlan_11h_handle_event_chanrpt_ready &rArr; wlan_11h_add_dfs_timestamp &rArr; wlan_11h_find_dfs_timestamp &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_add_dfs_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[58a]"></a>wlan_11h_radar_detected_tx_blocked</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mlan_11h.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
</UL>

<P><STRONG><a name="[48d]"></a>wlan_11h_radar_detected_handling</STRONG> (Thumb, 1250 bytes, Stack size 48 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = wlan_11h_radar_detected_handling &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_set_channel
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_get_channel
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_get_beacon_dtim
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_custom_ie_list
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delay_func
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_adhoc_start_channel
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_activate
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_tx_disable
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_tx_enable
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_config_master_radar_det
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_channel_under_nop
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_dfs_master
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_add_dfs_timestamp
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_prepare_custom_ie_chansw
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_random_num
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_callback
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[7c]"></a>wlan_11h_radar_detected_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = wlan_11h_radar_detected_callback &rArr; wlan_11h_radar_detected_handling &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_ret_sys_config
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_mgmt_ie_list
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_11h.o(.text)
</UL>
<P><STRONG><a name="[494]"></a>wlan_11h_dfs_event_preprocessing</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wlan_11h_dfs_event_preprocessing &rArr; wlan_get_privs_by_two_cond
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_privs_by_two_cond
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_event
</UL>

<P><STRONG><a name="[496]"></a>wlan_11h_switch_non_dfs_chan</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wlan_11h_switch_non_dfs_chan &rArr; wlan_11h_is_channel_under_nop &rArr; wlan_11h_find_dfs_timestamp &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_channel_under_nop
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_random_num
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_bss_ioctl_start
</UL>

<P><STRONG><a name="[498]"></a>wlan_send_addba</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = wlan_send_addba &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_delba
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_addba_param
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[499]"></a>wlan_send_delba</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = wlan_send_delba &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_delba_to_entry_in_reorder_tbl
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_delba_to_entry_in_txbastream_tbl
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[49f]"></a>wlan_fill_ht_cap_tlv</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_fill_ht_cap_tlv &rArr; wlan_fill_cap_info
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_fill_cap_info
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_11n_tlv
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
</UL>

<P><STRONG><a name="[506]"></a>wlan_show_dot11ndevcap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mlan_11n.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_get_hw_spec
</UL>

<P><STRONG><a name="[507]"></a>wlan_show_devmcssupport</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mlan_11n.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_get_hw_spec
</UL>

<P><STRONG><a name="[4a1]"></a>wlan_11n_get_txbastream_tbl</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_11n_get_txbastream_tbl &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_delete_bastream_tbl
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cleanup_txbastream_tbl
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_req
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_create_txbastream_tbl
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_bastream_setup
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[4a2]"></a>wlan_11n_create_txbastream_tbl</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wlan_11n_create_txbastream_tbl &rArr; wlan_11n_get_txbastream_tbl &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_txbastream_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_delba
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[4a3]"></a>wlan_ret_11n_delba</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = wlan_ret_11n_delba &rArr; mlan_11n_delete_bastream_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_delete_bastream_tbl
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_create_txbastream_tbl
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_addba
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_txbastream_status
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[4a5]"></a>wlan_ret_11n_addba_req</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = wlan_ret_11n_addba_req &rArr; mlan_11n_delete_bastream_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_ralist_node
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_random_ba_threshold
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_delete_bastream_tbl
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_txbastream_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5a5]"></a>wlan_cmd_recfg_tx_buf</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_cmd_recfg_tx_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5a6]"></a>wlan_cmd_amsdu_aggr_ctrl</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_cmd_amsdu_aggr_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5c8]"></a>wlan_ret_amsdu_aggr_ctrl</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mlan_11n.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5a7]"></a>wlan_cmd_11n_cfg</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_cmd_11n_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5d0]"></a>wlan_ret_11n_cfg</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mlan_11n.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5b6]"></a>wlan_cmd_reject_addba_req</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_cmd_reject_addba_req
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5d5]"></a>wlan_ret_reject_addba_req</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mlan_11n.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5a8]"></a>wlan_cmd_tx_bf_cfg</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_cmd_tx_bf_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5d1]"></a>wlan_ret_tx_bf_cfg</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_ret_tx_bf_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[4a9]"></a>wlan_cmd_append_11n_tlv</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_cmd_append_11n_tlv &rArr; wlan_fill_ht_cap_tlv &rArr; wlan_fill_cap_info
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_band_to_radio_type
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_fill_ht_cap_tlv
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
</UL>

<P><STRONG><a name="[4ab]"></a>wlan_11n_cfg_ioctl</STRONG> (Thumb, 546 bytes, Stack size 48 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = wlan_11n_cfg_ioctl &rArr; wlan_11n_ioctl_delba &rArr; wlan_send_delba_to_entry_in_reorder_tbl &rArr; wlan_send_delba &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_aggr_prio_tbl
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_addba_param
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_htusrcfg
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_delba
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[4af]"></a>wlan_11n_delete_txbastream_tbl_entry</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_11n_delete_txbastream_tbl_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_delete_bastream_tbl
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cleanup_txbastream_tbl
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_deleteall_txbastream_tbl
</UL>

<P><STRONG><a name="[4b0]"></a>wlan_11n_deleteall_txbastream_tbl</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_11n_deleteall_txbastream_tbl &rArr; wlan_11n_delete_txbastream_tbl_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_txbastream_tbl_entry
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_txrx
</UL>

<P><STRONG><a name="[4b1]"></a>wlan_11n_delete_bastream</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = wlan_11n_delete_bastream &rArr; mlan_11n_delete_bastream_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_delete_bastream_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[4b2]"></a>wlan_get_rxreorder_tbl</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_get_rxreorder_tbl &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_debug_info
</UL>

<P><STRONG><a name="[4b3]"></a>wlan_get_txbastream_tbl</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_get_txbastream_tbl &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_debug_info
</UL>

<P><STRONG><a name="[4b4]"></a>wlan_11n_cleanup_txbastream_tbl</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wlan_11n_cleanup_txbastream_tbl &rArr; wlan_11n_get_txbastream_tbl &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_txbastream_tbl_entry
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_txbastream_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[4b5]"></a>wlan_11n_deaggregate_pkt</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, mlan_11n_aggr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_recv_packet
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_packet_complete
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mlan_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_amsdu_pkt
</UL>

<P><STRONG><a name="[4b9]"></a>wlan_11n_aggregate_pkt</STRONG> (Thumb, 824 bytes, Stack size 88 bytes, mlan_11n_aggr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wlan_11n_aggregate_pkt &rArr; wlan_check_last_packet_indication &rArr; wlan_wmm_lists_empty &rArr; util_scalar_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_complete
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_compute_driver_packet_delay
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_host_to_card
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_ralist_valid
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_last_packet_indication
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mlan_buffer
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_form_amsdu_pkt
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[4c7]"></a>wlan_11n_get_rxreorder_tbl</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_11n_get_rxreorder_tbl &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cleanup_reorder_tbl
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_rxba_sync_event
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_resp
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_rxreorder_pkt
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_create_rxreorder_tbl
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_delete_bastream_tbl
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_rx_packet
</UL>

<P><STRONG><a name="[5a0]"></a>wlan_cmd_11n_addba_req</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_cmd_11n_addba_req
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[4ca]"></a>wlan_cmd_11n_addba_rspgen</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = wlan_cmd_11n_addba_rspgen &rArr; wlan_11n_create_rxreorder_tbl &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_create_rxreorder_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5a1]"></a>wlan_cmd_11n_delba</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_cmd_11n_delba
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[4cb]"></a>mlan_11n_rxreorder_pkt</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = mlan_11n_rxreorder_pkt &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_rxreorder_tbl
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_scan_and_dispatch
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt_until_start_win
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_rxba_sync_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_rx_packet
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_rx_packet
</UL>

<P><STRONG><a name="[4a4]"></a>mlan_11n_delete_bastream_tbl</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mlan_11n_delete_bastream_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_rxreorder_tbl
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_rxreorder_tbl_entry
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_txbastream_tbl_entry
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_txbastream_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_bastream
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_req
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_delba
</UL>

<P><STRONG><a name="[4cd]"></a>wlan_ret_11n_addba_resp</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = wlan_ret_11n_addba_resp &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_rxreorder_tbl
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_rxreorder_tbl_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[4ce]"></a>wlan_11n_ba_stream_timeout</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = wlan_11n_ba_stream_timeout &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[4cf]"></a>wlan_11n_cleanup_reorder_tbl</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_rxreorder_tbl_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_txrx
</UL>

<P><STRONG><a name="[4d0]"></a>wlan_11n_rxba_sync_event</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = wlan_11n_rxba_sync_event &rArr; mlan_11n_rxreorder_pkt &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_rxreorder_pkt
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_rxreorder_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[4d1]"></a>wlan_cleanup_reorder_tbl</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = wlan_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_rxreorder_tbl
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_rxreorder_tbl_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[4d2]"></a>wlan_set_rxreorder_tbl_no_drop_flag</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_set_rxreorder_tbl_no_drop_flag &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_rxreorder_tbl
</UL>

<P><STRONG><a name="[4d3]"></a>wlan_update_rxreorder_tbl</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_update_rxreorder_tbl &rArr; wlan_set_rxreorder_tbl_no_drop_flag &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_rxreorder_tbl_no_drop_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_activated_event
</UL>

<P><STRONG><a name="[5fe]"></a>wlan_misc_country_2_cfp_table_code</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_misc_country_2_cfp_table_code
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_country_code
</UL>

<P><STRONG><a name="[4d4]"></a>wlan_index_to_data_rate</STRONG> (Thumb, 118 bytes, Stack size 152 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wlan_index_to_data_rate &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_tx_rate_query
</UL>

<P><STRONG><a name="[552]"></a>wlan_data_rate_to_index</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, mlan_cfp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_set_rate_value
</UL>

<P><STRONG><a name="[4d5]"></a>wlan_get_supported_rates</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_get_supported_rates &rArr; wlan_copy_rates
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_copy_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_active_data_rates
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
</UL>

<P><STRONG><a name="[4d7]"></a>wlan_get_active_data_rates</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wlan_get_active_data_rates &rArr; wlan_get_supported_rates &rArr; wlan_copy_rates
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_supported_rates
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_copy_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_set_rate_value
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_setup_rates_from_bssdesc
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl
</UL>

<P><STRONG><a name="[46a]"></a>wlan_get_txpwr_of_chan_from_cfp</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_get_txpwr_of_chan_from_cfp
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_update_chan_pwr_table
</UL>

<P><STRONG><a name="[4da]"></a>wlan_get_cfp_by_band_and_channel</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_get_cfp_by_band_and_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_cfp_by_band_and_channel
</UL>

<P><STRONG><a name="[4d8]"></a>wlan_find_cfp_by_band_and_channel</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_find_cfp_by_band_and_channel &rArr; wlan_count_priv_cond
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_cfp_by_band_and_channel
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_count_priv_cond
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_channel
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl_band_cfg
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bssid_in_list
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_ssid_in_list
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_ext_scan_result
</UL>

<P><STRONG><a name="[4db]"></a>wlan_find_cfp_by_band_and_freq</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_find_cfp_by_band_and_freq &rArr; wlan_count_priv_cond
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_count_priv_cond
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_channel
</UL>

<P><STRONG><a name="[500]"></a>wlan_is_rate_auto</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mlan_cfp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_tx_rate_cfg
</UL>

<P><STRONG><a name="[501]"></a>wlan_get_rate_index</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_get_rate_index
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_tx_rate_cfg
</UL>

<P><STRONG><a name="[466]"></a>wlan_set_regiontable</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = wlan_set_regiontable &rArr; wlan_cfp_copy_dynamic
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cfp_copy_dynamic
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_region_cfp_table
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_bss_role
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_get_hw_spec
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_handle_uap_domain_info
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_cfg_domain_info
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_country_code
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_cfp_code_cfg
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_region
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl_band_cfg
</UL>

<P><STRONG><a name="[46b]"></a>wlan_get_cfp_radar_detect</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_get_cfp_radar_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>

<P><STRONG><a name="[55d]"></a>wlan_bg_scan_type_is_passive</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_bg_scan_type_is_passive
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_bgscan_config
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bgscan_create_channel_list
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_create_channel_list
</UL>

<P><STRONG><a name="[560]"></a>wlan_is_chan_blacklisted</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_is_chan_blacklisted
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_channel_list
</UL>

<P><STRONG><a name="[482]"></a>wlan_set_chan_blacklist</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_set_chan_blacklist
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_handle_event_chanswann
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_csa_closed_channel
</UL>

<P><STRONG><a name="[4de]"></a>wlan_atox</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_atox
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_isxdigit
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_cfg_data
</UL>

<P><STRONG><a name="[4e8]"></a>wlan_release_cmd_lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_pending_ioctl
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_all_pending_cmd
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_hs_cfg
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_exec_next_cmd
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_cmd_to_fw
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_event_ext_scan_report
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
</UL>

<P><STRONG><a name="[4e7]"></a>wlan_request_cmd_lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_pending_ioctl
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_all_pending_cmd
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_hs_cfg
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_exec_next_cmd
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_cmd_to_fw
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_event_ext_scan_report
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
</UL>

<P><STRONG><a name="[4e3]"></a>wlan_insert_cmd_to_free_q</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = wlan_insert_cmd_to_free_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_enqueue_list_tail
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_pending_ioctl
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_all_pending_cmd
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_hs_cfg
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_cmd_buffer
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_cmd_to_fw
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[47b]"></a>wlan_recv_event</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_802dot11_mgmt_pkt
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_meas_cmdresp_process
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_connect_state
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_2040_coex_event
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_wakeup_event
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_timeout_func
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_activated_event
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_addba_param
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_tx_disable
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_tx_enable
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_wmmac_host_event
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_sta_assoc_event
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_ioctl
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_get_status
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_event_ext_scan_report
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
</UL>

<P><STRONG><a name="[4e9]"></a>wlan_host_sleep_activated_event</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_host_sleep_activated_event &rArr; wlan_update_rxreorder_tbl &rArr; wlan_set_rxreorder_tbl_no_drop_flag &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_rxreorder_tbl
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_sleep_confirm_resp
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_hs_cfg
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_exec_next_cmd
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_sleep_confirm_cmd
</UL>

<P><STRONG><a name="[4ec]"></a>wlan_alloc_cmd_buffer</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = wlan_alloc_cmd_buffer &rArr; wlan_insert_cmd_to_free_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mlan_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_allocate_adapter
</UL>

<P><STRONG><a name="[4ed]"></a>wlan_free_cmd_buffer</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_free_cmd_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_adapter
</UL>

<P><STRONG><a name="[4ee]"></a>wlan_process_event</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wlan_process_event &rArr; wlan_11h_dfs_event_preprocessing &rArr; wlan_get_privs_by_two_cond
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv_by_id
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_dfs_event_preprocessing
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
</UL>

<P><STRONG><a name="[4f0]"></a>wlan_insert_cmd_to_pending_q</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_enqueue_list_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_event_ext_scan_report
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
</UL>

<P><STRONG><a name="[459]"></a>wlan_prepare_cmd</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_queue_scan_cmd
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_pending_q
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_cmd_node
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_hs_wakeup_reason
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_otp_user_data
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_rx_mgmt_ind
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_ver_ext
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl_mem_rw
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl_read_eeprom
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl_reg_rw
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_bss_role
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl_hscfg
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_init_shutdown
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_host_cmd
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_get_rate_value
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_set_rate_index
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_set_rate_value
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_meas_util_send_req
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_connect_state
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adhoc_join
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adhoc_start
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_associate
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_sdio_gpio_int
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adapter_init_cmd
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_tx_rate_cfg
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ba_stream_timeout
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_delba
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_addba
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_set_channel
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_get_channel
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_get_beacon_dtim
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_custom_ie_list
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_issue_radar_detect
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_activate
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_enable
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_send_domain_info
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_pm_ioctl_deepsleep
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_pm_ioctl_mode
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_bss_ioctl_reset
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_set_wapi_ie
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_bss_ioctl_start
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cfg_ioctl
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_mef_cfg
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ipaddr_auto_arp_resp
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_subscribe_evt
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_thermal
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_mac_control
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl_get_power
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_warm_reset
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_esupp_mode
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_passphrase
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_encrypt_key
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_query_passphrase
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_mode
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_set_multicast_list
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_snmp_mib_ioctl
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_ioctl
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_set_wpa_key
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_set_wep_key
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl_ps_mode
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl_set_power_ext
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl_set_power
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_ioctl
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_enable_aes_key
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_status_change
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_init_cmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_init_cmd
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_channel_list
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_get_data_rate
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_cfg
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl_ant_cfg
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl_radio_ctl
</UL>

<P><STRONG><a name="[4f2]"></a>wlan_exec_next_cmd</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = wlan_exec_next_cmd &rArr; wlan_dnld_cmd_to_fw &rArr; wlan_sdio_host_to_card &rArr; wlan_write_data_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_activated_event
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_cmd_to_fw
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
</UL>

<P><STRONG><a name="[4f3]"></a>wlan_ret_802_11_hs_cfg</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = wlan_ret_802_11_hs_cfg &rArr; wlan_host_sleep_activated_event &rArr; wlan_update_rxreorder_tbl &rArr; wlan_set_rxreorder_tbl_no_drop_flag &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_activated_event
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[4f4]"></a>wlan_process_cmdresp</STRONG> (Thumb, 578 bytes, Stack size 40 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = wlan_process_cmdresp &rArr; wlan_ret_802_11_hs_cfg &rArr; wlan_host_sleep_activated_event &rArr; wlan_update_rxreorder_tbl &rArr; wlan_set_rxreorder_tbl_no_drop_flag &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_fw_complete
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_hs_cfg
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
</UL>

<P><STRONG><a name="[80]"></a>wlan_cmd_timeout_func</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_cmd_timeout_func &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_fw_complete
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_init.o(.text)
</UL>
<P><STRONG><a name="[4f6]"></a>wlan_flush_scan_queue</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = wlan_flush_scan_queue &rArr; wlan_insert_cmd_to_free_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_pending_ioctl
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_all_pending_cmd
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_ioctl
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_event_ext_scan_report
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
</UL>

<P><STRONG><a name="[4f7]"></a>wlan_cancel_all_pending_cmd</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = wlan_cancel_all_pending_cmd &rArr; wlan_flush_scan_queue &rArr; wlan_insert_cmd_to_free_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_shutdown_fw
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_adapter
</UL>

<P><STRONG><a name="[4f8]"></a>wlan_cancel_pending_ioctl</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = wlan_cancel_pending_ioctl &rArr; wlan_flush_scan_queue &rArr; wlan_insert_cmd_to_free_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_ioctl
</UL>

<P><STRONG><a name="[5c3]"></a>wlan_ret_ver_ext</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_ret_ver_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5c4]"></a>wlan_ret_rx_mgmt_ind</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[4f9]"></a>wlan_check_ps_cond</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wlan_check_ps_cond &rArr; wlan_dnld_sleep_confirm_cmd &rArr; wlan_host_sleep_activated_event &rArr; wlan_update_rxreorder_tbl &rArr; wlan_set_rxreorder_tbl_no_drop_flag &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_sleep_confirm_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[4fa]"></a>wlan_host_sleep_wakeup_event</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mlan_cmdevt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>

<P><STRONG><a name="[4fb]"></a>wlan_process_hs_config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_process_hs_config &rArr; wlan_pm_wakeup_card
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_wakeup_card
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
</UL>

<P><STRONG><a name="[4fd]"></a>wlan_process_sleep_confirm_resp</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wlan_process_sleep_confirm_resp &rArr; wlan_host_sleep_activated_event &rArr; wlan_update_rxreorder_tbl &rArr; wlan_set_rxreorder_tbl_no_drop_flag &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_activated_event
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_decode_rx_packet
</UL>

<P><STRONG><a name="[599]"></a>wlan_cmd_enh_power_mode</STRONG> (Thumb, 234 bytes, Stack size 20 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_cmd_enh_power_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5be]"></a>wlan_ret_enh_power_mode</STRONG> (Thumb, 298 bytes, Stack size 20 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_ret_enh_power_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[4fe]"></a>wlan_ret_802_11_tx_rate_query</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wlan_ret_802_11_tx_rate_query &rArr; wlan_index_to_data_rate &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_index_to_data_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[596]"></a>wlan_cmd_tx_rate_cfg</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_cmd_tx_rate_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[4ff]"></a>wlan_ret_tx_rate_cfg</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = wlan_ret_tx_rate_cfg &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_rate_index
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_rate_auto
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[502]"></a>wlan_adapter_init_cmd</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = wlan_adapter_init_cmd &rArr; wlan_set_sdio_gpio_int &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_sdio_gpio_int
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_init_cmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_init_cmd
</UL>

<P><STRONG><a name="[595]"></a>wlan_cmd_get_hw_spec</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_cmd_get_hw_spec
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[504]"></a>wlan_cmd_cfg_data</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wlan_cmd_cfg_data &rArr; wlan_atox
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_atox
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_isxdigit
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5ba]"></a>wlan_ret_cfg_data</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[505]"></a>wlan_ret_get_hw_spec</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = wlan_ret_get_hw_spec &rArr; wlan_set_regiontable &rArr; wlan_cfp_copy_dynamic
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_show_devmcssupport
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_show_dot11ndevcap
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_set_universaltable
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[59f]"></a>wlan_cmd_802_11_radio_control</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_cmd_802_11_radio_control
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5c1]"></a>wlan_ret_802_11_radio_control</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5b5]"></a>wlan_cmd_hs_wakeup_reason</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5d4]"></a>wlan_ret_hs_wakeup_reason</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[597]"></a>wlan_cmd_802_11_rf_antenna</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_cmd_802_11_rf_antenna
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5c2]"></a>wlan_ret_802_11_rf_antenna</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_ret_802_11_rf_antenna
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5b0]"></a>wlan_cmd_reg_access</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_cmd_reg_access
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5d2]"></a>wlan_ret_reg_access</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_ret_reg_access
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5b1]"></a>wlan_cmd_mem_access</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_cmd_mem_access
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5d3]"></a>wlan_ret_mem_access</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[509]"></a>wlan_allocate_adapter</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = wlan_allocate_adapter &rArr; wlan_alloc_cmd_buffer &rArr; wlan_insert_cmd_to_free_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_cmd_buffer
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mlan_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_register
</UL>

<P><STRONG><a name="[50a]"></a>wlan_init_priv</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = wlan_init_priv &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_bsspriotbl
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_priv_init
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_priv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_bss_role
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_warm_reset
</UL>

<P><STRONG><a name="[50e]"></a>wlan_init_adapter</STRONG> (Thumb, 644 bytes, Stack size 32 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = wlan_init_adapter &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_init
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_init
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_init
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_warm_reset
</UL>

<P><STRONG><a name="[512]"></a>wlan_init_lock_list</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_init_lock_list &rArr; util_scalar_init
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_init
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_init_list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_register
</UL>

<P><STRONG><a name="[515]"></a>wlan_free_lock_list</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_free_lock_list
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_free
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_free_list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_unregister
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_register
</UL>

<P><STRONG><a name="[583]"></a>wlan_init_timer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_init_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_register
</UL>

<P><STRONG><a name="[584]"></a>wlan_free_timer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mlan_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_unregister
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_register
</UL>

<P><STRONG><a name="[518]"></a>wlan_init_fw</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, mlan_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_adapter
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_priv
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_init_fw
</UL>

<P><STRONG><a name="[51a]"></a>wlan_free_adapter</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = wlan_free_adapter &rArr; wlan_cancel_all_pending_cmd &rArr; wlan_flush_scan_queue &rArr; wlan_insert_cmd_to_free_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_all_pending_cmd
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_cmd_buffer
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_unregister
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_register
</UL>

<P><STRONG><a name="[51b]"></a>wlan_free_priv</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = wlan_free_priv &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_curr_bcn
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delete_station_list
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_txrx
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delete_bsspriotbl
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_shutdown_fw
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_bss_role
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_warm_reset
</UL>

<P><STRONG><a name="[4f5]"></a>wlan_init_fw_complete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mlan_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_timeout_func
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp
</UL>

<P><STRONG><a name="[587]"></a>wlan_shutdown_fw_complete</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mlan_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_shutdown_fw
</UL>

<P><STRONG><a name="[4aa]"></a>wlan_band_to_radio_type</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mlan_join.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_11n_tlv
</UL>

<P><STRONG><a name="[520]"></a>wlan_cmd_802_11_associate</STRONG> (Thumb, 1054 bytes, Stack size 88 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = wlan_cmd_802_11_associate &rArr; wlan_11h_process_join &rArr; wlan_11d_parse_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_process_association_req
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_wapi_ie
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_setup_rates_from_bssdesc
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_tsf_tlv
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_generic_ie
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_band_to_radio_type
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_11n_tlv
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_dnld_countryinfo
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_create_dnld_countryinfo
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[526]"></a>wlan_ret_802_11_associate</STRONG> (Thumb, 654 bytes, Stack size 152 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = wlan_ret_802_11_associate &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_queues
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_save_curr_bcn
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_add
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_2040_coex_event
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[52b]"></a>wlan_cmd_802_11_ad_hoc_start</STRONG> (Thumb, 1120 bytes, Stack size 88 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = wlan_cmd_802_11_ad_hoc_start &rArr; wlan_11h_process_start &rArr; wlan_11d_create_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_cfp_by_band_and_channel
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_active_data_rates
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_band_to_radio_type
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_fill_ht_cap_tlv
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_create_dnld_countryinfo
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[52c]"></a>wlan_cmd_802_11_ad_hoc_join</STRONG> (Thumb, 826 bytes, Stack size 80 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = wlan_cmd_802_11_ad_hoc_join &rArr; wlan_11h_process_join &rArr; wlan_11d_parse_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_band_to_radio_type
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_11n_tlv
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_dnld_countryinfo
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_create_dnld_countryinfo
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[52d]"></a>wlan_ret_802_11_ad_hoc</STRONG> (Thumb, 236 bytes, Stack size 136 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = wlan_ret_802_11_ad_hoc &rArr; wlan_11h_radar_detected_callback &rArr; wlan_11h_radar_detected_handling &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_save_curr_bcn
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_connect_state
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[52f]"></a>wlan_associate</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = wlan_associate &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
</UL>

<P><STRONG><a name="[530]"></a>wlan_adhoc_start</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = wlan_adhoc_start &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
</UL>

<P><STRONG><a name="[531]"></a>wlan_adhoc_join</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = wlan_adhoc_join &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ssid_cmp
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
</UL>

<P><STRONG><a name="[48b]"></a>wlan_disconnect</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = wlan_disconnect &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_handle_event_chanswann
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_mode
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
</UL>

<P><STRONG><a name="[535]"></a>wlan_meas_util_send_req</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mlan_meas.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>

<P><STRONG><a name="[5b3]"></a>wlan_meas_cmd_process</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mlan_meas.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_meas_cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[536]"></a>wlan_meas_cmdresp_process</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, mlan_meas.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_meas_cmdresp_process &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[539]"></a>wlan_misc_ioctl_host_cmd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = wlan_misc_ioctl_host_cmd &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[53a]"></a>wlan_misc_ioctl_init_shutdown</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = wlan_misc_ioctl_init_shutdown &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[53b]"></a>wlan_get_info_debug_info</STRONG> (Thumb, 976 bytes, Stack size 48 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wlan_get_info_debug_info &rArr; wlan_get_txbastream_tbl &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_txbastream_tbl
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_rxreorder_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_ioctl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[4fc]"></a>wlan_pm_wakeup_card</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_pm_wakeup_card
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_hs_config
</UL>

<P><STRONG><a name="[77f]"></a>wlan_pm_reset_card</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mlan_misc.o(.text), UNUSED)

<P><STRONG><a name="[53c]"></a>wlan_pm_ioctl_hscfg</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = wlan_pm_ioctl_hscfg &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[4b6]"></a>wlan_alloc_mlan_buffer</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_alloc_mlan_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_allocate_adapter
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_cmd_buffer
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_cmd_node
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_uap_rx_packet
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_recv_packet
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_aggregate_pkt
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_deaggregate_pkt
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_null_packet
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_int_status
</UL>

<P><STRONG><a name="[4e4]"></a>wlan_free_mlan_buffer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mlan_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_adapter
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_event
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_cmd_buffer
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_uap_rx_packet
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_packet
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_complete
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_packet_complete
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_null_packet
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_rx_packet
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_rx_packet
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_int_status
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_decode_rx_packet
</UL>

<P><STRONG><a name="[491]"></a>wlan_delay_func</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_delay_func
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_fw_status
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prog_fw_w_helper
</UL>

<P><STRONG><a name="[53d]"></a>wlan_bss_ioctl_bss_role</STRONG> (Thumb, 290 bytes, Stack size 176 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = wlan_bss_ioctl_bss_role &rArr; wlan_free_priv &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_priv
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_priv
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_set_universaltable
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[490]"></a>wlan_misc_ioctl_custom_ie_list</STRONG> (Thumb, 1014 bytes, Stack size 72 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_custom_ioctl_auto_delete
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_custom_ioctl_get_autoidx
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_custom_ie_index_unused
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[53f]"></a>wlan_reg_mem_ioctl_reg_rw</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = wlan_reg_mem_ioctl_reg_rw &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[540]"></a>wlan_reg_mem_ioctl_read_eeprom</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = wlan_reg_mem_ioctl_read_eeprom &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[541]"></a>wlan_reg_mem_ioctl_mem_rw</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = wlan_reg_mem_ioctl_mem_rw &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[542]"></a>wlan_is_station_list_empty</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mlan_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>

<P><STRONG><a name="[4a6]"></a>wlan_get_station_entry</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delete_station_entry
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_station_entry
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_add
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_uap_rx_packet
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_create_rxreorder_tbl
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_recv_packet
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_req
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_11n_enabled
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_amsdu_allowed
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_unicast_packet
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_rx_packet
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[544]"></a>wlan_add_station_entry</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_add_station_entry &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_cmd_key_material
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[545]"></a>wlan_delete_station_entry</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wlan_delete_station_entry &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[51f]"></a>wlan_delete_station_list</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_delete_station_list &rArr; util_unlink_list
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_priv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[547]"></a>wlan_get_info_ver_ext</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = wlan_get_info_ver_ext &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_ioctl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[548]"></a>wlan_reg_rx_mgmt_ind</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = wlan_reg_rx_mgmt_ind &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[549]"></a>wlan_process_802dot11_mgmt_pkt</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_process_802dot11_mgmt_pkt &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_rx_packet
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_rx_packet
</UL>

<P><STRONG><a name="[54a]"></a>wlan_misc_otp_user_data</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = wlan_misc_otp_user_data &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[620]"></a>wlan_is_wmm_ie_present</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_is_wmm_ie_present
</UL>
<BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_sta_capability
</UL>

<P><STRONG><a name="[621]"></a>wlan_get_specific_ie</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_get_specific_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_sta_capability
</UL>

<P><STRONG><a name="[54b]"></a>wlan_get_pm_info</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_get_pm_info &rArr; wlan_wmm_lists_empty &rArr; util_scalar_read
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_lists_empty
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bypass_tx_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[54e]"></a>wlan_get_hs_wakeup_reason</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = wlan_get_hs_wakeup_reason &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[54f]"></a>wlan_radio_ioctl_radio_ctl</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = wlan_radio_ioctl_radio_ctl &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[550]"></a>wlan_radio_ioctl_ant_cfg</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = wlan_radio_ioctl_ant_cfg &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[554]"></a>wlan_rate_ioctl_cfg</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = wlan_rate_ioctl_cfg &rArr; wlan_rate_ioctl_set_rate_value &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_get_rate_value
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_set_rate_index
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_set_rate_value
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[556]"></a>wlan_rate_ioctl_get_data_rate</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = wlan_rate_ioctl_get_data_rate &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[602]"></a>wlan_misc_ioctl_txcontrol</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mlan_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[55a]"></a>wlan_is_network_compatible</STRONG> (Thumb, 542 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_is_network_compatible &rArr; is_wpa_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_wpa_oui_present
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_rsn_oui_present
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bssid_in_list
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_ssid_in_list
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_best_network_in_list
</UL>

<P><STRONG><a name="[528]"></a>wlan_save_curr_bcn</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_save_curr_bcn
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process_results
</UL>

<P><STRONG><a name="[532]"></a>wlan_ssid_cmp</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_ssid_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adhoc_join
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_ssid_in_list
</UL>

<P><STRONG><a name="[567]"></a>wlan_find_ssid_in_list</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wlan_find_ssid_in_list &rArr; wlan_is_network_compatible &rArr; is_wpa_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ssid_cmp
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_cfp_by_band_and_channel
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_network_compatible
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_band_compatible
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_bss_info
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bss
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_specific_ssid
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process_results
</UL>

<P><STRONG><a name="[605]"></a>wlan_flush_scan_table</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_flush_scan_table
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_ioctl
</UL>

<P><STRONG><a name="[56a]"></a>wlan_scan_networks</STRONG> (Thumb, 352 bytes, Stack size 88 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = wlan_scan_networks &rArr; wlan_scan_setup_scan_config &rArr; wlan_scan_create_channel_list &rArr; wlan_11d_get_scan_type &rArr; wlan_11d_channel_known &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_pending_q
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_channel_list
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_dequeue_list
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_ioctl
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_specific_ssid
</UL>

<P><STRONG><a name="[59b]"></a>wlan_cmd_802_11_scan</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_cmd_802_11_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[56d]"></a>wlan_ret_802_11_scan</STRONG> (Thumb, 716 bytes, Stack size 128 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = wlan_ret_802_11_scan &rArr; wlan_scan_process_results &rArr; wlan_11d_prepare_dnld_domain_info_cmd &rArr; wlan_11d_parse_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_pending_q
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_cfp_by_band_and_channel
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_user_scan_result
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_type_to_band
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process_results
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan_store_beacon
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interpret_bss_desc_with_ie
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan_get_tlv_ptrs
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_dequeue_list
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_bgscan_query
</UL>

<P><STRONG><a name="[5af]"></a>wlan_cmd_802_11_scan_ext</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_cmd_802_11_scan_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5bb]"></a>wlan_ret_802_11_scan_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mlan_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[571]"></a>wlan_handle_event_ext_scan_report</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, mlan_scan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_pending_q
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_ext_scan_result
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process_results
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_dequeue_list
</UL>

<P><STRONG><a name="[59c]"></a>wlan_cmd_802_11_bg_scan_query</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mlan_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[573]"></a>wlan_cmd_bgscan_config</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wlan_cmd_bgscan_config &rArr; wlan_bgscan_create_channel_list &rArr; wlan_11d_get_scan_type &rArr; wlan_11d_channel_known &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bg_scan_type_is_passive
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_type_to_band
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_band_compatible
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_strlen
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bgscan_create_channel_list
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5bc]"></a>wlan_ret_bgscan_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mlan_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[574]"></a>wlan_ret_802_11_bgscan_query</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = wlan_ret_802_11_bgscan_query &rArr; wlan_ret_802_11_scan &rArr; wlan_scan_process_results &rArr; wlan_11d_prepare_dnld_domain_info_cmd &rArr; wlan_11d_parse_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[575]"></a>wlan_find_bssid_in_list</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wlan_find_bssid_in_list &rArr; wlan_is_network_compatible &rArr; is_wpa_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_cfp_by_band_and_channel
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_network_compatible
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_band_compatible
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_passphrase
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_query_passphrase
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bss
</UL>

<P><STRONG><a name="[4f1]"></a>wlan_queue_scan_cmd</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_queue_scan_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>

<P><STRONG><a name="[576]"></a>wlan_find_best_network</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wlan_find_best_network &rArr; wlan_find_best_network_in_list &rArr; wlan_is_network_compatible &rArr; is_wpa_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_best_network_in_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bss
</UL>

<P><STRONG><a name="[578]"></a>wlan_scan_specific_ssid</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = wlan_scan_specific_ssid &rArr; wlan_scan_networks &rArr; wlan_scan_setup_scan_config &rArr; wlan_scan_create_channel_list &rArr; wlan_11d_get_scan_type &rArr; wlan_11d_channel_known &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_ssid_in_list
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_delete_table_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_ioctl
</UL>

<P><STRONG><a name="[51e]"></a>wlan_free_curr_bcn</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_free_curr_bcn
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_priv
</UL>

<P><STRONG><a name="[585]"></a>wlan_check_winner_status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mlan_sdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_dnld_fw
</UL>

<P><STRONG><a name="[57d]"></a>wlan_check_fw_status</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, mlan_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delay_func
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_dnld_fw
</UL>

<P><STRONG><a name="[57e]"></a>wlan_dnld_fw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mlan_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prog_fw_w_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_dnld_fw
</UL>

<P><STRONG><a name="[57f]"></a>wlan_sdio_probe</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_sdio_probe &rArr; wlan_sdio_init_ioport
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_init_ioport
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_register
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_dnld_fw
</UL>

<P><STRONG><a name="[780]"></a>read_int_status</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mlan_sdio.o(.text), UNUSED)

<P><STRONG><a name="[592]"></a>wlan_interrupt</STRONG> (Thumb, 116 bytes, Stack size 88 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wlan_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_interrupt
</UL>

<P><STRONG><a name="[586]"></a>wlan_enable_host_int</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mlan_sdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_dnld_fw
</UL>

<P><STRONG><a name="[581]"></a>wlan_process_int_status</STRONG> (Thumb, 572 bytes, Stack size 48 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = wlan_process_int_status &rArr; wlan_decode_rx_packet &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mlan_buffer
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_decode_rx_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
</UL>

<P><STRONG><a name="[4c0]"></a>wlan_sdio_host_to_card</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_sdio_host_to_card &rArr; wlan_write_data_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_sleep_confirm_cmd
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_cmd_to_fw
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_aggregate_pkt
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_processed_packet
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_tx
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_null_packet
</UL>

<P><STRONG><a name="[503]"></a>wlan_set_sdio_gpio_int</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = wlan_set_sdio_gpio_int &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adapter_init_cmd
</UL>

<P><STRONG><a name="[5b2]"></a>wlan_cmd_sdio_gpio_int</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_cmd_sdio_gpio_int
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[36e]"></a>mlan_register</STRONG> (Thumb, 844 bytes, Stack size 48 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mlan_register &rArr; wlan_free_adapter &rArr; wlan_cancel_all_pending_cmd &rArr; wlan_flush_scan_queue &rArr; wlan_insert_cmd_to_free_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_adapter
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_timer
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_timer
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_lock_list
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_lock_list
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_allocate_adapter
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_probe
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
</UL>

<P><STRONG><a name="[370]"></a>mlan_unregister</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = mlan_unregister &rArr; wlan_free_adapter &rArr; wlan_cancel_all_pending_cmd &rArr; wlan_flush_scan_queue &rArr; wlan_insert_cmd_to_free_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_adapter
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_timer
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_lock_list
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_moal_handle
</UL>

<P><STRONG><a name="[386]"></a>mlan_dnld_fw</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, mlan_shim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_enable_host_int
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_probe
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_fw
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_fw_status
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_winner_status
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw_dpc
</UL>

<P><STRONG><a name="[387]"></a>mlan_set_init_param</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mlan_shim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw_dpc
</UL>

<P><STRONG><a name="[388]"></a>mlan_init_fw</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mlan_shim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw_dpc
</UL>

<P><STRONG><a name="[3b7]"></a>mlan_shutdown_fw</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = mlan_shutdown_fw &rArr; wlan_free_priv &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_shutdown_fw_complete
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_priv
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_all_pending_cmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[3b0]"></a>mlan_main_process</STRONG> (Thumb, 736 bytes, Stack size 24 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = mlan_main_process &rArr; mlan_shutdown_fw &rArr; wlan_free_priv &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_shutdown_fw
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_wakeup_card
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_fw_complete
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_hs_config
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_ps_cond
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_exec_next_cmd
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_event
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_activated_event
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_tx_blocked
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_process_tx
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_null_packet
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_bypass_tx
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_int_status
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_lists_empty
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bypass_tx_list_empty
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_main_work_queue
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
</UL>

<P><STRONG><a name="[398]"></a>mlan_send_packet</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mlan_send_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_buf_bypass_txqueue
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_host_packet
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hard_start_xmit
</UL>

<P><STRONG><a name="[3cd]"></a>mlan_ioctl</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = mlan_ioctl &rArr; wlan_cancel_pending_ioctl &rArr; wlan_flush_scan_queue &rArr; wlan_insert_cmd_to_free_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_pending_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
</UL>

<P><STRONG><a name="[590]"></a>mlan_recv_packet_complete</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mlan_shim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_packet_complete
</UL>

<P><STRONG><a name="[38f]"></a>mlan_select_wmm_queue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mlan_shim.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_select_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_select_queue
</UL>

<P><STRONG><a name="[3af]"></a>mlan_interrupt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mlan_interrupt &rArr; wlan_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_main_work_queue
</UL>

<P><STRONG><a name="[d2]"></a>wlan_ops_sta_prepare_cmd</STRONG> (Thumb, 1568 bytes, Stack size 56 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = wlan_ops_sta_prepare_cmd &rArr; wlan_cmd_802_11_associate &rArr; wlan_11h_process_join &rArr; wlan_11d_parse_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_meas_cmd_process
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_mem_access
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_reg_access
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_rf_antenna
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_hs_wakeup_reason
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_radio_control
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_cfg_data
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_get_hw_spec
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_tx_rate_cfg
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_enh_power_mode
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_11n_delba
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_11n_addba_rspgen
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_11n_addba_req
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_tx_bf_cfg
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_reject_addba_req
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_11n_cfg
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_amsdu_aggr_ctrl
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_recfg_tx_buf
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cmd_process
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_activate
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_active
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11d_domain_info
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_ts_status
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_queue_stats
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_queue_config
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_delts_req
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_addts_req
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_mgmt_ie_list
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_supplicant_profile
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_hs_cfg
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_tx_power_cfg
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_subscribe_event
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_supplicant_pmk
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_key_material
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_snmp_mib
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_sdio_gpio_int
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_bgscan_config
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_bg_scan_query
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_scan_ext
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>wlan_ops_sta_init_cmd</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = wlan_ops_sta_init_cmd &rArr; wlan_adapter_init_cmd &rArr; wlan_set_sdio_gpio_int &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adapter_init_cmd
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>wlan_ops_sta_process_cmdresp</STRONG> (Thumb, 1756 bytes, Stack size 24 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = wlan_ops_sta_process_cmdresp &rArr; wlan_ret_802_11_ad_hoc &rArr; wlan_11h_radar_detected_callback &rArr; wlan_11h_radar_detected_handling &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_meas_cmdresp_process
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_connect_state
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_mem_access
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_reg_access
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_rf_antenna
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_hs_wakeup_reason
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_radio_control
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_get_hw_spec
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_cfg_data
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_tx_rate_cfg
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_tx_rate_query
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_enh_power_mode
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_rx_mgmt_ind
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_ver_ext
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_hs_cfg
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_resp
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_tx_bf_cfg
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_reject_addba_req
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_cfg
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_amsdu_aggr_ctrl
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_req
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_delba
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_callback
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cmdresp_process
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11d_domain_info
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_ts_status
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_queue_stats
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_queue_config
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_get_status
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_delts_req
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_addts_req
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_ibss_coalescing_status
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_snmp_mib
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_rssi_info
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_mgmt_ie_list
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_supplicant_pmk
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_key_material
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_tx_power_cfg
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_bgscan_query
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_bgscan_config
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan_ext
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[52e]"></a>wlan_reset_connect_state</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, mlan_sta_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = wlan_reset_connect_state &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_txrx
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_disconnect_event
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[52a]"></a>wlan_2040_coex_event</STRONG> (Thumb, 76 bytes, Stack size 128 bytes, mlan_sta_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wlan_2040_coex_event &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
</UL>

<P><STRONG><a name="[d5]"></a>wlan_ops_sta_process_event</STRONG> (Thumb, 1062 bytes, Stack size 152 bytes, mlan_sta_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = wlan_ops_sta_process_event &rArr; wlan_11h_radar_detected_handling &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_txrx
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_ps_cond
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_rxba_sync_event
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ba_stream_timeout
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_last_packet_indication
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_bastream
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_handle_event_chanrpt_ready
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_handle_event_chanswann
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_tx_disable
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_tx_enable
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_status_change
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_disconnect_event
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_get_status
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_null_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[5b8]"></a>wlan_find_bss</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wlan_find_bss &rArr; wlan_find_best_network &rArr; wlan_find_best_network_in_list &rArr; wlan_is_network_compatible &rArr; is_wpa_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_best_network
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bssid_in_list
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_ssid_in_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_find_bss
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_supplicant_pmk
</UL>

<P><STRONG><a name="[5e0]"></a>wlan_bss_ioctl_find_bss</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = wlan_bss_ioctl_find_bss &rArr; wlan_query_passphrase &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_query_passphrase
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bss
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
</UL>

<P><STRONG><a name="[5f5]"></a>wlan_misc_ioctl_mac_control</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = wlan_misc_ioctl_mac_control &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[5f6]"></a>wlan_misc_ioctl_thermal</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = wlan_misc_ioctl_thermal &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[5f7]"></a>wlan_misc_ioctl_subscribe_evt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = wlan_misc_ioctl_subscribe_evt &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[5fb]"></a>wlan_ipaddr_arp_filter</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_ipaddr_arp_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_ipaddr_cfg
</UL>

<P><STRONG><a name="[5f8]"></a>wlan_ipaddr_auto_arp_resp</STRONG> (Thumb, 218 bytes, Stack size 112 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = wlan_ipaddr_auto_arp_resp &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_ipaddr_cfg
</UL>

<P><STRONG><a name="[5f9]"></a>wlan_misc_ioctl_mef_cfg</STRONG> (Thumb, 256 bytes, Stack size 104 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = wlan_misc_ioctl_mef_cfg &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[5fa]"></a>wlan_misc_ioctl_ipaddr_cfg</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = wlan_misc_ioctl_ipaddr_cfg &rArr; wlan_ipaddr_auto_arp_resp &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ipaddr_auto_arp_resp
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ipaddr_arp_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[5fc]"></a>wlan_misc_ioctl_cfp_code_cfg</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = wlan_misc_ioctl_cfp_code_cfg &rArr; wlan_set_regiontable &rArr; wlan_cfp_copy_dynamic
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[5fd]"></a>wlan_misc_ioctl_country_code</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = wlan_misc_ioctl_country_code &rArr; wlan_set_regiontable &rArr; wlan_cfp_copy_dynamic
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_country_2_cfp_table_code
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[781]"></a>wlan_set_ewpa_mode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mlan_sta_ioctl.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>wlan_ops_sta_ioctl</STRONG> (Thumb, 440 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = wlan_ops_sta_ioctl &rArr; wlan_misc_cfg_ioctl &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl_mem_rw
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl_read_eeprom
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl_reg_rw
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cfg_ioctl
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_channel_check_req
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_cfg_ioctl
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_snmp_mib_ioctl
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_ioctl
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_cfg_ioctl
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl_band_cfg
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_ioctl
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl_ant_cfg
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl_radio_ctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[4c4]"></a>wlan_process_rx_packet</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, mlan_sta_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_process_rx_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_rx_packet
</UL>

<P><STRONG><a name="[d4]"></a>wlan_ops_sta_process_rx_packet</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, mlan_sta_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = wlan_ops_sta_process_rx_packet &rArr; mlan_11n_rxreorder_pkt &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_802dot11_mgmt_pkt
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_packet
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_rxreorder_pkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[4bf]"></a>wlan_check_last_packet_indication</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, mlan_sta_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wlan_check_last_packet_indication &rArr; wlan_wmm_lists_empty &rArr; util_scalar_read
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_lists_empty
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bypass_tx_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_aggregate_pkt
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_txpd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[d6]"></a>wlan_ops_sta_process_txpd</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, mlan_sta_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wlan_ops_sta_process_txpd &rArr; wlan_check_last_packet_indication &rArr; wlan_wmm_lists_empty &rArr; util_scalar_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_compute_driver_packet_delay
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_last_packet_indication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[58d]"></a>wlan_send_null_packet</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, mlan_sta_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wlan_send_null_packet &rArr; wlan_sdio_host_to_card &rArr; wlan_write_data_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_host_to_card
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mlan_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[57c]"></a>wlan_handle_rx_packet</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_handle_rx_packet &rArr; wlan_get_priv
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_decode_rx_packet
</UL>

<P><STRONG><a name="[4bd]"></a>wlan_write_data_complete</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_write_data_complete &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_aggregate_pkt
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_del_tx_pkts_in_ralist
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_processed_packet
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_single_packet
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_del_pkts_in_ralist_node
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_tx
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cleanup_bypass_txq
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>

<P><STRONG><a name="[60f]"></a>wlan_process_tx</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wlan_process_tx &rArr; wlan_sdio_host_to_card &rArr; wlan_write_data_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_complete
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_host_to_card
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_single_packet
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_bypass_tx
</UL>

<P><STRONG><a name="[4b8]"></a>wlan_recv_packet_complete</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_recv_packet_complete &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_deaggregate_pkt
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_recv_packet_complete
</UL>

<P><STRONG><a name="[58f]"></a>wlan_add_buf_bypass_txqueue</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_add_buf_bypass_txqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_send_packet
</UL>

<P><STRONG><a name="[54c]"></a>wlan_bypass_tx_list_empty</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_bypass_tx_list_empty &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pm_info
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_last_packet_indication
</UL>

<P><STRONG><a name="[5ef]"></a>wlan_cleanup_bypass_txq</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wlan_cleanup_bypass_txq &rArr; wlan_write_data_complete &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_complete
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_txrx
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_cfg_ioctl
</UL>

<P><STRONG><a name="[58b]"></a>wlan_process_bypass_tx</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wlan_process_bypass_tx &rArr; wlan_process_tx &rArr; wlan_sdio_host_to_card &rArr; wlan_write_data_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_tx
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
</UL>

<P><STRONG><a name="[61f]"></a>wlan_check_specific_ie</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_check_specific_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_sta_capability
</UL>

<P><STRONG><a name="[d9]"></a>wlan_ops_uap_prepare_cmd</STRONG> (Thumb, 828 bytes, Stack size 48 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = wlan_ops_uap_prepare_cmd &rArr; wlan_cmd_11n_addba_rspgen &rArr; wlan_11n_create_rxreorder_tbl &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_mem_access
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_reg_access
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_rf_antenna
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_hs_wakeup_reason
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_radio_control
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_cfg_data
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_get_hw_spec
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_tx_rate_cfg
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_enh_power_mode
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_11n_delba
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_11n_addba_rspgen
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_11n_addba_req
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_tx_bf_cfg
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_reject_addba_req
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_11n_cfg
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_amsdu_aggr_ctrl
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_recfg_tx_buf
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cmd_process
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11d_domain_info
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_cmd_snmp_mib
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_cmd_key_material
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_cmd_sys_configure
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_queue_config
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_sdio_gpio_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>wlan_ops_uap_process_cmdresp</STRONG> (Thumb, 794 bytes, Stack size 32 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = wlan_ops_uap_process_cmdresp &rArr; wlan_uap_ret_sys_config &rArr; wlan_11h_radar_detected_callback &rArr; wlan_11h_radar_detected_handling &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_mem_access
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_reg_access
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_rf_antenna
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_hs_wakeup_reason
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_radio_control
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_get_hw_spec
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_cfg_data
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_tx_rate_cfg
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_tx_rate_query
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_enh_power_mode
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_rx_mgmt_ind
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_ver_ext
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_hs_cfg
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_resp
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_tx_bf_cfg
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_reject_addba_req
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_cfg
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_amsdu_aggr_ctrl
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_req
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_delba
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_callback
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cmdresp_process
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_priv_init
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11d_domain_info
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_priv_init
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_ret_snmp_mib
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_ret_sys_config
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_queue_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>wlan_ops_uap_process_event</STRONG> (Thumb, 1016 bytes, Stack size 64 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = wlan_ops_uap_process_event &rArr; wlan_11h_radar_detected_handling &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delete_station_entry
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_station_entry
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delete_station_list
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_txrx
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_ps_cond
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cleanup_reorder_tbl
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_rxba_sync_event
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ba_stream_timeout
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cleanup_txbastream_tbl
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_bastream
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_handle_event_chanrpt_ready
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_delete_peer_ralist
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_updata_ralist_tx_pause
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_wapi_info_tlv
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_uap_capability
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_sta_capability
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_sta_assoc_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>wlan_ops_uap_init_cmd</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = wlan_ops_uap_init_cmd &rArr; wlan_adapter_init_cmd &rArr; wlan_set_sdio_gpio_int &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adapter_init_cmd
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[493]"></a>wlan_uap_set_channel</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = wlan_uap_set_channel &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_bss_ioctl_start
</UL>

<P><STRONG><a name="[48e]"></a>wlan_uap_get_channel</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = wlan_uap_get_channel &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[48f]"></a>wlan_uap_get_beacon_dtim</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = wlan_uap_get_beacon_dtim &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
</UL>

<P><STRONG><a name="[d8]"></a>wlan_ops_uap_ioctl</STRONG> (Thumb, 1470 bytes, Stack size 40 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = wlan_ops_uap_ioctl &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_hs_wakeup_reason
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pm_info
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_rx_mgmt_ind
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_ver_ext
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl_mem_rw
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl_read_eeprom
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl_reg_rw
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_bss_role
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl_hscfg
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_debug_info
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_init_shutdown
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_host_cmd
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_get_channel
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_custom_ie_list
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_pm_ioctl_deepsleep
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_pm_ioctl_mode
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_bss_ioctl_reset
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_set_wapi_ie
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cfg_ioctl
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_txcontrol
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_get_data_rate
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_cfg
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl_ant_cfg
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl_radio_ctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>wlan_ops_uap_process_txpd</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, mlan_uap_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_ops_uap_process_txpd &rArr; wlan_wmm_compute_driver_packet_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_compute_driver_packet_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[4c3]"></a>wlan_process_uap_rx_packet</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, mlan_uap_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wlan_process_uap_rx_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mlan_buffer
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drop_tx_pkts
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_unicast_packet
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_rx_packet
</UL>

<P><STRONG><a name="[db]"></a>wlan_ops_uap_process_rx_packet</STRONG> (Thumb, 302 bytes, Stack size 48 bytes, mlan_uap_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = wlan_ops_uap_process_rx_packet &rArr; mlan_11n_rxreorder_pkt &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_802dot11_mgmt_pkt
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_uap_rx_packet
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_rxreorder_pkt
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_rxreorder_tbl
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[4b7]"></a>wlan_uap_recv_packet</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, mlan_uap_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mlan_buffer
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drop_tx_pkts
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_unicast_packet
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_deaggregate_pkt
</UL>

<P><STRONG><a name="[4a7]"></a>wlan_wmm_get_ralist_node</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_wmm_get_ralist_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_req
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_update
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_delete_peer_ralist
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_updata_ralist_tx_pause
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>

<P><STRONG><a name="[4a8]"></a>wlan_get_random_ba_threshold</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_get_random_ba_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_add
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_req
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_update
</UL>

<P><STRONG><a name="[529]"></a>wlan_ralist_add</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_random_ba_threshold
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuing_ra_based
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_enqueue_list_tail
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_11n_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>

<P><STRONG><a name="[4be]"></a>wlan_is_ralist_valid</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_is_ralist_valid &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_aggregate_pkt
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_processed_packet
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_single_packet
</UL>

<P><STRONG><a name="[61e]"></a>wlan_updata_ralist_tx_pause</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_updata_ralist_tx_pause &rArr; wlan_wmm_get_ralist_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_ralist_node
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_write
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_read
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[51c]"></a>wlan_clean_txrx</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cleanup_reorder_tbl
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_deleteall_txbastream_tbl
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cleanup_queues
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cleanup_bypass_txq
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_connect_state
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_priv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[643]"></a>wlan_wmm_default_queue_priorities</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mlan_wmm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_init
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_queue_priorities
</UL>

<P><STRONG><a name="[623]"></a>wlan_wmm_setup_queue_priorities</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_wmm_setup_queue_priorities &rArr; wlan_wmm_queue_priorities_tid &rArr; util_scalar_write
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_default_queue_priorities
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_queue_priorities_tid
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_queues
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_uap_capability
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_get_status
</UL>

<P><STRONG><a name="[622]"></a>wlan_wmm_setup_ac_downgrade</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_wmm_setup_ac_downgrade
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_queues
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_uap_capability
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_get_status
</UL>

<P><STRONG><a name="[511]"></a>wlan_wmm_init</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_wmm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_default_queue_priorities
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_adapter
</UL>

<P><STRONG><a name="[527]"></a>wlan_wmm_setup_queues</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wlan_wmm_setup_queues &rArr; wlan_wmm_setup_queue_priorities &rArr; wlan_wmm_queue_priorities_tid &rArr; util_scalar_write
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_queue_priorities
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_ac_downgrade
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_uap_capability
</UL>

<P><STRONG><a name="[5d7]"></a>wlan_cmd_wmm_status_change</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = wlan_cmd_wmm_status_change &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[54d]"></a>wlan_wmm_lists_empty</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_wmm_lists_empty &rArr; util_scalar_read
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pm_info
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_last_packet_indication
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_process_tx
</UL>

<P><STRONG><a name="[645]"></a>wlan_ralist_update</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, mlan_wmm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_ralist_node
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_random_ba_threshold
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuing_ra_based
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_11n_enabled
</UL>

<P><STRONG><a name="[58e]"></a>wlan_wmm_add_buf_txqueue</STRONG> (Thumb, 412 bytes, Stack size 48 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_add
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_complete
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_ralist_node
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuing_ra_based
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_increment
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_enqueue_list_tail
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_downgrade_tid
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_conditional_write
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_send_packet
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_uap_rx_packet
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_recv_packet
</UL>

<P><STRONG><a name="[5c9]"></a>wlan_ret_wmm_get_status</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wlan_ret_wmm_get_status &rArr; wlan_send_wmmac_host_event &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_wmmac_host_event
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_queue_priorities
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_ac_downgrade
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[522]"></a>wlan_wmm_process_association_req</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_wmm_process_association_req
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
</UL>

<P><STRONG><a name="[4bb]"></a>wlan_wmm_compute_driver_packet_delay</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_wmm_compute_driver_packet_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_aggregate_pkt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_txpd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_txpd
</UL>

<P><STRONG><a name="[58c]"></a>wlan_wmm_process_tx</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = wlan_wmm_process_tx &rArr; wlan_dequeue_tx_packet &rArr; wlan_send_delba &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_lists_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
</UL>

<P><STRONG><a name="[591]"></a>wlan_wmm_select_queue</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mlan_wmm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_select_wmm_queue
</UL>

<P><STRONG><a name="[62a]"></a>wlan_drop_tx_pkts</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wlan_drop_tx_pkts &rArr; wlan_del_tx_pkts_in_ralist &rArr; wlan_write_data_complete &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_del_tx_pkts_in_ralist
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_uap_rx_packet
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_recv_packet
</UL>

<P><STRONG><a name="[61d]"></a>wlan_wmm_delete_peer_ralist</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wlan_wmm_delete_peer_ralist &rArr; wlan_wmm_del_pkts_in_ralist_node &rArr; wlan_write_data_complete &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_ralist_node
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_write
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_read
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_del_pkts_in_ralist_node
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[5a9]"></a>wlan_cmd_wmm_addts_req</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_cmd_wmm_addts_req
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5ca]"></a>wlan_ret_wmm_addts_req</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_ret_wmm_addts_req
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5aa]"></a>wlan_cmd_wmm_delts_req</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_cmd_wmm_delts_req
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5cb]"></a>wlan_ret_wmm_delts_req</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wlan_ret_wmm_delts_req &rArr; wlan_send_wmmac_host_event &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_wmmac_host_event
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5ac]"></a>wlan_cmd_wmm_queue_stats</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_cmd_wmm_queue_stats
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5cd]"></a>wlan_ret_wmm_queue_stats</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_ret_wmm_queue_stats
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5ad]"></a>wlan_cmd_wmm_ts_status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_cmd_wmm_ts_status
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5ce]"></a>wlan_ret_wmm_ts_status</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_ret_wmm_ts_status
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5ab]"></a>wlan_cmd_wmm_queue_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mlan_wmm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5cc]"></a>wlan_ret_wmm_queue_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mlan_wmm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[609]"></a>wlan_wmm_cfg_ioctl</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = wlan_wmm_cfg_ioctl &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[647]"></a>delay_1us</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[175]"></a>delay_us</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_udelay
</UL>

<P><STRONG><a name="[648]"></a>assert_failed</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, sys_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[6b2]"></a>misc_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[649]"></a>show_sys_info</STRONG> (Thumb, 450 bytes, Stack size 32 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = show_sys_info &rArr; show_tcpip_info &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_tcpip_info
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[64b]"></a>soft_reset</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = soft_reset &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_reset_post
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1eb]"></a>App_TaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
</UL>

<P><STRONG><a name="[1ec]"></a>App_TaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
</UL>

<P><STRONG><a name="[1ed]"></a>App_TaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
</UL>

<P><STRONG><a name="[1f0]"></a>App_TCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>

<P><STRONG><a name="[1ef]"></a>App_TaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[1f1]"></a>App_TimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[1ee]"></a>App_TaskStatHook</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = App_TaskStatHook &rArr; test_udp_link &rArr; udp_link &rArr; close_socket &rArr; lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_link
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_unlink
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_link
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_wifi_connected
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>

<P><STRONG><a name="[651]"></a>switch_dbg</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = switch_dbg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[652]"></a>usr_gpio_init</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = usr_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[338]"></a>get_wifi_dev</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[332]"></a>is_hw_ok</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_data_xmit
</UL>

<P><STRONG><a name="[654]"></a>wifi_disconnect</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = wifi_disconnect &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_mode
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_disconnect
</UL>

<P><STRONG><a name="[656]"></a>wifi_stop_ap</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifi_stop_ap
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_mode
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stop_ap
</UL>

<P><STRONG><a name="[655]"></a>wifi_set_mode</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = wifi_set_mode &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_stop_ap
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disconnect
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wifilink_post
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_join_adhoc
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_create_ap
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_connect
</UL>

<P><STRONG><a name="[659]"></a>wifi_set_multicast</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wifi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_promisc
</UL>

<P><STRONG><a name="[658]"></a>wifi_set_promisc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_multicast
</UL>

<P><STRONG><a name="[65a]"></a>wifi_set_channel</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[65c]"></a>wifi_ap_cfg</STRONG> (Thumb, 302 bytes, Stack size 104 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = wifi_ap_cfg &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wifilink_post
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_create_ap
</UL>

<P><STRONG><a name="[65f]"></a>wifi_join_adhoc</STRONG> (Thumb, 486 bytes, Stack size 104 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = wifi_join_adhoc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_join_adhoc
</UL>

<P><STRONG><a name="[660]"></a>wifi_leave_adhoc</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = wifi_leave_adhoc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_leave_adhoc
</UL>

<P><STRONG><a name="[661]"></a>wifi_get_sta_list</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = wifi_get_sta_list &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_get_station_list
</UL>

<P><STRONG><a name="[662]"></a>new_scan_req</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = new_scan_req &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan
</UL>

<P><STRONG><a name="[663]"></a>wifi_scan</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = wifi_scan &rArr; new_scan_req &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_scan_req
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scan
</UL>

<P><STRONG><a name="[64c]"></a>is_wifi_connected</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_link
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_link
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wifilink_post
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_connect
</UL>

<P><STRONG><a name="[3ac]"></a>wifi_connect</STRONG> (Thumb, 548 bytes, Stack size 48 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = wifi_connect &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wifilink_post
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_connect
</UL>

<P><STRONG><a name="[782]"></a>wifi_get_mac</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wifi.o(.text), UNUSED)

<P><STRONG><a name="[664]"></a>wifi_get_stats</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = wifi_get_stats &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_get_stats
</UL>

<P><STRONG><a name="[665]"></a>wifi_power_cfg</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = wifi_power_cfg &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_save_disable
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_save_enable
</UL>

<P><STRONG><a name="[783]"></a>event_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wifi.o(.text), UNUSED)

<P><STRONG><a name="[666]"></a>create_mac</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[37e]"></a>register_netdev</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
</UL>

<P><STRONG><a name="[667]"></a>init_wifi</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = init_wifi &rArr; woal_init_module &rArr; woal_sdio_probe &rArr; woal_add_card &rArr; mlan_shutdown_fw &rArr; wlan_free_priv &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_module
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[668]"></a>put_page</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = put_page &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_data
</UL>

<P><STRONG><a name="[66c]"></a>__kfree_skb</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = __kfree_skb &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub_return
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_all
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_skb
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfree_skb
</UL>

<P><STRONG><a name="[66b]"></a>kfree_skb</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = kfree_skb &rArr; __kfree_skb &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub_return
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfree_skb
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_realloc_headroom
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_rx
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_data
</UL>

<P><STRONG><a name="[670]"></a>skb_clone</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = skb_clone &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__skb_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_realloc_headroom
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
</UL>

<P><STRONG><a name="[671]"></a>skb_copy_from_linear_data_offset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[672]"></a>skb_copy_bits</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_bits
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_expand
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_bits
</UL>

<P><STRONG><a name="[673]"></a>get_page</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = get_page &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_copy
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
</UL>

<P><STRONG><a name="[674]"></a>pskb_expand_head</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = pskb_expand_head &rArr; skb_release_data &rArr; kfree_skb &rArr; __kfree_skb &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_page
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_clone_fraglist
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_mac_header_was_set
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_has_frag_list
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_data
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_realloc_headroom
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
</UL>

<P><STRONG><a name="[677]"></a>__pskb_pull_tail</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_read
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_bits
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_clone
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfree_skb
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_page
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_has_frag_list
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull
</UL>

<P><STRONG><a name="[784]"></a>skb_tailroom</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, skbuff.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>skb_reserve</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_data_xmit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_packet
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_expand
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_copy
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__netdev_alloc_skb
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dev_alloc_skb
</UL>

<P><STRONG><a name="[391]"></a>skb_mac_header</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_check_tcp_fin
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_rx
</UL>

<P><STRONG><a name="[691]"></a>skb_reset_mac_header</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_trans
</UL>

<P><STRONG><a name="[333]"></a>__alloc_skb</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = __alloc_skb &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_data_xmit
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_expand
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_copy
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__netdev_alloc_skb
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dev_alloc_skb
</UL>

<P><STRONG><a name="[679]"></a>__dev_alloc_skb</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = __dev_alloc_skb &rArr; __alloc_skb &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_reserve
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_alloc_skb
</UL>

<P><STRONG><a name="[67a]"></a>skb_copy_from_linear_data</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = skb_copy_from_linear_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_copy
</UL>

<P><STRONG><a name="[67b]"></a>__netdev_alloc_skb</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_reserve
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
</UL>

<P><STRONG><a name="[3a8]"></a>dev_alloc_skb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = dev_alloc_skb &rArr; __dev_alloc_skb &rArr; __alloc_skb &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dev_alloc_skb
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_buffer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_packet
</UL>

<P><STRONG><a name="[785]"></a>get_global_skb_alloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, skbuff.o(.text), UNUSED)

<P><STRONG><a name="[395]"></a>consume_skb</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = consume_skb &rArr; __kfree_skb &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub_return
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfree_skb
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_mlan_buffer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hard_start_xmit
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_process_tcp_ack
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_send_packet_complete
</UL>

<P><STRONG><a name="[67c]"></a>skb_recycle_check</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_head_state
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[67e]"></a>skb_morph</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_all
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__skb_clone
</UL>

<P><STRONG><a name="[41d]"></a>skb_put</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = skb_put &rArr; skb_over_panic &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_over_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_packet
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_expand
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_copy
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy
</UL>

<P><STRONG><a name="[681]"></a>skb_copy</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_reserve
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_put
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_bits
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_skb_header
</UL>

<P><STRONG><a name="[682]"></a>pskb_copy</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = pskb_copy &rArr; __alloc_skb &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_reserve
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_put
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_from_linear_data
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_page
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_clone_fraglist
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_has_frag_list
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_skb_header
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_realloc_headroom
</UL>

<P><STRONG><a name="[396]"></a>skb_realloc_headroom</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = skb_realloc_headroom &rArr; pskb_copy &rArr; __alloc_skb &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_copy
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_clone
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfree_skb
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hard_start_xmit
</UL>

<P><STRONG><a name="[683]"></a>skb_copy_expand</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_reserve
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_put
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_bits
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_skb_header
</UL>

<P><STRONG><a name="[684]"></a>skb_push</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_under_panic
</UL>

<P><STRONG><a name="[38b]"></a>do_gettimeofday</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = do_gettimeofday &rArr; os_time_get &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_find_essid
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hard_start_xmit
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_fw_dpc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_get_system_time
</UL>

<P><STRONG><a name="[397]"></a>timeval_to_ktime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usr_cfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hard_start_xmit
</UL>

<P><STRONG><a name="[37b]"></a>INIT_LIST_HEAD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usr_cfg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_process_tcp_ack
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
</UL>

<P><STRONG><a name="[786]"></a>__list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usr_cfg.o(.text), UNUSED)

<P><STRONG><a name="[787]"></a>list_add</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usr_cfg.o(.text), UNUSED)

<P><STRONG><a name="[394]"></a>list_add_tail</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usr_cfg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_process_tcp_ack
</UL>

<P><STRONG><a name="[788]"></a>__list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usr_cfg.o(.text), UNUSED)

<P><STRONG><a name="[789]"></a>__list_del_entry</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usr_cfg.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>list_del</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usr_cfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_process_tcp_ack
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_check_tcp_fin
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_priv
</UL>

<P><STRONG><a name="[3d6]"></a>copy_from_user</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = copy_from_user &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_bss_role
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_type
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_host_packet
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_custom_ie_ioctl
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hostcmd_ioctl
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_sta_list_ioctl
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_cfg_ioctl
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_power_mode_ioctl
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_radio_ctl
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sta_deauth_ioctl
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_antenna_cfg
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_mgmt_frame_control
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_tx_bf_cfg
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sdcmd52_rw
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_txdatapause
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_deep_sleep
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_fw_info
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_reject
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_param
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_tx_rate_cfg
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_hs_cfg
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_snmp_mib
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_aggr_priotbl
</UL>

<P><STRONG><a name="[38d]"></a>try_module_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usr_cfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_open
</UL>

<P><STRONG><a name="[38e]"></a>module_put</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usr_cfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_close
</UL>

<P><STRONG><a name="[42b]"></a>ieee80211_get_channel</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ieee80211_get_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_inform_bss_from_scan_result
</UL>

<P><STRONG><a name="[686]"></a>wpa_parse_wpa_ie_rsn</STRONG> (Thumb, 438 bytes, Stack size 32 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wpa_parse_wpa_ie_rsn &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_selector_to_bitfield
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
</UL>

<P><STRONG><a name="[68a]"></a>wpa_parse_wpa_ie</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wpa_parse_wpa_ie &rArr; wpa_parse_wpa_ie_wpa &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_parse_own_wpa_ie
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_user_scan_result
</UL>

<P><STRONG><a name="[68b]"></a>wpa_sm_parse_own_wpa_ie</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usr_cfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[56f]"></a>handle_user_scan_result</STRONG> (Thumb, 192 bytes, Stack size 104 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = handle_user_scan_result &rArr; wpa_parse_wpa_ie &rArr; wpa_parse_wpa_ie_wpa &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
</UL>

<P><STRONG><a name="[42c]"></a>cfg80211_inform_bss</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = cfg80211_inform_bss &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_inform_ibss_bss
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_inform_bss_from_scan_result
</UL>

<P><STRONG><a name="[373]"></a>wiphy_free</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usr_cfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_uap_cfg80211
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_sta_cfg80211
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_interface
</UL>

<P><STRONG><a name="[372]"></a>wiphy_unregister</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usr_cfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_interface
</UL>

<P><STRONG><a name="[65b]"></a>ieee80211_channel_to_frequency</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usr_cfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_join_adhoc
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_channel
</UL>

<P><STRONG><a name="[3c9]"></a>ieee80211_frequency_to_channel</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usr_cfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rf_channel
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_channel
</UL>

<P><STRONG><a name="[68c]"></a>strnicmp</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usr_cfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>

<P><STRONG><a name="[3f4]"></a>cfg80211_scan_done</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = cfg80211_scan_done &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_scan
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_cfg80211_scan
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[434]"></a>cfg80211_connect_result</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = cfg80211_connect_result &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_connect
</UL>

<P><STRONG><a name="[422]"></a>cfg80211_cqm_rssi_notify</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = cfg80211_cqm_rssi_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[68e]"></a>cfg80211_michael_mic_failure</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usr_cfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[435]"></a>cfg80211_ibss_joined</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = cfg80211_ibss_joined &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_join_ibss
</UL>

<P><STRONG><a name="[42d]"></a>cfg80211_put_bss</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = cfg80211_put_bss &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_inform_ibss_bss
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_inform_bss_from_scan_result
</UL>

<P><STRONG><a name="[68f]"></a>cfg80211_remain_on_channel_expired</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usr_cfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[690]"></a>cfg80211_ready_on_channel</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, usr_cfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[41e]"></a>eth_type_trans</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eth_type_trans
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_reset_mac_header
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_packet
</UL>

<P><STRONG><a name="[41f]"></a>netif_rx</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = netif_rx &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_mac_header
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfree_skb
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_packet
</UL>

<P><STRONG><a name="[692]"></a>print_scan_result</STRONG> (Thumb, 546 bytes, Stack size 64 bytes, test_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = print_scan_result &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_result_fun
</UL>

<P><STRONG><a name="[693]"></a>scan_result_fun</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, test_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = scan_result_fun &rArr; print_scan_result &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_scan_result
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_wifi.o(.text)
</UL>
<P><STRONG><a name="[694]"></a>test_scan</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, test_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = test_scan &rArr; wifi_scan &rArr; new_scan_req &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[695]"></a>test_wifi_connect</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, test_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = test_wifi_connect &rArr; netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_mode
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_wifi_connected
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[696]"></a>test_create_ap</STRONG> (Thumb, 598 bytes, Stack size 32 bytes, test_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = test_create_ap &rArr; wifi_ap_cfg &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_cfg
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_mode
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[697]"></a>test_wifi_disconnect</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, test_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = test_wifi_disconnect &rArr; wifi_disconnect &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disconnect
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[698]"></a>test_wifi_join_adhoc</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, test_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = test_wifi_join_adhoc &rArr; wifi_join_adhoc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_join_adhoc
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_mode
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[699]"></a>test_wifi_leave_adhoc</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, test_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = test_wifi_leave_adhoc &rArr; wifi_leave_adhoc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_leave_adhoc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[69a]"></a>test_wifi_get_stats</STRONG> (Thumb, 114 bytes, Stack size 80 bytes, test_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = test_wifi_get_stats &rArr; wifi_get_stats &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_stats
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[69b]"></a>test_stop_ap</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, test_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = test_stop_ap &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_stop_ap
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[69c]"></a>test_get_station_list</STRONG> (Thumb, 506 bytes, Stack size 40 bytes, test_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = test_get_station_list &rArr; wifi_get_sta_list &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_sta_list
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[69d]"></a>test_power_save_enable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, test_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = test_power_save_enable &rArr; wifi_power_cfg &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_cfg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[69e]"></a>test_power_save_disable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, test_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = test_power_save_disable &rArr; wifi_power_cfg &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_cfg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[69f]"></a>choose_socket</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = choose_socket &rArr; test_udp_link &rArr; udp_link &rArr; close_socket &rArr; lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_link
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_unlink
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_link
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_server
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_server
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_close_tcp_server
</UL>
<BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_tcp_client_post
</UL>

<P><STRONG><a name="[6a3]"></a>handle_cmd</STRONG> (Thumb, 558 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = handle_cmd &rArr; test_auto_get_ip &rArr; auto_get_ip &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_write_firmware_to_spi_flash
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_link
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_unlink
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_link
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_dbg
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_sys_info
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_server
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_server
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_full_speed_send_stop
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_full_speed_send
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dns
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_close_tcp_server
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_auto_get_ip
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_loopback_test
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_save_disable
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_save_enable
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_get_station_list
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stop_ap
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_get_stats
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_leave_adhoc
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_join_adhoc
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_disconnect
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_create_ap
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_connect
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scan
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[6a9]"></a>main_thread</STRONG> (Thumb, 1162 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1188 + Unknown Stack Size
<LI>Call Chain = main_thread &rArr; init_monitor &rArr; fix_cs_params &rArr; woal_init_priv &rArr; woal_cfg80211_uap_init_wiphy &rArr; woal_set_get_sys_config &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_work_thread
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_misc_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buf_uart1
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_dhcp_server
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_udhcpd
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_gpio_init
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;misc_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_server_init
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_server
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_server
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sendto
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_send
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init_ok
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_monitor
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lwip
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11Read
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_save_enable
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_create_ap
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = main &rArr; thread_create &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[650]"></a>test_tcp_link</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = test_tcp_link &rArr; tcp_link &rArr; close_socket &rArr; lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_wifi_connected
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_link
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_socket
</UL>

<P><STRONG><a name="[64e]"></a>test_udp_link</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = test_udp_link &rArr; udp_link &rArr; close_socket &rArr; lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_wifi_connected
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_link
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_socket
</UL>

<P><STRONG><a name="[6a2]"></a>test_udp_server</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = test_udp_server &rArr; udp_create_server &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create_server
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_socket
</UL>

<P><STRONG><a name="[6bb]"></a>close_socket</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = close_socket &rArr; lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_unlink
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_link
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_data_send
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_link
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_thread
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_server
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_send
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_close_tcp_server
</UL>

<P><STRONG><a name="[64f]"></a>test_tcp_unlink</STRONG> (Thumb, 396 bytes, Stack size 16 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = test_tcp_unlink &rArr; close_socket &rArr; lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_socket
</UL>

<P><STRONG><a name="[6b6]"></a>test_send</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = test_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[6bc]"></a>tcp_send_thread</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = tcp_send_thread &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_myself
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_exit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_tcpip.o(.text)
</UL>
<P><STRONG><a name="[6a6]"></a>test_full_speed_send</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = test_full_speed_send &rArr; thread_create &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[6a7]"></a>test_full_speed_send_stop</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = test_full_speed_send_stop &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[6b7]"></a>test_sendto</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = test_sendto &rArr; udp_data_send &rArr; lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_data_send
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[6a0]"></a>test_close_tcp_server</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = test_close_tcp_server &rArr; close_socket &rArr; lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_exit
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_server
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_socket
</UL>

<P><STRONG><a name="[6be]"></a>tcp_accept_task</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = tcp_accept_task &rArr; lwip_accept &rArr; netconn_accept &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_exit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_tcpip.o(.text)
</UL>
<P><STRONG><a name="[6a4]"></a>test_dns</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = test_dns &rArr; get_host_by_name &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_host_by_name
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[6a1]"></a>test_tcp_server</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = test_tcp_server &rArr; test_close_tcp_server &rArr; close_socket &rArr; lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_close_tcp_server
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_socket
</UL>

<P><STRONG><a name="[64a]"></a>show_tcpip_info</STRONG> (Thumb, 514 bytes, Stack size 64 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = show_tcpip_info &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_sys_info
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wifilink_post
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_auto_get_ip
</UL>

<P><STRONG><a name="[6a5]"></a>test_auto_get_ip</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = test_auto_get_ip &rArr; auto_get_ip &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_tcpip_info
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[6c1]"></a>is_udp_server_socket</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_udp_server_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_thread
</UL>

<P><STRONG><a name="[6c2]"></a>is_dhcp_socket</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_dhcp_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_thread
</UL>

<P><STRONG><a name="[6c3]"></a>is_web_socket</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_web_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_thread
</UL>

<P><STRONG><a name="[6a8]"></a>switch_loopback_test</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = switch_loopback_test &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[87]"></a>tcp_recv_thread</STRONG> (Thumb, 830 bytes, Stack size 40 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 876 + Unknown Stack Size
<LI>Call Chain = tcp_recv_thread &rArr; handle_web_sm &rArr; handle_web_post &rArr; handle_wifilink_post &rArr; auto_get_ip &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp_rcv
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_sm
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_web_socket
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dhcp_socket
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_udp_server_socket
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpapp.o(.text)
</UL>
<P><STRONG><a name="[6b5]"></a>socket_init_ok</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, test_tcpip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[6c5]"></a>tcpip_init_end</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tcpapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tcpip_init_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpapp.o(.text)
</UL>
<P><STRONG><a name="[6c6]"></a>lwip_netif_init</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, tcpapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = lwip_netif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lwip
</UL>

<P><STRONG><a name="[6c0]"></a>auto_get_ip</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tcpapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = auto_get_ip &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wifilink_post
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_auto_get_ip
</UL>

<P><STRONG><a name="[6bf]"></a>get_host_by_name</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcpapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = get_host_by_name &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dns
</UL>

<P><STRONG><a name="[6c8]"></a>get_connect_stat</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tcpapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[6b8]"></a>tcp_link</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, tcpapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = tcp_link &rArr; close_socket &rArr; lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_link
</UL>

<P><STRONG><a name="[6b9]"></a>udp_link</STRONG> (Thumb, 594 bytes, Stack size 56 bytes, tcpapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = udp_link &rArr; close_socket &rArr; lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_link
</UL>

<P><STRONG><a name="[6c9]"></a>udp_add_membership</STRONG> (Thumb, 402 bytes, Stack size 64 bytes, tcpapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[6ba]"></a>udp_create_server</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, tcpapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = udp_create_server &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_server
</UL>

<P><STRONG><a name="[6bd]"></a>udp_data_send</STRONG> (Thumb, 564 bytes, Stack size 72 bytes, tcpapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = udp_data_send &rArr; lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sendto
</UL>

<P><STRONG><a name="[6b1]"></a>init_lwip</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tcpapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 740 + Unknown Stack Size
<LI>Call Chain = init_lwip &rArr; lwip_netif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netif_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[6ca]"></a>web_data_send</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = web_data_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_page_send
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_post_status
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logo_gif_send
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_page_send
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_get
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devcie_info_page_assemble
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_page_assemble
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_page_assemble
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;login_page_assemble
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_page_assemble
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_page_assemble
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_link_page_assemble
</UL>

<P><STRONG><a name="[6cb]"></a>make_sub_page_title</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = make_sub_page_title &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_page_assemble
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_page_assemble
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;login_page_assemble
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_page_assemble
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_page_assemble
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_link_page_assemble
</UL>

<P><STRONG><a name="[6cc]"></a>wifi_link_page_assemble</STRONG> (Thumb, 286 bytes, Stack size 88 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = wifi_link_page_assemble &rArr; web_data_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_body_add_input_str
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sub_page_title
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_data_send
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webserver.o(.text)
</UL>
<P><STRONG><a name="[6ce]"></a>ip_addr_page_assemble</STRONG> (Thumb, 344 bytes, Stack size 96 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = ip_addr_page_assemble &rArr; web_data_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_body_add_input_str
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sub_page_title
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_data_send
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webserver.o(.text)
</UL>
<P><STRONG><a name="[6cf]"></a>reset_page_assemble</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = reset_page_assemble &rArr; web_data_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_replace
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sub_page_title
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_data_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webserver.o(.text)
</UL>
<P><STRONG><a name="[6d1]"></a>login_page_assemble</STRONG> (Thumb, 388 bytes, Stack size 88 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = login_page_assemble &rArr; web_data_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_body_add_input_str
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sub_page_title
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_data_send
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webserver.o(.text)
</UL>
<P><STRONG><a name="[6d2]"></a>io_page_assemble</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = io_page_assemble &rArr; web_data_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_replace
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sub_page_title
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_data_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webserver.o(.text)
</UL>
<P><STRONG><a name="[6d3]"></a>tcp_client_page_assemble</STRONG> (Thumb, 228 bytes, Stack size 96 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = tcp_client_page_assemble &rArr; web_data_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_body_add_input_str
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sub_page_title
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_data_send
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webserver.o(.text)
</UL>
<P><STRONG><a name="[6d4]"></a>handle_wifilink_post</STRONG> (Thumb, 292 bytes, Stack size 96 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = handle_wifilink_post &rArr; auto_get_ip &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_cfg
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_mode
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_tcpip_info
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_wifi_connected
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_post_status
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_post_tag_value
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_post
</UL>

<P><STRONG><a name="[6d7]"></a>handle_ip_addr_post</STRONG> (Thumb, 496 bytes, Stack size 80 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = handle_ip_addr_post &rArr; send_post_status &rArr; web_data_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_post_status
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_post_tag_value
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_post
</UL>

<P><STRONG><a name="[6d8]"></a>handle_login_post</STRONG> (Thumb, 60 bytes, Stack size 80 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = handle_login_post &rArr; send_post_status &rArr; web_data_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_post_status
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_post_tag_value
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_post
</UL>

<P><STRONG><a name="[6d9]"></a>handle_reset_post</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = handle_reset_post &rArr; send_post_status &rArr; web_data_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_post_status
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_post_tag_value
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_post
</UL>

<P><STRONG><a name="[6da]"></a>handle_io_post</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = handle_io_post &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_post
</UL>

<P><STRONG><a name="[6db]"></a>handle_tcp_client_post</STRONG> (Thumb, 196 bytes, Stack size 96 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = handle_tcp_client_post &rArr; choose_socket &rArr; test_udp_link &rArr; udp_link &rArr; close_socket &rArr; lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_post_status
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_post_tag_value
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_socket
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_post
</UL>

<P><STRONG><a name="[6dc]"></a>devcie_info_page_assemble</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = devcie_info_page_assemble &rArr; web_data_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_data_send
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webserver.o(.text)
</UL>
<P><STRONG><a name="[6dd]"></a>handle_web_get</STRONG> (Thumb, 564 bytes, Stack size 24 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = handle_web_get &rArr; sub_page_send &rArr; web_data_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_page_send
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logo_gif_send
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_page_send
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_data_send
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_sm
</UL>

<P><STRONG><a name="[6e1]"></a>handle_web_post</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 772 + Unknown Stack Size
<LI>Call Chain = handle_web_post &rArr; handle_wifilink_post &rArr; auto_get_ip &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_tcp_client_post
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_io_post
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_reset_post
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_login_post
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ip_addr_post
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wifilink_post
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_sm
</UL>

<P><STRONG><a name="[6e6]"></a>is_str_end</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, webserver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_sm
</UL>

<P><STRONG><a name="[6e2]"></a>web_update_timer</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, webserver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[78a]"></a>web_abort</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, webserver.o(.text), UNUSED)

<P><STRONG><a name="[6c4]"></a>handle_web_sm</STRONG> (Thumb, 2088 bytes, Stack size 64 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + Unknown Stack Size
<LI>Call Chain = handle_web_sm &rArr; handle_web_post &rArr; handle_wifilink_post &rArr; auto_get_ip &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_update_data_finish
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_update_data
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_head_tag
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_str_end
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_post
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_get
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_thread
</UL>

<P><STRONG><a name="[6e9]"></a>web_server_thread</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = web_server_thread &rArr; lwip_accept &rArr; netconn_accept &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webserver.o(.text)
</UL>
<P><STRONG><a name="[6b3]"></a>web_server_init</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = web_server_init &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[6ea]"></a>send_test_pkg</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_socket_stat_data
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task_stat_data
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sys_stat_data
</UL>

<P><STRONG><a name="[78b]"></a>get_msp_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, debug.o(.text), UNUSED)

<P><STRONG><a name="[6ec]"></a>get_msp_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, debug.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sys_stat_data
</UL>

<P><STRONG><a name="[6eb]"></a>send_sys_stat_data</STRONG> (Thumb, 1552 bytes, Stack size 40 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msp_free
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test_pkg
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_sys_monitor
</UL>

<P><STRONG><a name="[6ed]"></a>send_task_stat_data</STRONG> (Thumb, 844 bytes, Stack size 40 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test_pkg
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_sys_monitor
</UL>

<P><STRONG><a name="[6ee]"></a>send_socket_stat_data</STRONG> (Thumb, 600 bytes, Stack size 40 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test_pkg
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_sys_monitor
</UL>

<P><STRONG><a name="[6ef]"></a>handle_sys_monitor</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_socket_stat_data
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task_stat_data
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sys_stat_data
</UL>

<P><STRONG><a name="[88]"></a>dev_monitor_task</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> monitor.o(.text)
</UL>
<P><STRONG><a name="[6f0]"></a>fix_cs_params</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, monitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1156 + Unknown Stack Size
<LI>Call Chain = fix_cs_params &rArr; woal_init_priv &rArr; woal_cfg80211_uap_init_wiphy &rArr; woal_set_get_sys_config &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_priv
</UL>
<BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_monitor
</UL>

<P><STRONG><a name="[6b0]"></a>init_monitor</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, monitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1156 + Unknown Stack Size
<LI>Call Chain = init_monitor &rArr; fix_cs_params &rArr; woal_init_priv &rArr; woal_cfg80211_uap_init_wiphy &rArr; woal_set_get_sys_config &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_cs_params
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[6aa]"></a>delay_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[6fe]"></a>delay_nms</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[6f3]"></a>delay_nus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_Receive
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11Read
</UL>

<P><STRONG><a name="[6af]"></a>DHT11Read</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, dht11_bus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = DHT11Read &rArr; Byte_Receive &rArr; Input_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_GPIO_Config
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_GPIO_Config
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_Receive
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nus
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[6f7]"></a>OLED_WR_Byte</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_Off
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[6f8]"></a>OLED_Set_Pos</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
</UL>

<P><STRONG><a name="[6f9]"></a>OLED_Display_On</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[6fa]"></a>OLED_Display_Off</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[6ac]"></a>OLED_Clear</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_Clear &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[6fb]"></a>OLED_ShowChar</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>

<P><STRONG><a name="[6fd]"></a>oled_pow</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, oled.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>

<P><STRONG><a name="[6fc]"></a>OLED_ShowNum</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_pow
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>

<P><STRONG><a name="[657]"></a>OLED_ShowString</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_mode
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_tcpip_info
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_create_ap
</UL>

<P><STRONG><a name="[6ae]"></a>OLED_ShowCHinese</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_ShowCHinese &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[6ad]"></a>OLED_DrawBMP</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_DrawBMP &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[6ab]"></a>OLED_Init</STRONG> (Thumb, 386 bytes, Stack size 24 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OLED_Init &rArr; OLED_Clear &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nms
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[6e7]"></a>write_update_data</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = write_update_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_sm
</UL>

<P><STRONG><a name="[6ff]"></a>erase_update_erea</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, web.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[6e8]"></a>write_update_data_finish</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = write_update_data_finish &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_sm
</UL>

<P><STRONG><a name="[6d0]"></a>str_replace</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = str_replace &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_page_assemble
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_page_assemble
</UL>

<P><STRONG><a name="[6e4]"></a>get_head_tag</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = get_head_tag &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_sm
</UL>

<P><STRONG><a name="[6e3]"></a>get_name</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = get_name &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_sm
</UL>

<P><STRONG><a name="[701]"></a>get_body_tag</STRONG> (Thumb, 598 bytes, Stack size 0 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = get_body_tag &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_post_tag_value
</UL>

<P><STRONG><a name="[6d5]"></a>get_post_tag_value</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = get_post_tag_value &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_body_tag
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_tcp_client_post
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_reset_post
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_login_post
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ip_addr_post
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wifilink_post
</UL>

<P><STRONG><a name="[702]"></a>mem_move</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, web.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_body_add_option_str
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_body_add_input_str
</UL>

<P><STRONG><a name="[6cd]"></a>web_body_add_input_str</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = web_body_add_input_str &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_move
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_page_assemble
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;login_page_assemble
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_page_assemble
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_link_page_assemble
</UL>

<P><STRONG><a name="[703]"></a>web_body_add_option_str</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, web.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_move
</UL>

<P><STRONG><a name="[6df]"></a>sub_page_send</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = sub_page_send &rArr; web_data_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_data_send
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> web.o(.text)
</UL>
<P><STRONG><a name="[6de]"></a>index_page_send</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = index_page_send &rArr; web_data_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_data_send
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> web.o(.text)
</UL>
<P><STRONG><a name="[6e0]"></a>logo_gif_send</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = logo_gif_send &rArr; web_data_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_data_send
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> web.o(.text)
</UL>
<P><STRONG><a name="[6d6]"></a>send_post_status</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = send_post_status &rArr; web_data_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_data_send
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_tcp_client_post
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_reset_post
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_login_post
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ip_addr_post
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wifilink_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> web.o(.text)
</UL>
<P><STRONG><a name="[39b]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atoi
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atox
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[68d]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnicmp
</UL>

<P><STRONG><a name="[78c]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[78d]"></a>___aeabi_memmove4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[78e]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp_rcv
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_data_xmit
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_bgscan
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_userscan
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_signal_info
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_custom_ie_ioctl
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_gen_ie
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_key
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_filter_beacon_ies
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_custom_ie
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attach_option
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_simple_option
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_option_string
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_lease
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_ap_cfg
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ap_cfg_parse_data
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_key_ioctl
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_beacon_config
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_inform_bss
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_inform_ibss_bss
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_scan
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_packet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_get_fw_data
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_from_linear_data
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_bits
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_from_linear_data_offset
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_scan_req
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_user_scan_result
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_body_add_option_str
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_body_add_input_str
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_replace
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_post_tag_value
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_page_assemble
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_page_assemble
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;login_page_assemble
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_page_assemble
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_page_assemble
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_link_page_assemble
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_sm
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_scan_result
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[35d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_find_best_network
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_change_adhoc_chan
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_scan
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_tx_bf_cfg
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_data_rate
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_start
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_sys_config
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_reg_dbg
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_index_to_data_rate
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_stats
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_bss_param
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_power_mode_ioctl
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_flag_ioctl
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_passphrase
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__copy_skb_header
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_cmd_snmp_mib
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_mef_cfg
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ipaddr_auto_arp_resp
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task_stat_data
</UL>

<P><STRONG><a name="[39e]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_strsep
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[367]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_memcpy
</UL>

<P><STRONG><a name="[418]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_memmove
</UL>

<P><STRONG><a name="[3d4]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_get_fw_info
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[78f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[790]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_bg_scan
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_custom_ie_ioctl
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_setup_ht_cap
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_custom_ie
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_uap_init_wiphy
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_sta_init_wiphy
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_ascii2hex
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_ap_cfg
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_beacon_config
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_socket_stat_data
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task_stat_data
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sys_stat_data
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_login_post
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wifilink_post
</UL>

<P><STRONG><a name="[15a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_struct
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp_rcv
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_udhcpd
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_band
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_combo_scan
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_type
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_stop_bg_scan
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_time
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_change_adhoc_chan
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_sys_config_invalid_data
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_disconnect_to_system
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_buffer
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reset_intf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hard_start_xmit
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_process_tcp_ack
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_reg_dbg
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_header
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lease
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_power_mode_ioctl
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_radio_ctl
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_tx_bf_cfg
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_param
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_tx_rate_cfg
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_hs_cfg
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_snmp_mib
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_aggr_priotbl
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_inform_ibss_bss
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_scan
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station_info
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_recycle_check
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_cfg
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_join_adhoc
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_channel
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_tcpip_info
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_ext_scan_result
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_sm
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_thread
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_server_init
</UL>

<P><STRONG><a name="[791]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[417]"></a>memset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_memset
</UL>

<P><STRONG><a name="[65e]"></a>strcat</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_cfg
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_socket_stat_data
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task_stat_data
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sys_stat_data
</UL>

<P><STRONG><a name="[6b4]"></a>strstr</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_body_add_option_str
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_body_tag
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_body_add_input_str
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_replace
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_head_tag
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_io_post
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_sm
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[366]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_combo_scan
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_bg_scan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_disconnect_to_system
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_bootp_options
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ap_cfg_parse_data
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[700]"></a>strchr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_body_tag
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_head_tag
</UL>

<P><STRONG><a name="[2c6]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp_rcv
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_region_code
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_strsep
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atoi
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ap_cfg_parse_data
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_join_adhoc
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_cfg
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_link
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_link
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_body_add_option_str
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_body_tag
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_socket_stat_data
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task_stat_data
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sys_stat_data
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_body_add_input_str
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_page_send
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_replace
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_post_status
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logo_gif_send
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_page_send
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_head_tag
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devcie_info_page_assemble
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_login_post
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wifilink_post
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_page_assemble
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_page_assemble
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;login_page_assemble
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_page_assemble
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_page_assemble
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_link_page_assemble
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_sm
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sendto
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_send
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[264]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns_found
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_post
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_get
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_sm
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_socket
</UL>

<P><STRONG><a name="[17d]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_flash_data
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_lease_by_chaddr
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_region_code
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_key
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_filter_beacon_ies
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lease
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_key_ioctl
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_cfg80211_get_station
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_get_station
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc_ies_cfg
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_inform_bss_from_scan_result
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_memcmp
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name
</UL>

<P><STRONG><a name="[65d]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_cfg
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_tcp_client_post
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_login_post
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wifilink_post
</UL>

<P><STRONG><a name="[347]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp_rcv
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atoi
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ap_cfg_parse_data
</UL>

<P><STRONG><a name="[6e5]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_post_tag_value
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_sm
</UL>

<P><STRONG><a name="[792]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[723]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[706]"></a>__aeabi_uldivmod</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[705]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[793]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[70a]"></a>__aeabi_dadd</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[70e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[70f]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[710]"></a>__aeabi_dmul</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[711]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[712]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[71e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[df]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[794]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[708]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[795]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[707]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[796]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[70b]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[797]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[709]"></a>_strtoul</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[70d]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[70c]"></a>_double_epilogue</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[714]"></a>_chval</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[798]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[799]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[715]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[79a]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[12f]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp5Error
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeHeadList
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertTailList
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_thread
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_destory
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDumpTmr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_write_firmware_to_spi_flash
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_firmware
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_write
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_flash_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sr
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_till_ready
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rst_stat
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wait_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_wide
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_start_send_data
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_if_cond
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_relative_addr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_switch_hs
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct_host
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_cleanup
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_struct
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_internal
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_first
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_next
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_data
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns_found
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_check
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_free
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_timer
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_timer
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_pending
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_setup
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp_rcv
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_dhcp_server
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_dhcp_server
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_udhcpd
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_set_bus_clock
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_claim_irq
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_disable_func
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_func
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_scan_done
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_rts
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_retry
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_frag
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_unregister
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_free
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_netdev
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_unregister
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_shutdown_fw
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_set_init_param
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_send_packet
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_register
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_init_fw
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_dnld_fw
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_disconnect_to_system
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_select_queue
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_close
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw_dpc
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_moal_handle
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ip
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_cmd_node
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_complete
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_packet_complete
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_ibss_joined
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_connect_result
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_cqm_rssi_notify
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_assert
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_spin_lock
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_ready_on_channel
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_remain_on_channel_expired
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_michael_mic_failure
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_parse_own_wpa_ie
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_page
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_bits
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_page
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_under_panic
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_over_panic
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_mac
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_stats
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_scan_req
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_sta_list
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_leave_adhoc
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_join_adhoc
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_cfg
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_channel
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_mode
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disconnect
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_link
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_unlink
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_link
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_tcpip_info
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_dbg
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_sys_info
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_set_wapi_ie
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_gen_ie
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_gen_ie_helper
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wapi_ie
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wpa_ie_helper
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_decode_rx_packet
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_body_tag
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_update_erea
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_socket_stat_data
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task_stat_data
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sys_stat_data
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test_pkg
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_update_data_finish
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_update_data
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_head_tag
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_server_thread
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_update_timer
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_post
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_get
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_tcp_client_post
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_io_post
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_reset_post
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wifilink_post
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_data_send
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_add_membership
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netif_init
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_end
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_link
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_data_send
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create_server
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_link
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_web_sm
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_thread
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_task
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_thread
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_server_init
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_server
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_server
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sendto
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_send
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_full_speed_send_stop
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_full_speed_send
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dns
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_auto_get_ip
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_loopback_test
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_save_disable
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_save_enable
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_get_station_list
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stop_ap
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_get_stats
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_leave_adhoc
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_join_adhoc
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_disconnect
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_create_ap
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_connect
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scan
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_scan_result
</UL>

<P><STRONG><a name="[717]"></a>__0snprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[79b]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[79c]"></a>__2snprintf$full</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[3de]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __c89snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_version
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_version
</UL>

<P><STRONG><a name="[79d]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[719]"></a>__0snprintf$8</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[79e]"></a>__1snprintf$8</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)

<P><STRONG><a name="[210]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_version
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_cfg
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_socket_stat_data
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task_stat_data
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sys_stat_data
</UL>

<P><STRONG><a name="[71a]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[79f]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[37a]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_reg_dbg
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_tcpip_info
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_socket_stat_data
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sys_stat_data
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_page_send
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_post_status
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logo_gif_send
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_page_send
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devcie_info_page_assemble
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_page_assemble
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;login_page_assemble
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_page_assemble
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_link_page_assemble
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sub_page_title
</UL>

<P><STRONG><a name="[704]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[7a0]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[724]"></a>__free$realloc</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mallocr.o(i.__free$realloc), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[71b]"></a>__malloc$realloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[7a1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[7a2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[7a3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[162]"></a>enter_interrupt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart.o(i.enter_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[163]"></a>exit_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart.o(i.exit_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = exit_interrupt &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>local_irq_save</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdcard.o(i.local_irq_save))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub_return
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add_return
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_read
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_start_send_data
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
</UL>

<P><STRONG><a name="[35a]"></a>realloc</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, mallocr.o(i.realloc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__malloc$realloc
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__free$realloc
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attach_option
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[12d]"></a>CmdResp5Error</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = CmdResp5Error &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_if_cond
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct_host
</UL>

<P><STRONG><a name="[139]"></a>sdio_read_cis</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = sdio_read_cis &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_common_cis
</UL>

<P><STRONG><a name="[13d]"></a>CmdResp1Error</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
</UL>

<P><STRONG><a name="[140]"></a>CmdResp6Error</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp6Error
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_relative_addr
</UL>

<P><STRONG><a name="[176]"></a>wait_till_ready</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = wait_till_ready &rArr; read_sr &rArr; spi_write_then_read &rArr; spi_r
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_read_id
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_write
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_flash_data
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_read
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_erase
</UL>

<P><STRONG><a name="[17a]"></a>m25p_addr2cmd</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m25p_addr2cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_write
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_flash_data
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_read
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_erase
</UL>

<P><STRONG><a name="[177]"></a>read_sr</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = read_sr &rArr; spi_write_then_read &rArr; spi_r
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_till_ready
</UL>

<P><STRONG><a name="[179]"></a>write_enable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write_enable &rArr; spi_write_then_read &rArr; spi_r
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_write
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_erase
</UL>

<P><STRONG><a name="[188]"></a>OS_SchedNew</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[1ad]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[1b3]"></a>OS_FlagBlock</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[1e2]"></a>OSTmr_Free</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[1e1]"></a>OSTmr_Unlink</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[1e7]"></a>OSTmr_Link</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[49]"></a>OSTmr_Task</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; timer_tasklet_callback &rArr; schedule_timer_tasklet &rArr; schedule_work &rArr; wake_up &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tasklet_callback
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>os_workqueue_thread</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = os_workqueue_thread &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeHeadList
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.text)
</UL>
<P><STRONG><a name="[211]"></a>plug_holes</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[225]"></a>netconn_recv_data</STRONG> (Thumb, 946 bytes, Stack size 56 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
</UL>

<P><STRONG><a name="[22c]"></a>netconn_close_shutdown</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
</UL>

<P><STRONG><a name="[5e]"></a>recv_raw</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = recv_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>recv_udp</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>recv_tcp</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>err_tcp</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = err_tcp &rArr; sys_sem_signal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[23b]"></a>do_writemore</STRONG> (Thumb, 958 bytes, Stack size 40 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = do_writemore &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
</UL>

<P><STRONG><a name="[5a]"></a>sent_tcp</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = sent_tcp &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[23e]"></a>do_close_internal</STRONG> (Thumb, 450 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
</UL>

<P><STRONG><a name="[5b]"></a>poll_tcp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = poll_tcp &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[247]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setup_tcp &rArr; tcp_sent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[61]"></a>accept_function</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = accept_function &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[24b]"></a>pcb_new</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
</UL>

<P><STRONG><a name="[251]"></a>netconn_drain</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
</UL>

<P><STRONG><a name="[60]"></a>do_connected</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = do_connected &rArr; sys_sem_signal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>do_dns_found</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = do_dns_found &rArr; sys_sem_signal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[26f]"></a>alloc_socket</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = alloc_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[63]"></a>event_callback</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = event_callback &rArr; sys_sem_signal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text)
</UL>
<P><STRONG><a name="[27f]"></a>lwip_selscan</STRONG> (Thumb, 288 bytes, Stack size 72 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = lwip_selscan &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[283]"></a>lwip_getaddrname</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getpeername
</UL>

<P><STRONG><a name="[64]"></a>lwip_getsockopt_internal</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = lwip_getsockopt_internal &rArr; sys_sem_signal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>lwip_setsockopt_internal</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = lwip_setsockopt_internal &rArr; igmp_leavegroup &rArr; igmp_send &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text)
</UL>
<P><STRONG><a name="[280]"></a>tryget_socket</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sockets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
</UL>

<P><STRONG><a name="[66]"></a>tcpip_thread</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + Unknown Stack Size
<LI>Call Chain = tcpip_thread &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>pbuf_free_int</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = pbuf_free_int &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[29a]"></a>dhcp_delete_msg</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[29b]"></a>dhcp_option_trailer</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dhcp_option_trailer &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[29c]"></a>dhcp_option_byte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dhcp_option_byte &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[29d]"></a>dhcp_option</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_option &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[29e]"></a>dhcp_option_short</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dhcp_option_short &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[29f]"></a>dhcp_create_msg</STRONG> (Thumb, 426 bytes, Stack size 32 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_random
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[2a0]"></a>dhcp_discover</STRONG> (Thumb, 788 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2a4]"></a>dhcp_check</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2a6]"></a>dhcp_option_long</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dhcp_option_long &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[2a7]"></a>dhcp_select</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = dhcp_select &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2a9]"></a>dhcp_rebind</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[2ab]"></a>dhcp_reboot</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[2b1]"></a>dhcp_bind</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2b8]"></a>dhcp_parse_reply</STRONG> (Thumb, 1118 bytes, Stack size 64 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dhcp_parse_reply &rArr; pbuf_copy_partial &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[69]"></a>dhcp_recv</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(.text)
</UL>
<P><STRONG><a name="[2a1]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[2b4]"></a>dhcp_timeout</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[2b9]"></a>dhcp_handle_ack</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcp_handle_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2be]"></a>dhcp_decline</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[6a]"></a>dns_recv</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = dns_recv &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_parse_name
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns.o(.text)
</UL>
<P><STRONG><a name="[2c3]"></a>dns_send</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[2c4]"></a>dns_check_entry</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
</UL>

<P><STRONG><a name="[2c0]"></a>dns_parse_name</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[2c7]"></a>dns_enqueue</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + Unknown Stack Size
<LI>Call Chain = dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
</UL>

<P><STRONG><a name="[6b]"></a>pbuf_free_ooseq_callback</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = pbuf_free_ooseq_callback &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(.text)
</UL>
<P><STRONG><a name="[2da]"></a>pbuf_pool_is_empty</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[2f0]"></a>tcp_close_shutdown</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[2f9]"></a>tcp_new_port</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[6c]"></a>tcp_accept_null</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.text)
</UL>
<P><STRONG><a name="[2ff]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = tcp_oos_insert_segment &rArr; pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[300]"></a>tcp_receive</STRONG> (Thumb, 2810 bytes, Stack size 40 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[305]"></a>tcp_parseopt</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[304]"></a>tcp_process</STRONG> (Thumb, 1042 bytes, Stack size 48 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[307]"></a>tcp_listen_input</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[30b]"></a>tcp_timewait_input</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[30c]"></a>tcp_output_alloc_header</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[30d]"></a>tcp_create_segment</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[30e]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[30f]"></a>tcp_write_checks</STRONG> (Thumb, 588 bytes, Stack size 8 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_write_checks &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[311]"></a>tcp_output_segment</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[6d]"></a>tcpip_tcp_timer</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>ip_reass_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + Unknown Stack Size
<LI>Call Chain = ip_reass_timer &rArr; ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>arp_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = arp_timer &rArr; etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>dhcp_timer_coarse</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = dhcp_timer_coarse &rArr; dhcp_coarse_tmr &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>dhcp_timer_fine</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 708 + Unknown Stack Size
<LI>Call Chain = dhcp_timer_fine &rArr; dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>igmp_timer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = igmp_timer &rArr; igmp_tmr &rArr; igmp_send &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>dns_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + Unknown Stack Size
<LI>Call Chain = dns_timer &rArr; dns_tmr &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[31a]"></a>icmp_send_response</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[31c]"></a>igmp_lookup_group</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = igmp_lookup_group &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
</UL>

<P><STRONG><a name="[320]"></a>igmp_send</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = igmp_send &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_tmr
</UL>

<P><STRONG><a name="[322]"></a>igmp_start_timer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = igmp_start_timer &rArr; get_random &rArr; os_time_get &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_random
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>

<P><STRONG><a name="[31e]"></a>igmp_delaying_member</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = igmp_delaying_member &rArr; igmp_start_timer &rArr; get_random &rArr; os_time_get &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
</UL>

<P><STRONG><a name="[323]"></a>lwip_standard_chksum</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[32b]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = ip_reass_dequeue_datagram &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[32c]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
</UL>

<P><STRONG><a name="[32d]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[32e]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 438 bytes, Stack size 32 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[330]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = ip_frag_free_pbuf_custom_ref &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[74]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip_frag.o(.text)
</UL>
<P><STRONG><a name="[32f]"></a>ip_reass_enqueue_new_datagram</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[76]"></a>low_level_output</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = low_level_output &rArr; mac_data_xmit &rArr; __alloc_skb &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_data_xmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text)
</UL>
<P><STRONG><a name="[335]"></a>low_level_input</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[337]"></a>low_level_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = low_level_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wifi_dev
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[339]"></a>etharp_free_entry</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>

<P><STRONG><a name="[33a]"></a>etharp_find_entry</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[33b]"></a>etharp_send_ip</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = etharp_send_ip &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[33c]"></a>etharp_update_arp_entry</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[33e]"></a>etharp_arp_input</STRONG> (Thumb, 672 bytes, Stack size 40 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = etharp_arp_input &rArr; dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[33f]"></a>etharp_raw</STRONG> (Thumb, 286 bytes, Stack size 56 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[340]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[361]"></a>send_packet</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, serverpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420 + Unknown Stack Size
<LI>Call Chain = send_packet &rArr; kernel_packet &rArr; lwip_write &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet_to_client
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_inform
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNAK
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
</UL>

<P><STRONG><a name="[363]"></a>init_packet</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, serverpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = init_packet &rArr; init_header &rArr; add_simple_option &rArr; add_option_string &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_header
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_simple_option
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_inform
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNAK
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
</UL>

<P><STRONG><a name="[365]"></a>add_bootp_options</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, serverpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = add_bootp_options &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_inform
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
</UL>

<P><STRONG><a name="[362]"></a>send_packet_to_client</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, serverpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = send_packet_to_client &rArr; raw_packet &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[389]"></a>woal_get_priv</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, moal_main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw_dpc
</UL>

<P><STRONG><a name="[36b]"></a>woal_update_drv_tbl</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = woal_update_drv_tbl &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
</UL>

<P><STRONG><a name="[36d]"></a>woal_init_sw</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = woal_init_sw &rArr; woal_update_drv_tbl &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_setup
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_register
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_update_drv_tbl
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[36f]"></a>woal_free_moal_handle</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = woal_free_moal_handle &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_read
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_unregister
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[385]"></a>woal_init_fw_dpc</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, moal_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_set_init_param
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_init_fw
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_dnld_fw
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_moal_debug_info
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_priv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_fw_dpc
</UL>

<P><STRONG><a name="[38a]"></a>woal_request_fw_dpc</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, moal_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gettimeofday
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_fw
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_interface
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw_dpc
</UL>

<P><STRONG><a name="[3a6]"></a>woal_cancel_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = woal_cancel_timer &rArr; del_timer &rArr; OSTmrStop &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reset_intf
</UL>

<P><STRONG><a name="[3b4]"></a>woal_init_fw</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = woal_init_fw &rArr; do_gettimeofday &rArr; os_time_get &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gettimeofday
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_fw
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[3b6]"></a>woal_terminate_workqueue</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = woal_terminate_workqueue &rArr; destroy_workqueue &rArr; thread_exit &rArr; OSTaskDel &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_workqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[3be]"></a>woal_cfg80211_bss_role_cfg</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1180 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_bss_role_cfg &rArr; woal_init_priv &rArr; woal_cfg80211_uap_init_wiphy &rArr; woal_set_get_sys_config &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_role_cfg
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reset_intf
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_priv
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_change_virtual_intf
</UL>

<P><STRONG><a name="[3c0]"></a>woal_cfg80211_custom_ie</STRONG> (Thumb, 410 bytes, Stack size 56 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_custom_ie &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
</UL>

<P><STRONG><a name="[3c1]"></a>woal_filter_beacon_ies</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = woal_filter_beacon_ies &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
</UL>

<P><STRONG><a name="[3cc]"></a>woal_cac_period_block_cmd</STRONG> (Thumb, 196 bytes, Stack size 12 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = woal_cac_period_block_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
</UL>

<P><STRONG><a name="[405]"></a>sdio_io_rw_ext_helper</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; dma_start_send_data &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writesb
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readsb
</UL>

<P><STRONG><a name="[423]"></a>woal_get_priv</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = woal_get_priv
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[41a]"></a>woal_mod_timer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = woal_mod_timer &rArr; mod_timer &rArr; OSTmrStart &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_start_timer
</UL>

<P><STRONG><a name="[419]"></a>woal_cancel_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = woal_cancel_timer &rArr; del_timer &rArr; OSTmrStop &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_stop_timer
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_free_timer
</UL>

<P><STRONG><a name="[42f]"></a>woal_cfg80211_get_encryption_mode</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = woal_cfg80211_get_encryption_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[424]"></a>woal_cfg80211_assoc_ies_cfg</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_assoc_ies_cfg &rArr; woal_set_get_gen_ie &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_gen_ie
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[425]"></a>woal_send_domain_info_cmd_fw</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = woal_send_domain_info_cmd_fw &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_band_cfg_to_ieee_band
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rf_channel
</UL>

<P><STRONG><a name="[42a]"></a>woal_cfg80211_set_auth</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_set_auth &rArr; woal_set_wpa_enable &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_wpa_enable
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_encrypt_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[42e]"></a>woal_cfg80211_assoc</STRONG> (Thumb, 1240 bytes, Stack size 184 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_assoc &rArr; woal_cfg80211_inform_ibss_bss &rArr; cfg80211_inform_bss &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_find_essid
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_auth_mode
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_find_best_network
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_scan
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_11h_channel_check_ioctl
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_gen_ie
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_start
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rf_channel
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_wep_keys
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_key
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_disconnect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_passphrase
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_ewpa_mode
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_inform_ibss_bss
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_nl80211_iftype_to_mode
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_is_alg_wep
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_auth
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc_ies_cfg
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_get_encryption_mode
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_inform_bss_from_scan_result
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_join_ibss
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_connect
</UL>

<P><STRONG><a name="[432]"></a>woal_cfg80211_dump_station_info</STRONG> (Thumb, 336 bytes, Stack size 208 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_dump_station_info &rArr; woal_get_bss_info &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_signal_info
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_get_station
</UL>

<P><STRONG><a name="[bd]"></a>woal_cfg80211_scan</STRONG> (Thumb, 332 bytes, Stack size 960 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1316 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_scan &rArr; woal_cfg80211_mgmt_frame_ie &rArr; woal_cfg80211_custom_ie &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_do_scan
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>woal_cfg80211_connect</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_connect &rArr; woal_cfg80211_assoc &rArr; woal_cfg80211_inform_ibss_bss &rArr; cfg80211_inform_bss &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_type
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_scan
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_connect_result
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>woal_cfg80211_disconnect</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_disconnect &rArr; woal_disconnect &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>woal_cfg80211_get_station</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_get_station &rArr; woal_cfg80211_dump_station_info &rArr; woal_get_bss_info &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station_info
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>woal_cfg80211_dump_station</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_dump_station &rArr; woal_cfg80211_dump_station_info &rArr; woal_get_bss_info &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>woal_cfg80211_join_ibss</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_join_ibss &rArr; woal_cfg80211_assoc &rArr; woal_cfg80211_inform_ibss_bss &rArr; cfg80211_inform_bss &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_ibss_joined
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>woal_cfg80211_leave_ibss</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_leave_ibss &rArr; woal_disconnect &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>woal_cfg80211_set_power_mgmt</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_set_power_mgmt &rArr; woal_set_get_power_mgmt &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_power_mgmt
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>woal_cfg80211_set_cqm_rssi_config</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_set_cqm_rssi_config &rArr; woal_set_rssi_threshold &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rssi_threshold
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[430]"></a>woal_cfg80211_is_alg_wep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[427]"></a>woal_nl80211_iftype_to_mode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rf_channel
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[431]"></a>woal_cfg80211_inform_ibss_bss</STRONG> (Thumb, 152 bytes, Stack size 280 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_inform_ibss_bss &rArr; cfg80211_inform_bss &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_signal_info
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_put_bss
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_inform_bss
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[437]"></a>woal_cfg80211_beacon_config</STRONG> (Thumb, 748 bytes, Stack size 880 bytes, moal_uap_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1148 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_beacon_config &rArr; woal_set_get_sys_config &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_sys_config
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_11n_status
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_add_beacon
</UL>

<P><STRONG><a name="[cd]"></a>woal_uap_cfg80211_scan</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, moal_uap_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = woal_uap_cfg80211_scan &rArr; cfg80211_scan_done &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_scan_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>woal_uap_cfg80211_connect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, moal_uap_cfg80211.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>woal_uap_cfg80211_disconnect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, moal_uap_cfg80211.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[43a]"></a>woal_uap_aggr_priotbl</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = woal_uap_aggr_priotbl &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[43b]"></a>woal_uap_snmp_mib</STRONG> (Thumb, 222 bytes, Stack size 176 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = woal_uap_snmp_mib &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[43c]"></a>woal_uap_hs_cfg</STRONG> (Thumb, 238 bytes, Stack size 216 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = woal_uap_hs_cfg &rArr; woal_set_get_hs_params &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_hs_params
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[43d]"></a>woal_uap_tx_rate_cfg</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = woal_uap_tx_rate_cfg &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[43e]"></a>woal_uap_ioctl</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1148 + Unknown Stack Size
<LI>Call Chain = woal_uap_ioctl &rArr; woal_uap_mgmt_frame_control &rArr; woal_set_get_sys_config &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_antenna_cfg
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_mgmt_frame_control
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_tx_bf_cfg
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sdcmd52_rw
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_txdatapause
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_deep_sleep
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_fw_info
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_reject
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_param
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_tx_rate_cfg
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_hs_cfg
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_snmp_mib
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_aggr_priotbl
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[448]"></a>woal_enable_wapi</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = woal_enable_wapi &rArr; woal_uap_bss_ctrl &rArr; woal_11h_channel_check_ioctl &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_flag_ioctl
</UL>

<P><STRONG><a name="[449]"></a>woal_uap_set_wapi_flag_ioctl</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = woal_uap_set_wapi_flag_ioctl &rArr; woal_enable_wapi &rArr; woal_uap_bss_ctrl &rArr; woal_11h_channel_check_ioctl &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_wapi_enable
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_enable_wapi
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[43f]"></a>woal_uap_addba_param</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_uap_addba_param &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[440]"></a>woal_uap_addba_reject</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_uap_addba_reject &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[441]"></a>woal_uap_get_fw_info</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = woal_uap_get_fw_info &rArr; woal_request_get_fw_info &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_get_fw_info
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[442]"></a>woal_uap_deep_sleep</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = woal_uap_deep_sleep &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[443]"></a>woal_uap_txdatapause</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = woal_uap_txdatapause &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[444]"></a>woal_uap_sdcmd52_rw</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = woal_uap_sdcmd52_rw &rArr; sdio_writeb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_f0_writeb
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_f0_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[445]"></a>woal_uap_tx_bf_cfg</STRONG> (Thumb, 104 bytes, Stack size 160 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = woal_uap_tx_bf_cfg &rArr; woal_set_get_tx_bf_cfg &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_tx_bf_cfg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[446]"></a>woal_uap_mgmt_frame_control</STRONG> (Thumb, 98 bytes, Stack size 856 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1124 + Unknown Stack Size
<LI>Call Chain = woal_uap_mgmt_frame_control &rArr; woal_set_get_sys_config &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_sys_config_invalid_data
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_sys_config
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[447]"></a>woal_uap_antenna_cfg</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = woal_uap_antenna_cfg &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[450]"></a>woal_uap_sta_deauth_ioctl</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = woal_uap_sta_deauth_ioctl &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[451]"></a>woal_uap_radio_ctl</STRONG> (Thumb, 156 bytes, Stack size 176 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420 + Unknown Stack Size
<LI>Call Chain = woal_uap_radio_ctl &rArr; woal_get_bss_info &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[44d]"></a>woal_uap_power_mode_ioctl</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_uap_power_mode_ioctl &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[44f]"></a>woal_uap_bss_cfg_ioctl</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = woal_uap_bss_cfg_ioctl &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[452]"></a>woal_uap_get_sta_list_ioctl</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = woal_uap_get_sta_list_ioctl &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[44e]"></a>woal_uap_set_wapi_key_ioctl</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = woal_uap_set_wapi_key_ioctl &rArr; woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[465]"></a>wlan_11d_region_2_code</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_11d_region_2_code
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_handle_uap_domain_info
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_cfg_domain_info
</UL>

<P><STRONG><a name="[45e]"></a>wlan_11d_generate_domain_info</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_11d_generate_domain_info
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_dnld_countryinfo
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_create_dnld_countryinfo
</UL>

<P><STRONG><a name="[456]"></a>wlan_11d_process_country_info</STRONG> (Thumb, 244 bytes, Stack size 192 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wlan_11d_process_country_info &rArr; wlan_11d_parse_domain_info
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_domain_info
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_prepare_dnld_domain_info_cmd
</UL>

<P><STRONG><a name="[467]"></a>wlan_11d_set_domain_info</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_11d_set_domain_info
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_handle_uap_domain_info
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_cfg_domain_info
</UL>

<P><STRONG><a name="[45b]"></a>wlan_11d_channel_known</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_11d_channel_known &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_get_scan_type
</UL>

<P><STRONG><a name="[462]"></a>wlan_11d_update_chan_pwr_table</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = wlan_11d_update_chan_pwr_table &rArr; wlan_get_txpwr_of_chan_from_cfp
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_txpwr_of_chan_from_cfp
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_prepare_dnld_domain_info_cmd
</UL>

<P><STRONG><a name="[463]"></a>wlan_11d_copy_chan_power</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mlan_11d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_prepare_dnld_domain_info_cmd
</UL>

<P><STRONG><a name="[45f]"></a>wlan_11d_send_domain_info</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_handle_uap_domain_info
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_cfg_domain_info
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_dnld_countryinfo
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_create_dnld_countryinfo
</UL>

<P><STRONG><a name="[473]"></a>util_unlink_list</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cleanup
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_channel_under_nop
</UL>

<P><STRONG><a name="[478]"></a>wlan_count_priv_cond</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_count_priv_cond
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
</UL>

<P><STRONG><a name="[495]"></a>wlan_get_privs_by_two_cond</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_get_privs_by_two_cond
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_dfs_event_preprocessing
</UL>

<P><STRONG><a name="[480]"></a>wlan_11h_get_random_num</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_11h_get_random_num
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_switch_non_dfs_chan
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_adhoc_start_channel
</UL>

<P><STRONG><a name="[46e]"></a>wlan_11h_convert_ieee_to_mrvl_ie</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_11h_convert_ieee_to_mrvl_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_adhoc
</UL>

<P><STRONG><a name="[497]"></a>wlan_11h_set_supp_channels_ie</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_11h_set_supp_channels_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_infra_join
</UL>

<P><STRONG><a name="[46f]"></a>wlan_11h_set_local_power_constraint_tlv</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_11h_set_local_power_constraint_tlv
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_infra_join
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_adhoc
</UL>

<P><STRONG><a name="[46c]"></a>wlan_11h_process_adhoc</STRONG> (Thumb, 158 bytes, Stack size 96 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wlan_11h_process_adhoc &rArr; wlan_11h_set_ibss_dfs_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_set_ibss_dfs_ie
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_set_local_power_constraint_tlv
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_convert_ieee_to_mrvl_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
</UL>

<P><STRONG><a name="[7a]"></a>wlan_11h_is_slave_active_on_dfs_chan</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_11h_is_slave_active_on_dfs_chan &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_11h.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>wlan_11h_is_master_active_on_dfs_chan</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_11h_is_master_active_on_dfs_chan &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_11h.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>wlan_is_intf_active</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mlan_11h.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mlan_11h.o(.text)
</UL>
<P><STRONG><a name="[492]"></a>wlan_11h_prepare_custom_ie_chansw</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_11h_prepare_custom_ie_chansw
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
</UL>

<P><STRONG><a name="[470]"></a>wlan_11h_find_dfs_timestamp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_11h_find_dfs_timestamp &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_channel_under_nop
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_add_dfs_timestamp
</UL>

<P><STRONG><a name="[474]"></a>wlan_11h_add_dfs_timestamp</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_11h_add_dfs_timestamp &rArr; wlan_11h_find_dfs_timestamp &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_find_dfs_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_handle_event_chanrpt_ready
</UL>

<P><STRONG><a name="[471]"></a>util_peek_list</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cleanup
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_find_dfs_timestamp
</UL>

<P><STRONG><a name="[46d]"></a>wlan_11h_set_ibss_dfs_ie</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_11h_set_ibss_dfs_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_adhoc
</UL>

<P><STRONG><a name="[489]"></a>wlan_11h_cmd_chan_rpt_req</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_11h_cmd_chan_rpt_req &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cmd_process
</UL>

<P><STRONG><a name="[487]"></a>wlan_11h_process_infra_join</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wlan_11h_process_infra_join &rArr; wlan_11h_set_supp_channels_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_set_local_power_constraint_tlv
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_set_supp_channels_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
</UL>

<P><STRONG><a name="[77]"></a>wlan_11h_is_dfs_master</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mlan_11h.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_config_master_radar_det
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_dfs_slave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_11h.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>wlan_11h_is_dfs_slave</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_11h_is_dfs_slave
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_dfs_master
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_config_slave_radar_det
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_11h.o(.text)
</UL>
<P><STRONG><a name="[479]"></a>wlan_11h_get_current_radar_detect_flags</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mlan_11h.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_activate
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
</UL>

<P><STRONG><a name="[49a]"></a>wlan_send_delba_to_entry_in_txbastream_tbl</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = wlan_send_delba_to_entry_in_txbastream_tbl &rArr; wlan_send_delba &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_delba
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_delba
</UL>

<P><STRONG><a name="[49c]"></a>wlan_11n_ioctl_delba</STRONG> (Thumb, 316 bytes, Stack size 64 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = wlan_11n_ioctl_delba &rArr; wlan_send_delba_to_entry_in_reorder_tbl &rArr; wlan_send_delba &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_delba_to_entry_in_reorder_tbl
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_delba_to_entry_in_txbastream_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
</UL>

<P><STRONG><a name="[49e]"></a>wlan_11n_get_txbastream_status</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_11n_get_txbastream_status &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_delba
</UL>

<P><STRONG><a name="[4a0]"></a>wlan_fill_cap_info</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_fill_cap_info
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_fill_ht_cap_tlv
</UL>

<P><STRONG><a name="[49b]"></a>util_peek_list</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_txbastream_tbl
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_rxreorder_tbl
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_deleteall_txbastream_tbl
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_txbastream_tbl_entry
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_txbastream_tbl
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_delba_to_entry_in_reorder_tbl
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_addba_param
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_txbastream_status
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_delba
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_delba_to_entry_in_txbastream_tbl
</UL>

<P><STRONG><a name="[4ac]"></a>wlan_11n_ioctl_htusrcfg</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_11n_ioctl_htusrcfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
</UL>

<P><STRONG><a name="[4ae]"></a>wlan_11n_ioctl_addba_param</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = wlan_11n_ioctl_addba_param &rArr; wlan_send_addba &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_addba
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
</UL>

<P><STRONG><a name="[49d]"></a>wlan_send_delba_to_entry_in_reorder_tbl</STRONG> (Thumb, 158 bytes, Stack size 64 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = wlan_send_delba_to_entry_in_reorder_tbl &rArr; wlan_send_delba &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_delba
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_delba
</UL>

<P><STRONG><a name="[4ad]"></a>wlan_11n_ioctl_aggr_prio_tbl</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_11n_ioctl_aggr_prio_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
</UL>

<P><STRONG><a name="[4ba]"></a>util_peek_list</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, mlan_11n_aggr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_aggregate_pkt
</UL>

<P><STRONG><a name="[4bc]"></a>wlan_11n_form_amsdu_pkt</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, mlan_11n_aggr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_11n_form_amsdu_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_aggregate_pkt
</UL>

<P><STRONG><a name="[4c1]"></a>wlan_11n_dispatch_pkt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_uap_rx_packet
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_packet
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_amsdu_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_rxreorder_pkt
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_scan_and_dispatch
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt_until_start_win
</UL>

<P><STRONG><a name="[4c5]"></a>wlan_11n_dispatch_pkt_until_start_win</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_rxreorder_pkt
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_create_rxreorder_tbl
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_data
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_rxreorder_tbl_entry
</UL>

<P><STRONG><a name="[4c6]"></a>wlan_11n_delete_rxreorder_tbl_entry</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt_until_start_win
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cleanup_reorder_tbl
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cleanup_reorder_tbl
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_resp
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_delete_bastream_tbl
</UL>

<P><STRONG><a name="[7d]"></a>wlan_flush_data</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = wlan_flush_data &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt_until_start_win
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_11n_rxreorder.o(.text)
</UL>
<P><STRONG><a name="[4c9]"></a>wlan_11n_create_rxreorder_tbl</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = wlan_11n_create_rxreorder_tbl &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_rxreorder_tbl
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt_until_start_win
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_11n_addba_rspgen
</UL>

<P><STRONG><a name="[4c8]"></a>util_peek_list</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_rxreorder_tbl_no_drop_flag
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cleanup_reorder_tbl
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_rxreorder_tbl
</UL>

<P><STRONG><a name="[4c2]"></a>wlan_11n_dispatch_amsdu_pkt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_deaggregate_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt
</UL>

<P><STRONG><a name="[4cc]"></a>wlan_11n_scan_and_dispatch</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wlan_11n_scan_and_dispatch &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_rxreorder_pkt
</UL>

<P><STRONG><a name="[4d9]"></a>wlan_count_priv_cond</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_count_priv_cond
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_cfp_by_band_and_freq
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_cfp_by_band_and_channel
</UL>

<P><STRONG><a name="[4dc]"></a>wlan_get_region_cfp_table</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_get_region_cfp_table
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
</UL>

<P><STRONG><a name="[4dd]"></a>wlan_cfp_copy_dynamic</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_cfp_copy_dynamic
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
</UL>

<P><STRONG><a name="[4d6]"></a>wlan_copy_rates</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_copy_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_active_data_rates
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_supported_rates
</UL>

<P><STRONG><a name="[4e2]"></a>util_unlink_list</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_pending_ioctl
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_all_pending_cmd
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_exec_next_cmd
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_cmd_node
</UL>

<P><STRONG><a name="[4ef]"></a>wlan_get_priv_by_id</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_get_priv_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_event
</UL>

<P><STRONG><a name="[4eb]"></a>wlan_get_priv</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_get_priv
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adapter_init_cmd
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_sleep_confirm_resp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_timeout_func
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_exec_next_cmd
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_event
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_sleep_confirm_cmd
</UL>

<P><STRONG><a name="[4e0]"></a>wlan_get_cmd_node</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mlan_buffer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>

<P><STRONG><a name="[4e6]"></a>wlan_dnld_cmd_to_fw</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = wlan_dnld_cmd_to_fw &rArr; wlan_sdio_host_to_card &rArr; wlan_write_data_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_host_to_card
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_exec_next_cmd
</UL>

<P><STRONG><a name="[4ea]"></a>wlan_dnld_sleep_confirm_cmd</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wlan_dnld_sleep_confirm_cmd &rArr; wlan_host_sleep_activated_event &rArr; wlan_update_rxreorder_tbl &rArr; wlan_set_rxreorder_tbl_no_drop_flag &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_activated_event
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_host_to_card
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_ps_cond
</UL>

<P><STRONG><a name="[4e1]"></a>util_peek_list</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_pending_ioctl
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_all_pending_cmd
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_exec_next_cmd
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_cmd_node
</UL>

<P><STRONG><a name="[4e5]"></a>util_enqueue_list_tail</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_enqueue_list_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_pending_q
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
</UL>

<P><STRONG><a name="[4df]"></a>wlan_isxdigit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_cfg_data
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_atox
</UL>

<P><STRONG><a name="[513]"></a>util_init_list_head</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mlan_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_lock_list
</UL>

<P><STRONG><a name="[516]"></a>util_free_list_head</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mlan_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_lock_list
</UL>

<P><STRONG><a name="[519]"></a>util_peek_list</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delete_bsspriotbl
</UL>

<P><STRONG><a name="[514]"></a>util_scalar_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = util_scalar_init
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_lock_list
</UL>

<P><STRONG><a name="[517]"></a>util_scalar_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mlan_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_lock_list
</UL>

<P><STRONG><a name="[50d]"></a>wlan_add_bsspriotbl</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_add_bsspriotbl
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_priv
</UL>

<P><STRONG><a name="[51d]"></a>wlan_delete_bsspriotbl</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_delete_bsspriotbl &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_priv
</UL>

<P><STRONG><a name="[533]"></a>wlan_get_common_rates</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_get_common_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_setup_rates_from_bssdesc
</UL>

<P><STRONG><a name="[524]"></a>wlan_cmd_append_generic_ie</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_cmd_append_generic_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
</UL>

<P><STRONG><a name="[525]"></a>wlan_cmd_append_tsf_tlv</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_cmd_append_tsf_tlv
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
</UL>

<P><STRONG><a name="[521]"></a>wlan_setup_rates_from_bssdesc</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wlan_setup_rates_from_bssdesc &rArr; wlan_get_common_rates
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_strlen
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_common_rates
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_active_data_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
</UL>

<P><STRONG><a name="[523]"></a>wlan_cmd_append_wapi_ie</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_cmd_append_wapi_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
</UL>

<P><STRONG><a name="[534]"></a>wlan_strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mlan_join.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_setup_rates_from_bssdesc
</UL>

<P><STRONG><a name="[546]"></a>util_unlink_list</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delete_station_entry
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delete_station_list
</UL>

<P><STRONG><a name="[538]"></a>wlan_is_custom_ie_index_unused</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_is_custom_ie_index_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_custom_ioctl_get_autoidx
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_custom_ie_list
</UL>

<P><STRONG><a name="[537]"></a>wlan_custom_ioctl_get_autoidx</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = wlan_custom_ioctl_get_autoidx &rArr; wlan_is_custom_ie_index_unused
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_custom_ie_index_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_custom_ie_list
</UL>

<P><STRONG><a name="[53e]"></a>wlan_custom_ioctl_auto_delete</STRONG> (Thumb, 346 bytes, Stack size 584 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = wlan_custom_ioctl_auto_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_custom_ie_list
</UL>

<P><STRONG><a name="[551]"></a>wlan_rate_ioctl_set_rate_value</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = wlan_rate_ioctl_set_rate_value &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_active_data_rates
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_data_rate_to_index
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_cfg
</UL>

<P><STRONG><a name="[553]"></a>wlan_rate_ioctl_set_rate_index</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = wlan_rate_ioctl_set_rate_index &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_cfg
</UL>

<P><STRONG><a name="[543]"></a>util_peek_list</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pm_info
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_station_list_empty
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
</UL>

<P><STRONG><a name="[555]"></a>wlan_rate_ioctl_get_rate_value</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = wlan_rate_ioctl_get_rate_value &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_cfg
</UL>

<P><STRONG><a name="[56c]"></a>util_dequeue_list</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_dequeue_list
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_event_ext_scan_report
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
</UL>

<P><STRONG><a name="[558]"></a>search_oui_in_ie</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = search_oui_in_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_wpa_oui_present
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_rsn_oui_present
</UL>

<P><STRONG><a name="[557]"></a>is_rsn_oui_present</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = is_rsn_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_oui_in_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_network_compatible
</UL>

<P><STRONG><a name="[559]"></a>is_wpa_oui_present</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = is_wpa_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_oui_in_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_network_compatible
</UL>

<P><STRONG><a name="[55b]"></a>wlan_scan_create_channel_list</STRONG> (Thumb, 436 bytes, Stack size 56 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wlan_scan_create_channel_list &rArr; wlan_11d_get_scan_type &rArr; wlan_11d_channel_known &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bg_scan_type_is_passive
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_get_scan_type
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_band_compatible
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
</UL>

<P><STRONG><a name="[55e]"></a>wlan_scan_channel_list</STRONG> (Thumb, 676 bytes, Stack size 96 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = wlan_scan_channel_list &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_chan_blacklisted
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_csa_closed_channel
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_type_to_band
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
</UL>

<P><STRONG><a name="[561]"></a>wlan_scan_setup_scan_config</STRONG> (Thumb, 736 bytes, Stack size 96 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wlan_scan_setup_scan_config &rArr; wlan_scan_create_channel_list &rArr; wlan_11d_get_scan_type &rArr; wlan_11d_channel_known &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bg_scan_type_is_passive
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_supported_rates
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_fill_ht_cap_tlv
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_strlen
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_create_channel_list
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
</UL>

<P><STRONG><a name="[56e]"></a>wlan_ret_802_11_scan_get_tlv_ptrs</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_ret_802_11_scan_get_tlv_ptrs
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
</UL>

<P><STRONG><a name="[563]"></a>wlan_interpret_bss_desc_with_ie</STRONG> (Thumb, 1060 bytes, Stack size 88 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wlan_interpret_bss_desc_with_ie &rArr; wlan_11h_process_bss_elem
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_bss_elem
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_ext_scan_result
</UL>

<P><STRONG><a name="[566]"></a>wlan_adjust_ie_in_bss_entry</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, mlan_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan_store_beacon
</UL>

<P><STRONG><a name="[565]"></a>wlan_ret_802_11_scan_store_beacon</STRONG> (Thumb, 844 bytes, Stack size 64 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_ret_802_11_scan_store_beacon
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adjust_ie_in_bss_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_ext_scan_result
</UL>

<P><STRONG><a name="[569]"></a>wlan_restore_curr_bcn</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_restore_curr_bcn
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process_results
</UL>

<P><STRONG><a name="[568]"></a>wlan_scan_process_results</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = wlan_scan_process_results &rArr; wlan_11d_prepare_dnld_domain_info_cmd &rArr; wlan_11d_parse_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_save_curr_bcn
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_prepare_dnld_domain_info_cmd
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_ssid_in_list
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_restore_curr_bcn
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_event_ext_scan_report
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
</UL>

<P><STRONG><a name="[579]"></a>wlan_scan_delete_table_entry</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_scan_delete_table_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_specific_ssid
</UL>

<P><STRONG><a name="[570]"></a>wlan_parse_ext_scan_result</STRONG> (Thumb, 550 bytes, Stack size 120 bytes, mlan_scan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_cfp_by_band_and_channel
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_type_to_band
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan_store_beacon
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interpret_bss_desc_with_ie
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_event_ext_scan_report
</UL>

<P><STRONG><a name="[572]"></a>wlan_bgscan_create_channel_list</STRONG> (Thumb, 450 bytes, Stack size 56 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wlan_bgscan_create_channel_list &rArr; wlan_11d_get_scan_type &rArr; wlan_11d_channel_known &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bg_scan_type_is_passive
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_get_scan_type
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_band_compatible
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_bgscan_config
</UL>

<P><STRONG><a name="[56b]"></a>util_peek_list</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_event_ext_scan_report
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
</UL>

<P><STRONG><a name="[562]"></a>wlan_strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mlan_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_bgscan_config
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
</UL>

<P><STRONG><a name="[55c]"></a>wlan_is_band_compatible</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mlan_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bssid_in_list
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_bgscan_config
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_ssid_in_list
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bgscan_create_channel_list
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_create_channel_list
</UL>

<P><STRONG><a name="[55f]"></a>radio_type_to_band</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mlan_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_bgscan_config
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_ext_scan_result
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_channel_list
</UL>

<P><STRONG><a name="[577]"></a>wlan_find_best_network_in_list</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wlan_find_best_network_in_list &rArr; wlan_is_network_compatible &rArr; is_wpa_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_network_compatible
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_best_network
</UL>

<P><STRONG><a name="[582]"></a>wlan_write_data_sync</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_write_data_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_host_to_card
</UL>

<P><STRONG><a name="[57a]"></a>wlan_prog_fw_w_helper</STRONG> (Thumb, 396 bytes, Stack size 136 bytes, mlan_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delay_func
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_fw
</UL>

<P><STRONG><a name="[57b]"></a>wlan_decode_rx_packet</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = wlan_decode_rx_packet &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_sleep_confirm_resp
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_rx_packet
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_int_status
</UL>

<P><STRONG><a name="[580]"></a>wlan_sdio_init_ioport</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_sdio_init_ioport
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_probe
</UL>

<P><STRONG><a name="[589]"></a>wlan_get_priv</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_get_priv
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
</UL>

<P><STRONG><a name="[588]"></a>util_peek_list</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
</UL>

<P><STRONG><a name="[59e]"></a>wlan_cmd_802_11_snmp_mib</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_cmd_802_11_snmp_mib
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[593]"></a>wlan_cmd_802_11_key_material</STRONG> (Thumb, 576 bytes, Stack size 64 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wlan_cmd_802_11_key_material &rArr; wlan_set_keyparamset_wep
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_keyparamset_wep
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5a2]"></a>wlan_cmd_802_11_supplicant_pmk</STRONG> (Thumb, 350 bytes, Stack size 72 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wlan_cmd_802_11_supplicant_pmk
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5b4]"></a>wlan_cmd_subscribe_event</STRONG> (Thumb, 446 bytes, Stack size 12 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_cmd_subscribe_event
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[598]"></a>wlan_cmd_tx_power_cfg</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_cmd_tx_power_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[59a]"></a>wlan_cmd_802_11_hs_cfg</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_cmd_802_11_hs_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[594]"></a>wlan_set_keyparamset_wep</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_set_keyparamset_wep
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_key_material
</UL>

<P><STRONG><a name="[5a3]"></a>wlan_cmd_802_11_supplicant_profile</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_cmd_802_11_supplicant_profile
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5ae]"></a>wlan_cmd_mgmt_ie_list</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_cmd_mgmt_ie_list
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5bd]"></a>wlan_ret_tx_power_cfg</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_ret_tx_power_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5c5]"></a>wlan_ret_802_11_key_material</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_ret_802_11_key_material
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5b7]"></a>wlan_ret_802_11_supplicant_pmk</STRONG> (Thumb, 310 bytes, Stack size 160 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = wlan_ret_802_11_supplicant_pmk &rArr; wlan_find_bss &rArr; wlan_find_best_network &rArr; wlan_find_best_network_in_list &rArr; wlan_is_network_compatible &rArr; is_wpa_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bss
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5b9]"></a>wlan_ret_mgmt_ie_list</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = wlan_ret_mgmt_ie_list &rArr; wlan_11h_radar_detected_callback &rArr; wlan_11h_radar_detected_handling &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5bf]"></a>wlan_ret_802_11_rssi_info</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_ret_802_11_rssi_info
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5c0]"></a>wlan_ret_802_11_snmp_mib</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_ret_802_11_snmp_mib
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5cf]"></a>wlan_ret_ibss_coalescing_status</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_ret_ibss_coalescing_status
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5d6]"></a>wlan_handle_disconnect_event</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mlan_sta_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = wlan_handle_disconnect_event &rArr; wlan_reset_connect_state &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_connect_state
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[5d8]"></a>wlan_enable_aes_key</STRONG> (Thumb, 110 bytes, Stack size 112 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = wlan_enable_aes_key &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
</UL>

<P><STRONG><a name="[5d9]"></a>wlan_get_info_bss_info</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = wlan_get_info_bss_info &rArr; wlan_find_ssid_in_list &rArr; wlan_is_network_compatible &rArr; is_wpa_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_ssid_in_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_ioctl
</UL>

<P><STRONG><a name="[5da]"></a>wlan_get_info_ioctl</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = wlan_get_info_ioctl &rArr; wlan_get_info_bss_info &rArr; wlan_find_ssid_in_list &rArr; wlan_is_network_compatible &rArr; is_wpa_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_ver_ext
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_debug_info
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_bss_info
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[5db]"></a>wlan_radio_ioctl_band_cfg</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = wlan_radio_ioctl_band_cfg &rArr; wlan_set_regiontable &rArr; wlan_cfp_copy_dynamic
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_cfp_by_band_and_channel
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_set_universaltable
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[5dc]"></a>wlan_bss_ioctl_get_channel_list</STRONG> (Thumb, 262 bytes, Stack size 192 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wlan_bss_ioctl_get_channel_list &rArr; wlan_11d_parse_domain_info
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_chan_2_freq
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_domain_info
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
</UL>

<P><STRONG><a name="[5de]"></a>wlan_bss_ioctl_channel</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wlan_bss_ioctl_channel &rArr; wlan_find_cfp_by_band_and_freq &rArr; wlan_count_priv_cond
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_cfp_by_band_and_freq
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_cfp_by_band_and_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
</UL>

<P><STRONG><a name="[5df]"></a>wlan_bss_ioctl_start</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = wlan_bss_ioctl_start &rArr; wlan_enable_aes_key &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ssid_cmp
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adhoc_join
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adhoc_start
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_associate
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_csa_closed_channel
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_enable_aes_key
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bssid_in_list
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_ssid_in_list
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_network_compatible
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
</UL>

<P><STRONG><a name="[5e2]"></a>wlan_bss_ioctl</STRONG> (Thumb, 440 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = wlan_bss_ioctl &rArr; wlan_bss_ioctl_bss_role &rArr; wlan_free_priv &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_bss_role
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_find_bss
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_mode
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_set_multicast_list
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_channel
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_get_channel_list
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[5e5]"></a>wlan_power_ioctl_set_power</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = wlan_power_ioctl_set_power &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl
</UL>

<P><STRONG><a name="[5e6]"></a>wlan_power_ioctl_set_power_ext</STRONG> (Thumb, 370 bytes, Stack size 72 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = wlan_power_ioctl_set_power_ext &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl
</UL>

<P><STRONG><a name="[5e7]"></a>wlan_pm_ioctl_ps_mode</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = wlan_pm_ioctl_ps_mode &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl
</UL>

<P><STRONG><a name="[5e9]"></a>wlan_set_get_ps_cfg</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_set_get_ps_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl
</UL>

<P><STRONG><a name="[5e8]"></a>wlan_pm_ioctl</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = wlan_pm_ioctl &rArr; wlan_pm_ioctl_hscfg &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_hs_wakeup_reason
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pm_info
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl_hscfg
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_get_ps_cfg
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl_ps_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[5ea]"></a>wlan_set_wpa_ie_helper</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = wlan_set_wpa_ie_helper &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_gen_ie_helper
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_cfg_ioctl
</UL>

<P><STRONG><a name="[5eb]"></a>wlan_set_wapi_ie</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = wlan_set_wapi_ie &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_gen_ie_helper
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_cfg_ioctl
</UL>

<P><STRONG><a name="[5ec]"></a>wlan_sec_ioctl_set_wep_key</STRONG> (Thumb, 370 bytes, Stack size 48 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = wlan_sec_ioctl_set_wep_key &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_encrypt_key
</UL>

<P><STRONG><a name="[5ed]"></a>wlan_sec_ioctl_set_wpa_key</STRONG> (Thumb, 290 bytes, Stack size 64 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = wlan_sec_ioctl_set_wpa_key &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_encrypt_key
</UL>

<P><STRONG><a name="[60d]"></a>wlan_sec_ioctl_get_key</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_sec_ioctl_get_key
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_encrypt_key
</UL>

<P><STRONG><a name="[5ee]"></a>wlan_sec_cfg_ioctl</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = wlan_sec_cfg_ioctl &rArr; wlan_set_wapi_ie &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cleanup_bypass_txq
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_esupp_mode
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_passphrase
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_encrypt_key
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wapi_ie
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wpa_ie_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[5f3]"></a>wlan_set_gen_ie_helper</STRONG> (Thumb, 484 bytes, Stack size 48 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = wlan_set_gen_ie_helper &rArr; wlan_set_wapi_ie &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wapi_ie
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wpa_ie_helper
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_gen_ie
</UL>

<P><STRONG><a name="[5f4]"></a>wlan_misc_ioctl_gen_ie</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = wlan_misc_ioctl_gen_ie &rArr; wlan_set_gen_ie_helper &rArr; wlan_set_wapi_ie &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_gen_ie_helper
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[5ff]"></a>wlan_misc_cfg_ioctl</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = wlan_misc_cfg_ioctl &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_otp_user_data
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_rx_mgmt_ind
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_init_shutdown
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_host_cmd
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_custom_ie_list
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_country_code
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_cfp_code_cfg
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_ipaddr_cfg
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_mef_cfg
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_subscribe_evt
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_thermal
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_mac_control
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_warm_reset
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_region
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_gen_ie
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_txcontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[604]"></a>wlan_set_get_scan_cfg</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_ioctl
</UL>

<P><STRONG><a name="[603]"></a>wlan_scan_ioctl</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = wlan_scan_ioctl &rArr; wlan_scan_specific_ssid &rArr; wlan_scan_networks &rArr; wlan_scan_setup_scan_config &rArr; wlan_scan_create_channel_list &rArr; wlan_11d_get_scan_type &rArr; wlan_11d_channel_known &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_get_scan_cfg
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_specific_ssid
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_table
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[606]"></a>wlan_snmp_mib_ioctl</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = wlan_snmp_mib_ioctl &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[5e4]"></a>wlan_bss_ioctl_set_multicast_list</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = wlan_bss_ioctl_set_multicast_list &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
</UL>

<P><STRONG><a name="[5e3]"></a>wlan_bss_ioctl_mode</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = wlan_bss_ioctl_mode &rArr; wlan_disconnect &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
</UL>

<P><STRONG><a name="[5e1]"></a>wlan_query_passphrase</STRONG> (Thumb, 136 bytes, Stack size 144 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = wlan_query_passphrase &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bssid_in_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_find_bss
</UL>

<P><STRONG><a name="[607]"></a>wlan_rate_ioctl</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = wlan_rate_ioctl &rArr; wlan_rate_ioctl_cfg &rArr; wlan_rate_ioctl_set_rate_value &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_active_data_rates
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_get_data_rate
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[608]"></a>wlan_power_ioctl</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = wlan_power_ioctl &rArr; wlan_power_ioctl_set_power_ext &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl_get_power
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl_set_power_ext
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl_set_power
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[5f0]"></a>wlan_sec_ioctl_encrypt_key</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = wlan_sec_ioctl_encrypt_key &rArr; wlan_sec_ioctl_set_wpa_key &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_get_key
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_set_wpa_key
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_set_wep_key
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_cfg_ioctl
</UL>

<P><STRONG><a name="[5f1]"></a>wlan_sec_ioctl_passphrase</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = wlan_sec_ioctl_passphrase &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bssid_in_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_cfg_ioctl
</UL>

<P><STRONG><a name="[5f2]"></a>wlan_sec_ioctl_esupp_mode</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = wlan_sec_ioctl_esupp_mode &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_cfg_ioctl
</UL>

<P><STRONG><a name="[60a]"></a>wlan_11d_cfg_ioctl</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = wlan_11d_cfg_ioctl &rArr; wlan_11d_cfg_domain_info &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_cfg_domain_info
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_clear_parsedtable
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[60b]"></a>wlan_11h_channel_check_req</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = wlan_11h_channel_check_req &rArr; wlan_11h_issue_radar_detect &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_issue_radar_detect
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_adhoc_start_channel
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_activate
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_config_master_radar_det
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_channel_under_nop
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[600]"></a>wlan_misc_ioctl_region</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = wlan_misc_ioctl_region &rArr; wlan_set_regiontable &rArr; wlan_cfp_copy_dynamic
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[601]"></a>wlan_misc_ioctl_warm_reset</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = wlan_misc_ioctl_warm_reset &rArr; wlan_free_priv &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_priv
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_adapter
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_priv
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[60c]"></a>wlan_power_ioctl_get_power</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = wlan_power_ioctl_get_power &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl
</UL>

<P><STRONG><a name="[611]"></a>util_unlink_list</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cleanup_bypass_txq
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_bypass_tx
</UL>

<P><STRONG><a name="[60e]"></a>wlan_get_priv</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_get_priv
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_rx_packet
</UL>

<P><STRONG><a name="[610]"></a>util_peek_list</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cleanup_bypass_txq
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bypass_tx_list_empty
</UL>

<P><STRONG><a name="[613]"></a>wlan_uap_cmd_ap_config</STRONG> (Thumb, 1938 bytes, Stack size 64 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_uap_cmd_ap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_cmd_sys_configure
</UL>

<P><STRONG><a name="[612]"></a>wlan_uap_cmd_sys_configure</STRONG> (Thumb, 490 bytes, Stack size 40 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wlan_uap_cmd_sys_configure &rArr; wlan_uap_cmd_ap_config
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_cmd_ap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
</UL>

<P><STRONG><a name="[615]"></a>wlan_uap_ret_cmd_ap_config</STRONG> (Thumb, 1034 bytes, Stack size 32 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_uap_ret_cmd_ap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_ret_sys_config
</UL>

<P><STRONG><a name="[614]"></a>wlan_uap_ret_sys_config</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = wlan_uap_ret_sys_config &rArr; wlan_11h_radar_detected_callback &rArr; wlan_11h_radar_detected_handling &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_callback
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_ret_cmd_ap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
</UL>

<P><STRONG><a name="[619]"></a>wlan_uap_ret_snmp_mib</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_uap_ret_snmp_mib
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
</UL>

<P><STRONG><a name="[616]"></a>wlan_uap_cmd_key_material</STRONG> (Thumb, 556 bytes, Stack size 56 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wlan_uap_cmd_key_material &rArr; wlan_add_station_entry &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_station_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
</UL>

<P><STRONG><a name="[617]"></a>wlan_process_sta_assoc_event</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_process_sta_assoc_event &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[618]"></a>wlan_uap_cmd_snmp_mib</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_uap_cmd_snmp_mib &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
</UL>

<P><STRONG><a name="[61b]"></a>wlan_check_sta_capability</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_check_sta_capability &rArr; wlan_check_specific_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_specific_ie
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_wmm_ie_present
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_specific_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[61a]"></a>wlan_check_uap_capability</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wlan_check_uap_capability &rArr; wlan_wmm_setup_queues &rArr; wlan_wmm_setup_queue_priorities &rArr; wlan_wmm_queue_priorities_tid &rArr; util_scalar_write
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_queues
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_queue_priorities
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_ac_downgrade
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[61c]"></a>wlan_update_wapi_info_tlv</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_update_wapi_info_tlv
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[81]"></a>wlan_uap_callback_bss_ioctl_start</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = wlan_uap_callback_bss_ioctl_start &rArr; wlan_uap_set_channel &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_set_channel
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_switch_non_dfs_chan
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_chan_report
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_channel_under_nop
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_uap_ioctl.o(.text)
</UL>
<P><STRONG><a name="[624]"></a>wlan_uap_set_wapi_ie</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = wlan_uap_set_wapi_ie &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[83]"></a>wlan_uap_callback_domain_info</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = wlan_uap_callback_domain_info &rArr; wlan_11d_handle_uap_domain_info &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_handle_uap_domain_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_uap_ioctl.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>wlan_uap_callback_11h_channel_check_req</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = wlan_uap_callback_11h_channel_check_req &rArr; wlan_11h_issue_radar_detect &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_issue_radar_detect
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_activate
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_config_master_radar_det
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_channel_under_nop
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_uap_ioctl.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>wlan_uap_callback_snmp_mib_11h</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = wlan_uap_callback_snmp_mib_11h &rArr; wlan_11h_check_update_radar_det_state &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_activate
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_config_master_radar_det
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_master_radar_det_active
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_uap_ioctl.o(.text)
</UL>
<P><STRONG><a name="[626]"></a>wlan_uap_bss_ioctl_reset</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = wlan_uap_bss_ioctl_reset &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[627]"></a>wlan_uap_pm_ioctl_mode</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = wlan_uap_pm_ioctl_mode &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[628]"></a>wlan_uap_pm_ioctl_deepsleep</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = wlan_uap_pm_ioctl_deepsleep &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[629]"></a>wlan_check_unicast_packet</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, mlan_uap_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wlan_check_unicast_packet &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_uap_rx_packet
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_recv_packet
</UL>

<P><STRONG><a name="[62c]"></a>util_unlink_list</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_txrx
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_del_pkts_in_ralist_node
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_dequeue_list
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_delete_peer_ralist
</UL>

<P><STRONG><a name="[62b]"></a>util_dequeue_list</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = util_dequeue_list &rArr; util_unlink_list
</UL>
<BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_del_tx_pkts_in_ralist
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_processed_packet
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_single_packet
</UL>

<P><STRONG><a name="[638]"></a>util_scalar_conditional_write</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = util_scalar_conditional_write
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_highest_priolist_ptr
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>

<P><STRONG><a name="[62d]"></a>wlan_is_amsdu_allowed</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_is_amsdu_allowed &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[62e]"></a>wlan_is_11n_enabled</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_add
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_update
</UL>

<P><STRONG><a name="[63f]"></a>wlan_wmm_downgrade_tid</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, mlan_wmm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>

<P><STRONG><a name="[62f]"></a>wlan_wmm_del_pkts_in_ralist_node</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_wmm_del_pkts_in_ralist_node &rArr; wlan_write_data_complete &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_complete
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cleanup_queues
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_delete_peer_ralist
</UL>

<P><STRONG><a name="[633]"></a>wlan_send_wmmac_host_event</STRONG> (Thumb, 212 bytes, Stack size 152 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_send_wmmac_host_event &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_get_status
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_delts_req
</UL>

<P><STRONG><a name="[635]"></a>wlan_wmm_get_highest_priolist_ptr</STRONG> (Thumb, 380 bytes, Stack size 64 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wlan_wmm_get_highest_priolist_ptr &rArr; util_scalar_conditional_write
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_write
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_read
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_conditional_write
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[639]"></a>wlan_send_single_packet</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wlan_send_single_packet &rArr; wlan_process_tx &rArr; wlan_sdio_host_to_card &rArr; wlan_write_data_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_complete
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_ralist_valid
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_decrement
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_increment
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_enqueue_list_head
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_dequeue_list
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[63d]"></a>wlan_send_processed_packet</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wlan_send_processed_packet &rArr; wlan_sdio_host_to_card &rArr; wlan_write_data_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_complete
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_host_to_card
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_ralist_valid
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_decrement
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_enqueue_list_head
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_dequeue_list
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[63e]"></a>wlan_dequeue_tx_packet</STRONG> (Thumb, 532 bytes, Stack size 64 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = wlan_dequeue_tx_packet &rArr; wlan_send_delba &rArr; wlan_prepare_cmd &rArr; wlan_get_cmd_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_aggregate_pkt
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_create_txbastream_tbl
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_txbastream_tbl
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_delba
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_addba
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_num_pkts_in_txq
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_bastream_setup
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_processed_packet
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_single_packet
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_highest_priolist_ptr
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_downgrade_tid
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_amsdu_allowed
</UL>
<BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_process_tx
</UL>

<P><STRONG><a name="[630]"></a>util_peek_list</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_txrx
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_ralist_valid
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_ralist_node
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_del_tx_pkts_in_ralist
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cleanup_queues
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_processed_packet
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_single_packet
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_highest_priolist_ptr
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_del_pkts_in_ralist_node
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>

<P><STRONG><a name="[632]"></a>util_enqueue_list_tail</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_enqueue_list_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_add
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>

<P><STRONG><a name="[63c]"></a>util_enqueue_list_head</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_enqueue_list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_processed_packet
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_single_packet
</UL>

<P><STRONG><a name="[636]"></a>util_scalar_read</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_scalar_read
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_highest_priolist_ptr
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_delete_peer_ralist
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_updata_ralist_tx_pause
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_lists_empty
</UL>

<P><STRONG><a name="[637]"></a>util_scalar_write</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_scalar_write
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cleanup_queues
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_queue_priorities_tid
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_highest_priolist_ptr
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_delete_peer_ralist
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_updata_ralist_tx_pause
</UL>

<P><STRONG><a name="[63b]"></a>util_scalar_increment</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = util_scalar_increment
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_single_packet
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>

<P><STRONG><a name="[63a]"></a>util_scalar_decrement</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = util_scalar_decrement
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_del_tx_pkts_in_ralist
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_processed_packet
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_single_packet
</UL>

<P><STRONG><a name="[631]"></a>queuing_ra_based</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mlan_wmm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_add
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_update
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>

<P><STRONG><a name="[634]"></a>wlan_strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mlan_wmm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_wmmac_host_event
</UL>

<P><STRONG><a name="[640]"></a>wlan_is_bastream_setup</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_is_bastream_setup &rArr; wlan_11n_get_txbastream_tbl &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_txbastream_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[644]"></a>wlan_wmm_queue_priorities_tid</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_wmm_queue_priorities_tid &rArr; util_scalar_write
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_write
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_queue_priorities
</UL>

<P><STRONG><a name="[642]"></a>wlan_wmm_cleanup_queues</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wlan_wmm_cleanup_queues &rArr; wlan_wmm_del_pkts_in_ralist_node &rArr; wlan_write_data_complete &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_write
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_del_pkts_in_ralist_node
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_txrx
</UL>

<P><STRONG><a name="[641]"></a>wlan_num_pkts_in_txq</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_num_pkts_in_txq
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[646]"></a>wlan_del_tx_pkts_in_ralist</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_del_tx_pkts_in_ralist &rArr; wlan_write_data_complete &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_complete
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_decrement
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_dequeue_list
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drop_tx_pkts
</UL>

<P><STRONG><a name="[669]"></a>skb_release_data</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = skb_release_data &rArr; kfree_skb &rArr; __kfree_skb &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub_return
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfree_skb
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_page
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_has_frag_list
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_all
</UL>

<P><STRONG><a name="[66e]"></a>__copy_skb_header</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __copy_skb_header &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_skb_header
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__skb_clone
</UL>

<P><STRONG><a name="[66f]"></a>__skb_clone</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __skb_clone &rArr; __copy_skb_header &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__copy_skb_header
</UL>
<BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_morph
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_clone
</UL>

<P><STRONG><a name="[678]"></a>__pskb_pull</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
</UL>

<P><STRONG><a name="[67f]"></a>copy_skb_header</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = copy_skb_header &rArr; __copy_skb_header &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_mac_header_was_set
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__copy_skb_header
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_expand
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_copy
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy
</UL>

<P><STRONG><a name="[66a]"></a>skb_has_frag_list</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_copy
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_data
</UL>

<P><STRONG><a name="[67d]"></a>skb_release_head_state</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_recycle_check
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_all
</UL>

<P><STRONG><a name="[66d]"></a>skb_release_all</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = skb_release_all &rArr;  skb_release_data (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_head_state
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_data
</UL>
<BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_morph
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfree_skb
</UL>

<P><STRONG><a name="[676]"></a>skb_mac_header_was_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_skb_header
</UL>

<P><STRONG><a name="[675]"></a>skb_clone_fraglist</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_copy
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
</UL>

<P><STRONG><a name="[680]"></a>skb_over_panic</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = skb_over_panic &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_put
</UL>

<P><STRONG><a name="[685]"></a>skb_under_panic</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_push
</UL>

<P><STRONG><a name="[689]"></a>wpa_selector_to_bitfield</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, usr_cfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
</UL>

<P><STRONG><a name="[687]"></a>rsn_selector_to_bitfield</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, usr_cfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
</UL>

<P><STRONG><a name="[688]"></a>wpa_parse_wpa_ie_wpa</STRONG> (Thumb, 780 bytes, Stack size 40 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wpa_parse_wpa_ie_wpa &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_selector_to_bitfield
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
</UL>

<P><STRONG><a name="[6f1]"></a>Byte_Receive</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dht11_bus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = Byte_Receive &rArr; Input_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_GPIO_Config
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nus
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11Read
</UL>

<P><STRONG><a name="[6f2]"></a>Input_GPIO_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dht11_bus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = Input_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_Receive
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11Read
</UL>

<P><STRONG><a name="[6f4]"></a>Output_GPIO_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dht11_bus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = Output_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11Read
</UL>

<P><STRONG><a name="[716]"></a>_printf_core</STRONG> (Thumb, 1064 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$8
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[720]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[71f]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8b]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf8.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0snprintf$8)
</UL>
<P><STRONG><a name="[8c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[71d]"></a>_fp_digits</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[718]"></a>_printf_core</STRONG> (Thumb, 1734 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[722]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[721]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8a]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[71c]"></a>internal_alloc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__malloc$realloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
